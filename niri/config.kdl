// 此配置文件采用 KDL 格式：https://kdl.dev
// "/-" 符号用于注释掉后续节点。
// 查看维基百科以获取配置的完整说明：
// https://yalter.github.io/niri/Configuration:-Introduction

// 输入设备配置。
// 在维基百科上查看完整选项列表：
// https://yalter.github.io/niri/Configuration:-Input
input {
    keyboard {
        xkb {
            // 可在此设置规则、型号、布局、变体和选项。
            // 更多信息请参阅 xkeyboard-config(7) 手册。

            // 示例：
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"

            // 若此部分为空，niri 将从 org.freedesktop.locale1 获取 xkb 设置。
            // 可通过 localectl set-x11-keymap 命令控制这些设置。
        }

        // 启动时启用数字小键盘，省略此设置则禁用。
        numlock
    }

    // 以下部分包含 libinput 设置。
    // 省略设置将禁用该功能，或保留其默认值。
    // 此处所有注释掉的设置均为示例，非默认值。
    touchpad {
        // off（禁用触控板）
        tap //（启用轻触点击）
        // dwt（禁用触摸板边缘滚动）
        // dwtp（禁用触摸板边缘滚动时的指针移动）
        // drag false（禁用拖拽功能）
        // drag-lock（启用拖拽锁定）
        natural-scroll //（启用自然滚动）
        // accel-speed 0.2（设置加速度）
        // accel-profile "flat"（设置加速度配置文件）
        // scroll-method "two-finger"（设置滚动方式为双指滚动）
        // disabled-on-external-mouse（连接外部鼠标时禁用触控板）
    }

    mouse {
        // off（禁用鼠标）
        // natural-scroll（启用自然滚动）
        // accel-speed 0.2（设置加速度）
        // accel-profile "flat"（设置加速度配置文件）
        // scroll-method "no-scroll"（禁用滚动功能）
    }

    trackpoint {
        // off（禁用指点杆）
        // natural-scroll（启用自然滚动）
        // accel-speed 0.2（设置加速度）
        // accel-profile "flat"（设置加速度配置文件）
        // scroll-method "on-button-down"（按下按钮时启用滚动）
        // scroll-button 273（设置滚动按钮）
        // scroll-button-lock（启用滚动按钮锁定）
        // middle-emulation（启用中键模拟）
    }

    // 取消注释此选项，可使鼠标在新聚焦窗口的中心位置跳转。
    // warp-mouse-to-focus

    // 鼠标移入窗口或输出设备时，自动聚焦对应窗口和输出设备。
    // 将 max-scroll-amount 设置为 "0%" 时，仅对已完全显示在屏幕上的窗口生效。
    // focus-follows-mouse max-scroll-amount="0%"
}

// 可通过输出设备名称配置输出，名称可在 niri 实例中运行 `niri msg outputs` 命令查看。
// 笔记本内置显示器通常名为 "eDP-1"。
// 在维基百科上查看更多信息：
// https://yalter.github.io/niri/Configuration:-Outputs
// 取消注释时需移除开头的 "/-"！
/-output "eDP-1" {
    // 取消注释此行以禁用此输出设备。
    // off

    // 输出设备的分辨率，可选包含刷新率。
    // 格式为 "<宽度>x<高度>" 或 "<宽度>x<高度>@<刷新率>"。
    // 若省略刷新率，niri 将为该分辨率选择最高刷新率。
    // 若完全省略模式或模式无效，niri 将自动选择一个模式。
    // 在 niri 实例中运行 `niri msg outputs` 命令，可列出所有输出设备及其模式。
    mode "1920x1080@120.030"

    // 可使用整数或小数缩放比例，例如 1.5 表示 150% 缩放。
    scale 2

    // Transform 选项可使输出设备逆时针旋转，有效值包括：
    // normal（正常）、90（旋转90度）、180（旋转180度）、270（旋转270度）、flipped（翻转）、flipped-90（翻转后旋转90度）、flipped-180（翻转后旋转180度）、flipped-270（翻转后旋转270度）。
    transform "normal"

    // 输出设备在全局坐标空间中的位置。
    // 此设置影响 "focus-monitor-left" 等方向显示器操作，以及光标移动。
    // 光标只能在直接相邻的输出设备之间移动。
    // 定位时需考虑输出设备的缩放比例和旋转：
    // 输出设备以逻辑像素（即缩放后像素）为单位计算尺寸。
    // 例如，分辨率 3840×2160 且缩放比例 2.0 的输出设备，逻辑尺寸为 1920×1080，
    // 因此若要在其右侧直接相邻放置另一个输出设备，需将后者的 x 坐标设为 1920。
    // 若未设置位置或位置导致重叠，输出设备将自动排列。
    position x=1280 y=0
}

// 影响窗口定位和尺寸的设置。
// 在维基百科上查看更多信息：
// https://yalter.github.io/niri/Configuration:-Layout
layout {
    // 设置窗口周围的间隙（单位：逻辑像素）。
    gaps 16

    // 更改焦点时何时居中列，选项包括：
    // - "never"（默认行为）：聚焦屏幕外的列时，保持在屏幕左边缘或右边缘。
    // - "always"：聚焦列始终居中显示。
    // - "on-overflow"：仅当聚焦列无法与之前聚焦的列一起显示时，才将其居中。
    center-focused-column "on-overflow"

    // 可自定义 "switch-preset-column-width"（快捷键 Mod+R）切换的宽度预设。
    preset-column-widths {
        // Proportion 将宽度设置为输出设备宽度的比例（需考虑间隙）。
        // 例如，输出设备上可完美容纳四个宽度设为 "proportion 0.25" 的窗口。
        // 默认宽度预设为输出设备的 1/3、1/2 和 2/3。
        proportion 0.5
        proportion 0.66667
        proportion 0.9

        // Fixed 将宽度精确设置为逻辑像素值。
        // fixed 1920
    }

    // 也可自定义 "switch-preset-window-height"（快捷键 Mod+Shift+R）切换的高度预设。
    preset-window-heights { 
        proportion 0.5
        proportion 1.0
    }

    // 可更改新窗口的默认宽度。
    default-column-width { proportion 0.5; }
    // 若留空括号，窗口将自行决定初始宽度。
    // default-column-width {}

    // 默认情况下，焦点环和边框以纯色背景矩形形式绘制在窗口后方。
    // 这意味着它们会透过半透明窗口显示。
    // 原因是使用客户端装饰（CSD）的窗口可能具有任意形状。
    //
    // 若不喜欢此效果，应取消注释下方的 `prefer-no-csd`。
    // 对于同意省略客户端装饰的窗口，niri 将在窗口周围绘制焦点环和边框。
    //
    // 此外，也可通过名为 `draw-border-with-background` 的窗口规则覆盖此设置。

    // 可更改焦点环的外观。
    focus-ring {
        // 取消注释此行以禁用焦点环。
        // off

        // 焦点环从窗口向外延伸的逻辑像素数。
        width 4

        // 颜色可通过多种方式设置：
        // - CSS 命名颜色："red"（红色）
        // - RGB 十六进制："#rgb"、"#rgba"、"#rrggbb"、"#rrggbbaa"
        // - CSS 类语法："rgb(255, 127, 0)"（橙红色）、rgba()、hsl() 等。

        // 活动显示器上焦点环的颜色。
        active-color "#333333"

        // 非活动显示器上焦点环的颜色。
        //
        // 焦点环仅围绕活动窗口绘制，因此只能在其他显示器上看到非活动颜色。
        inactive-color "#505050"

        // 也可使用渐变，渐变优先级高于纯色。
        // 渐变渲染方式与 CSS linear-gradient(角度, 起始色, 结束色) 相同。
        // 角度与 linear-gradient 中的角度一致，为可选参数，默认值为 180（从上到下渐变）。
        // 可使用网页上的任意 CSS linear-gradient 工具配置渐变。
        // 也支持更改颜色空间，更多信息请查看维基百科。
        //
        active-gradient from="#33333f" to="#c7ff7f" angle=45

        // 也可相对于工作区的整个视图（而非仅窗口本身）为渐变着色。
        // 若要实现此效果，需设置 relative-to="workspace-view"。
        //
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // 也可添加边框，边框与焦点环类似，但始终可见。
    border {
        // 设置与焦点环相同。
        // 若启用边框，可能需要禁用焦点环。
        off

        width 1
        active-color "#ffc87f"
        inactive-color "#505050"

        // 请求用户关注的窗口周围边框的颜色。
        urgent-color "#9b0000"

        // 渐变可使用多种插值颜色空间。
        // 例如，以下是通过 in="oklch longer hue" 设置的柔和彩虹渐变。
        //
        // active-gradient from="#e5989b" to="#ffb4a2" angle=45 relative-to="workspace-view" in="oklch longer hue"

        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // 可为窗口启用阴影效果。
    shadow {
        // 取消注释下一行以启用阴影。
        // on

        // 默认情况下，阴影仅围绕窗口绘制，不会绘制在窗口后方。
        // 取消注释此设置，可使阴影绘制在窗口后方。
        //
        // 注意：niri 无法获取客户端装饰（CSD）窗口的圆角半径。
        // 它会默认假设窗口为直角，导致 CSD 圆角内侧出现阴影瑕疵。此设置可修复这些瑕疵。
        //
        // 但更推荐设置 prefer-no-csd 和/或 geometry-corner-radius。
        // 这样 niri 将知道圆角半径，可正确绘制阴影，无需将阴影绘制在窗口后方。
        // 这些设置还会移除窗口自身绘制的客户端阴影（若有）。
        //
        // draw-behind-window true

        // 可更改阴影外观，以下值以逻辑像素为单位，与 CSS box-shadow 属性匹配。

        // Softness 控制阴影的模糊半径。
        softness 30

        // Spread 控制阴影的扩展范围。
        spread 5

        // Offset 控制阴影相对于窗口的偏移位置。
        offset x=0 y=5

        // 也可更改阴影的颜色和透明度。
        color "#0007"
    }

    // Struts（支撑区）会缩小窗口占用的区域，类似于层壳面板（layer-shell panels）。
    // 可将其视为一种外部间隙，单位为逻辑像素。
    // 左侧和右侧支撑区会确保侧边的下一个窗口始终可见。
    // 顶部和底部支撑区则会在层壳面板和常规间隙之外额外添加外部间隙。
    struts {
        // left 64（左侧支撑区宽度 64 像素）
        // right 64（右侧支撑区宽度 64 像素）
        // top 64（顶部支撑区高度 64 像素）
        // bottom 64（底部支撑区高度 64 像素）
    }
}

// 添加如下行，可在启动时运行进程。
// 注意：以会话方式运行 niri 时支持 xdg-desktop-autostart，
// 这种方式可能更便于使用。
// 查看下方的 binds 部分，获取更多 spawn 示例。

// 此行启动 waybar，这是 Wayland 合成器常用的状态栏工具。

// spawn-at-startup "waybar"
spawn-at-startup "qs" "-c" "noctalia-shell"
spawn-at-startup "fcitx5"
spawn-at-startup "udiskie"
spawn-at-startup "niri-switch-daemon"
spawn-at-startup "foot" "--server"
// spawn-at-startup "/home/tantao/.config/niri/scripts/random-wallpaper.sh"



// 若要运行 shell 命令（包含变量、管道等），请使用 spawn-sh-at-startup：
// spawn-sh-at-startup "qs -c ~/source/qs/MyAwesomeShell"

hotkey-overlay {
    // 取消注释此行，可禁用启动时弹出的“重要快捷键”窗口。
    skip-at-startup
}

// 取消注释此行，可请求客户端在可能的情况下省略其客户端装饰（CSD）。
// 若客户端明确要求使用 CSD，将尊重其请求。
// 此外，客户端会收到“已平铺”通知，从而移除部分客户端圆角。
// 此选项还可修复部分半透明窗口后方绘制边框/焦点环的问题。
// 启用或禁用此选项后，需重启应用才能生效。
// prefer-no-csd

// 可更改截图保存路径。
// 开头的 ~ 符号将扩展为用户主目录。
// 路径使用 strftime(3) 格式化，包含截图的日期和时间。
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// 也可将此值设为 null，禁用截图保存到磁盘的功能。
// screenshot-path null

// 动画设置。
// 维基百科解释了如何配置各个动画：
// https://yalter.github.io/niri/Configuration:-Animations
animations {
    // 取消注释以关闭所有动画。
    // off

    // 按此系数减慢所有动画速度，小于 1 的值会加快动画速度。
    slowdown 1.5
}

// 窗口规则可调整单个窗口的行为。
// 在维基百科上查看更多信息：
// https://yalter.github.io/niri/Configuration:-Window-Rules

// 解决 WezTerm 的初始配置 bug，
// 方法是设置空的 default-column-width。
window-rule {
    // 此正则表达式特意设置为高度特定，
    // 因为这是默认配置，需避免误匹配。
    // 若需要，仅使用 app-id="wezterm" 即可。
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

window-rule {
    match app-id=r#"foot*$"#
    open-floating true
}

window-rule {
    match app-id=r#"footclient*$"#
    open-floating true
}
// 默认将 Firefox 画中画播放器设为浮动窗口。
window-rule {
    // 此 app-id 正则表达式对以下两种情况均生效：
    // - 本地 Firefox（app-id 为 "firefox"）
    // - Flatpak 版 Firefox（app-id 为 "org.mozilla.firefox"）
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

// 示例：阻止两个密码管理器被屏幕捕获。
// （此示例规则前有 "/-" 符号，处于注释状态。）
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // 若希望密码管理器在第三方截图工具中可见，可使用以下设置。
    // block-out-from "screencast"
}

// 示例：为所有窗口启用圆角。
// （此示例规则前有 "/-" 符号，处于注释状态。）
window-rule {
    geometry-corner-radius 20
    clip-to-geometry true
}
layer-rule {
    match namespace="^quickshell-overview$"
    place-within-backdrop true
}

debug {
    honor-xdg-activation-with-invalid-serial
}

binds {

    // 自定义命令
    Mod+M { spawn "/home/tantao/.config/niri/scripts/openNcmpcpp.sh";}
    Mod+P { spawn "/home/tantao/.config/niri/scripts/random-wallpaper.sh";}
    Mod+B { spawn "firefox";}
    Mod+S { spawn "localsend";}
    Mod+E { spawn "alacritty" "-e" "yazi";}
    Mod+N { spawn "footclient" "-e" "btop";}
    Alt+Tab { spawn "niri-switch"; }
    Mod+Tab { spawn "niri-switch" "--previous"; }
    // 按键由多个修饰键（用 + 连接）和末尾的 XKB 键名组成。
    // 若要查找特定按键的 XKB 名称，可使用 wev 等工具。
    //
    // "Mod" 是特殊修饰键，在 TTY 中运行时等同于 Super 键，
    // 在 winit 窗口中运行时等同于 Alt 键。
    //
    // 可在此绑定的大多数操作，也可通过 `niri msg action do-something` 命令以编程方式调用。

    // Mod-Shift-/(斜杠)，通常与 Mod-?（问号）相同，
    // 用于显示重要快捷键列表。
    Mod+Shift+Slash { show-hotkey-overlay; }

    // 运行程序的建议绑定：终端、应用启动器、屏幕锁定工具。
    Mod+Return hotkey-overlay-title="打开终端：alacritty" { spawn "alacritty"; }
    Mod+Shift+Return hotkey-overlay-title="打开终端：foot" { spawn "/home/tantao/.config/niri/scripts/resize_footclient.sh"; }
    Mod+Space hotkey-overlay-title="运行应用：fuzzel" { spawn "fuzzel"; }
    Mod+T {spawn "qs" "-c" "noctalia-shell" "ipc" "call" "lockScreen" "toggle";}

    // 若要运行 shell 命令（需管道、多命令等），请使用 spawn-sh。
    // 注意：整个命令作为单个参数传入，直接传递给 `sh -c` 执行。
    // 示例：以下是切换屏幕阅读器（orca）的标准绑定。
    Super+Alt+S allow-when-locked=true hotkey-overlay-title=null { spawn-sh "pkill orca || exec orca"; }

    // PipeWire 和 WirePlumber 的音量按键映射示例。
    // allow-when-locked=true 属性使这些按键在会话锁定时仍可工作。
    // 使用 spawn-sh 可在命令后传递多个参数。
    XF86AudioRaiseVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02-"; }
    XF86AudioMute        allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"; }

    // brightnessctl 的亮度按键映射示例。
    // 也可使用常规 spawn 传递多个参数（避免通过 "sh" 执行），
    // 但需手动将每个参数放在单独的 "" 引号中。
    XF86MonBrightnessUp allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "+10%"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "10%-"; }

    // 打开/关闭概览：工作区和窗口的缩小视图。
    // 也可将鼠标移入左上角热角，
    // 或在触控板上用四指向上滑动打开概览。
    Mod+O repeat=false { toggle-overview; }

    Mod+Q repeat=false { close-window; }

    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }
    Mod+Ctrl+H     { move-column-left; }
    Mod+Ctrl+J     { move-window-down; }
    Mod+Ctrl+K     { move-window-up; }
    Mod+Ctrl+L     { move-column-right; }

    // 备选命令：当聚焦到列的第一个或最后一个窗口时，跨工作区移动。
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Shift+Left  { focus-monitor-left; }
    Mod+Shift+Down  { focus-monitor-down; }
    Mod+Shift+Up    { focus-monitor-up; }
    Mod+Shift+Right { focus-monitor-right; }
    Mod+Shift+H     { focus-monitor-left; }
    Mod+Shift+J     { focus-monitor-down; }
    Mod+Shift+K     { focus-monitor-up; }
    Mod+Shift+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // 备选：也可使用仅移动单个窗口的命令：
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // 还可将整个工作区移动到另一个显示器：
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+U              { focus-workspace-down; }
    Mod+I              { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    Mod+Ctrl+I         { move-column-to-workspace-up; }

    // 备选：也可使用仅移动单个窗口的命令：
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+U         { move-workspace-down; }
    Mod+Shift+I         { move-workspace-up; }

    // 可使用以下语法绑定鼠标滚轮滚动事件。
    // 这些绑定的方向会根据 natural-scroll 设置变化。
    //
    // 为避免快速滚动切换工作区，可使用
    // cooldown-ms 属性，绑定将被限制为该时间间隔内触发一次。
    // 可对任意绑定设置冷却时间，但此功能在滚轮绑定中最实用。
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // 通常在应用中按住 Shift 滚动，会触发水平滚动；以下绑定模拟此行为。
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // 类似地，可绑定触控板滚动“刻度”。
    // 触控板滚动是连续的，因此这些绑定会拆分为离散的间隔触发。
    // 这些绑定也受触控板 natural-scroll 设置影响，
    // 因此示例绑定为“反向”（因默认启用触控板自然滚动）。
    // Mod+TouchpadScrollDown { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02+"; }
    // Mod+TouchpadScrollUp   { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02-"; }

    // 可通过索引引用工作区。但需注意，
    // niri 是动态工作区系统，因此这些命令属于“尽力而为”类型。
    // 若引用的工作区索引大于当前工作区总数，将指向最下方的（空）工作区。
    //
    // 例如，若有 2 个工作区 + 1 个空工作区，索引 3、4、5 等
    // 将均指向第 3 个工作区。
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // 备选：也可使用仅移动单个窗口的命令：
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // 在当前窗口和上一个窗口之间切换焦点。
    //Alt+Tab { focus-window-previous; }
    // 在当前工作区和上一个工作区之间切换焦点。
    //Mod+Tab { focus-workspace-previous; }

    // 以下绑定用于将聚焦窗口移入或移出列。
    // 若窗口单独存在，将被合并到侧边附近的列中。
    // 若窗口已在列中，将被移出列。
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // 将右侧的一个窗口合并到聚焦列的下方。
    Mod+Comma  { consume-window-into-column; }
    // 将聚焦列下方的窗口移出到右侧。
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    // 也可反向循环切换预设宽度。
    // Mod+R { switch-preset-column-width-back; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }

    // 将聚焦列扩展到其他完全可见列未占用的空间。
    // 使该列“填充剩余空间”。
    Mod+Ctrl+F { expand-column-to-available-width; }

    Mod+C { center-column; }

    // 将所有完全可见的列在屏幕上居中。
    Mod+Ctrl+C { center-visible-columns; }

    // 更精细的宽度调整。
    // 此命令还支持：
    // * 以像素设置宽度："1000"
    // * 以像素调整宽度："-5"（减少5像素）或 "+5"（增加5像素）
    // * 以屏幕宽度百分比设置宽度："25%"
    // * 以屏幕宽度百分比调整宽度："-10%"（减少10%）或 "+10%"（增加10%）
    // 像素尺寸以逻辑像素（即缩放后像素）为单位。例如，在缩放比例 2.0 的输出设备上，
    // set-column-width "100" 会使列占用 200 个物理屏幕像素。
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // 当窗口在列中与其他窗口共存时，更精细的高度调整。
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // 在浮动布局和平铺布局之间切换聚焦窗口。
    Mod+V       { toggle-window-floating; }
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }

    // 切换列的标签式显示模式。
    // 此模式下，列中的窗口将以垂直标签形式显示，
    // 而非上下堆叠。
    Mod+W { toggle-column-tabbed-display; }

    // 切换布局的操作。
    // 注意：若取消注释以下内容，请确保
    // 未在上方的 xkb 选项中配置相同的布局切换快捷键。
    // 若同一快捷键同时配置两处，会导致切换失效，
    // 因为按下快捷键时会触发两次切换（一次来自 xkb，一次来自 niri）。
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Mod+A { spawn "foamshot" "-p" "/home/tantao/Pictures/Screenshots/Screenshot" "-n" "%Y-%m-%d %H-%M-%S.png"; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // 远程桌面客户端和软件 KVM 切换器等应用，
    // 可能会请求 niri 停止处理此处定义的键盘快捷键，
    // 以便例如将按键直接转发到远程机器。
    // 建议绑定一个紧急切换键来切换抑制器状态，
    // 避免有问题的应用占用会话导致无法操作。
    //
    // allow-inhibiting=false 属性也可应用于其他绑定，
    // 确保即使抑制器激活，niri 仍会处理这些绑定。
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // quit 操作会显示确认对话框，防止意外退出。
    Mod+Shift+E { quit; }
    Ctrl+Alt+Delete { quit; }

    // 关闭显示器电源。若要重新开启，执行任意输入操作即可，
    // 例如移动鼠标或按下其他任意键。
    Mod+Shift+P { power-off-monitors; }
}

