{
  "dist-tags": {
    "latest": "2.5.1"
  },
  "versions": {
    "2.5.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.5.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "2.4.0",
        "com.unity.nuget.mono-cecil": "1.11.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.5/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "60f197570e52b734f92255529829e8708961d5f0",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.5.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n- Added a warning when `NetworkManager.NetworkConfig.ConnectionApproval` is set in a distributed authority context. (#3658)\n\n### Fixed\n\n- Fixed issue where a client, under above average latency and packet loss conditions, could receive multiple NetworkTransform state updates in one frame and when processing the state updates only the last state update would be applied to the transform if interpolation was disabled. (#3614)"
      }
    },
    "1.14.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.14.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "1.4.0",
        "com.unity.nuget.mono-cecil": "1.10.1"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.14/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "9e18ac3e8a237cc0c5fd19c444c77d1afb5a93da",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.14.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n\n- Fixed issue with unnecessary internal GC Allocations when using the `IReadOnlyList`  `NetworkManager.ConnectedClientsIds` within a `foreach` statement by either replacing with a `for` loop or directly referencing the `NetworkConnectionManager.ConnectedClientIds`. (#3601)\n- Fixed issue with allocation to the heap in NetworkBehaviourUpdate when there is nothing to be updated. (#3568)\n- Fixed issue where NetworkConfig.ConnectionData could cause the ConnectionRequestMessage to exceed the transport's MTU size and would result in a buffer overflow error. (#3565)"
      }
    },
    "2.5.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.5.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "2.4.0",
        "com.unity.nuget.mono-cecil": "1.11.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.5/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "851f28323821c8957873d692dc8472eae30dc8fc",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.5.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n- Added `AsNativeArray()` readâ€‘only accessor to `NetworkList<T>` (#3567)\n- Added serializer for `Pose` (#3546)\n- Added `AttachableBehaviour` helper component to provide an alternate approach to parenting items without using the `NetworkObject` parenting. (#3518)\n- Added `AttachableNode` helper component that is used by `AttachableBehaviour` as the target node for parenting. (#3518)\n- Added `ComponentController` helper component that can be used to synchronize the enabling and disabling of components and can be used in conjunction with `AttachableBehaviour`. (#3518)\n- Added `NetworkBehaviour.OnNetworkPreDespawn` that is invoked before running through the despawn sequence for the `NetworkObject` and all NetworkBehaviour children of the `NetworkObject` being despawned. (#3518)\n- Added methods `GetDefaultNetworkSettings` and `GetDefaultPipelineConfigurations` to `UnityTransport`. These can be used to retrieve the default settings and pipeline stages that are used by `UnityTransport`. This is useful when providing a custom driver constructor through `UnityTransport.s_DriverConstructor`, since it allows reusing or tuning the existing configuration instead of trying to recreate it. This means a transport with a custom driver can now easily benefit from most of the features of `UnityTransport`, like integration with the Network Simulator and Network Profiler from the multiplayer tools package. (#3501)\n- Added mappings between `ClientId` and `TransportId`. (#3516)\n- Added `NetworkPrefabInstanceHandlerWithData<T>`, a variant of `INetworkPrefabInstanceHandler` that provides access to custom instantiation data directly within the `Instantiate()` method. (#3497)\n\n### Fixed\n\n- Removed allocation to the heap in NetworkBehaviourUpdate. (#3573)\n- Fixed issue where NetworkConfig.ConnectionData could cause the ConnectionRequestMessage to exceed the transport's MTU size and would result in a buffer overflow error. (#3564)\n- Fixed regression issue in v2.x where `NetworkObject.GetNetworkBehaviourAtOrderIndex` was converted from public to internal. (#3541)\n- Fixed ensuring OnValueChanged callback is still triggered on the authority when a collection changes and then reverts to the previous value in the same frame. (#3539)\n- Fixed synchronizing the destroyGameObject parameter to clients for InScenePlaced network objects. (#3514)\n- Fixed distributed authority related issue where enabling the `NetworkObject.DestroyWithScene` would cause errors when a destroying non-authority instances due to loading (single mode) or unloading scene events. (#3500)\n- Fixed an issue where `UnityTransport` would not accept single words as valid hostnames (notably \"localhost\"). (#3591)\n- Fixed issue where viewing a `NetworkBehaviour` with one or more `NetworkVariable` fields could throw an exception if running a distributed authority network topology with a local (DAHost) host and viewed on the host when the host is not the authority of the associated `NetworkObject`. (#3578)\n- Fixed issue when using a distributed authority network topology and  viewing a `NetworkBehaviour` with one or more `NetworkVariable` fields in the inspector view would not show editable fields. (#3578)\n- Fixed issue with unnecessary internal GC Allocations when using the `IReadOnlyList`  `NetworkManager.ConnectedClientsIds` within a `foreach` statement by either replacing with a `for` loop or directly referencing the `NetworkConnectionManager.ConnectedClientIds`. (#3527)\n\n### Changed\n\n- Marked `UnityTransport.ConnectionAddressData.ServerEndPoint` as obsolete. It can't work when using hostnames as the server address, and its functionality can easily be replicated using `NetworkEndpoint.Parse`. (#3591)\n- Optimized `NetworkList<T>` indexer setter to skip operations when the new value equals the existing value, improving performance by avoiding unnecessary list events and network synchronization. (#3587)"
      }
    },
    "1.14.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.14.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "1.4.0",
        "com.unity.nuget.mono-cecil": "1.10.1"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.14/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "425229b32deadcda38c0956cade1207880881a30",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.14.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n- Added serializer for `Pose` (#3540)\n- Added mappings between `ClientId` and `TransportId`. (#3515)\n- Added `SinglePlayerTransport` that provides the ability to start as a host for a single player network session. (#3475)\n- When using UnityTransport >=2.4 and Unity >= 6000.1.0a1, SetConnectionData will accept a fully qualified hostname instead of an IP as a connect address on the client side. (#3440)\n\n### Fixed\n\n- Fixed `NullReferenceException` on `NetworkList` when used without a NetworkManager in scene. (#3502)\n- Fixed inconsistencies in the `OnSceneEvent` callback. (#3487)\n- Fixed issue where `NetworkClient` could persist some settings if re-using the same `NetworkManager` instance. (#3494)\n- Fixed issue where a pooled `NetworkObject` was not resetting the internal latest parent property when despawned. (#3494)\n- Fixed issue where the initial client synchronization pre-serialization process was not excluding spawned `NetworkObjects` that already had pending visibility for the client being synchronized. (#3493)\n- Fixed issue where invoking `NetworkObject.NetworkShow` and `NetworkObject.ChangeOwnership` consecutively within the same call stack location could result in an unnecessary change in ownership error message generated on the target client side. (#3493)\n- Fixed issue where `NetworkVariable`s on a `NetworkBehaviour` could fail to synchronize changes if one has `NetworkVariableUpdateTraits` set and is dirty but is not ready to send. (#3465)\n- Fixed issue where when a client changes ownership via RPC the `NetworkBehaviour.OnOwnershipChanged` can result in identical previous and current owner identifiers. (#3434)\n\n### Changed"
      }
    },
    "1.13.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.13.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "1.4.0",
        "com.unity.nuget.mono-cecil": "1.10.1"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.13/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "427aae63fd3c907eb1400a1e227ecbbb0e06777f",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.13.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n- Added documentation to package repository."
      }
    },
    "2.4.4": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.4.4",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "2.4.0",
        "com.unity.nuget.mono-cecil": "1.11.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.4/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "837011a5fcd593d349aa40ce12ef99be3d62b3e1",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.4.4.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n- Added documentation to package repository."
      }
    },
    "2.4.3": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.4.3",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "2.4.0",
        "com.unity.nuget.mono-cecil": "1.11.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.4/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "c694fb5041d40a8215c96577c9178792d9503cfe",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.4.3.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n\n- Fixed issue where spawned objects with `NetworkObject.DontDestroyWithOwner` set to `false` would not be destroyed when using a client-server network topology. (#3522)"
      }
    },
    "2.4.2": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.4.2",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "2.4.0",
        "com.unity.nuget.mono-cecil": "1.11.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.4/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "4b084d75a42e699c43c5b07df88772fcc4be4bb2",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.4.2.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n\n- Fixed `NullReferenceException` on `NetworkList` when used without a NetworkManager in scene. (#3503)\n- Fixed issue where `NetworkClient` could persist some settings if re-using the same `NetworkManager` instance. (#3491)\n- Fixed issue where a pooled `NetworkObject` was not resetting the internal latest parent property when despawned. (#3491)\n- Fixed issue where the initial client synchronization pre-serialization process was not excluding spawned `NetworkObject` instances that already had pending visibility for the client being synchronized. (#3488)\n- Fixed issue where there was a potential for a small memory leak in the `ConnectionApprovedMessage`. (#3486)"
      }
    },
    "2.4.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.4.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "2.4.0",
        "com.unity.nuget.mono-cecil": "1.11.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.4/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "d849590280049df34d29f3390fd618883bd8c4e3",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.4.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n- Added: Full XML API documentation coverage primarily focused around the test helpers API. (#3444)\n\n### Changed\n\n- Changed: Assembly names while keeping the same namespaces. If your project is using the `Unity.Netcode.TestHelpers.Runtime` assembly then you need to switch `asmdef` references to `Unity.Netcode.Runtime.Tests`. (#3444)\n- Changed: Migrated multiplayer metrics tests to Multiplayer Tools repository and removed the multiplayer tools test project. (#3444)"
      }
    },
    "2.4.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.4.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "2.4.0",
        "com.unity.nuget.mono-cecil": "1.11.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.4/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "9684ced5879f5f13233a8c3cfeef9a87555d0cff",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.4.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n- Added `SinglePlayerTransport` that provides the ability to start as a host for a single player network session. (#3473)\n- When using UnityTransport >=2.4 and Unity >= 6000.1.0a1, SetConnectionData will accept a fully qualified hostname instead of an IP as a connect address on the client side. (#3441)\n\n### Fixed\n\n- Fixed issue where the `NetworkObject.DontDestroyWithOwner` was not being honored. (#3477)\n- Fixed issue where non-authority `NetworkTransform` instances would not allow non-synchronized axis values to be updated locally. (#3471)\n- Fixed issue where invoking `NetworkObject.NetworkShow` and `NetworkObject.ChangeOwnership` consecutively within the same call stack location could result in an unnecessary change in ownership error message generated on the target client side. (#3468)\n- Fixed issue where `NetworkVariable`s on a `NetworkBehaviour` could fail to synchronize changes if one has `NetworkVariableUpdateTraits` set and is dirty but is not ready to send. (#3466)\n- Fixed issue with the Distributed Authority connection sequence with scene management enabled where the `ClientConnected` event was fired before the client was synchronized. (#3459)\n- Fixed inconsistencies in the `OnSceneEvent` callback. (#3458)\n- Fixed issues with the `NetworkBehaviour` and `NetworkVariable` length safety checks. (#3405)\n- Fixed memory leaks when domain reload is disabled. (#3427)\n- Fixed issue where disabling the physics or physics2D package modules could result in a compilation error. (#3422)\n- Fixed an exception being thrown when unregistering a custom message handler from within the registered callback. (#3417)\n\n### Changed"
      }
    },
    "1.13.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.13.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "1.4.0",
        "com.unity.nuget.mono-cecil": "1.10.1"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.13/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "23029c43aad2dc3213224e4eaa2056eb00749214",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.13.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n- Added `NetworkManager.OnPreShutdown` which is called before the NetworkManager cleans up and shuts down. (#3358)\n- Added `FastBufferReader(ArraySegment<byte> buffer, Allocator copyAllocator)` constructor that uses the `ArraySegment.Offset` as the `FastBufferReader` offset and the `ArraySegment.Count` as the `FastBufferReader` length. (#3320)\n- Added `FastBufferReader(ArraySegment<byte> buffer, Allocator copyAllocator, int length = -1)` constructor that uses the `ArraySegment.Offset` as the `FastBufferReader` offset. (#3320)\n\n### Fixed\n\n- Fixed memory leaks when domain reload is disabled. (#3428)\n- Fixed issues with the `NetworkBehaviour` and `NetworkVariable` length safety checks. (#3415)\n- Fixed issue where during a `NetworkObject`'s spawn if you instantiated, spawned, and parented another network prefab under the currently spawning `NetworkObject` the parenting message would not properly defer until the parent `NetworkObject` was spawned. (#3403)\n- Fixed issue where in-scene placed `NetworkObjects` could fail to synchronize its transform properly (especially without a `NetworkTransform`) if their parenting changes from the default when the scene is loaded and if the same scene remains loaded between network sessions while the parenting is completely different from the original hierarchy. (#3388)\n- Fixed an issue in `UnityTransport` where the transport would accept sends on invalid connections, leading to a useless memory allocation and confusing error message. (#3383)\n- Fixed issue where `NetworkAnimator` would log an error if there was no destination transition information. (#3384)\n- Fixed initial `NetworkTransform` spawn, ensure it uses world space. (#3361)\n- Fixed issue where `AnticipatedNetworkVariable` previous value returned by `AnticipatedNetworkVariable.OnAuthoritativeValueChanged` is updated correctly on the non-authoritative side. (#3322)\n\n### Changed\n\n- Changed the scene loading event serialization order for in-scene placed `NetworkObject`s to be based on their parent-child hierarchy. (#3388)"
      }
    },
    "2.3.2": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.3.2",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "2.4.0",
        "com.unity.nuget.mono-cecil": "1.11.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.3/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "91cf39ffcce4c90d941ea51bc7f35df7fed10930",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.3.2.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n\n- Fixed issue where the authority instance of NetworkTransform could check for state updates more than one time in a frame if the frame rate is greater than the tick frequency. (#3413)\n- Fixed issue where the new interpolator types were blocking after the first consumption of a sequence of buffered state updates. (#3413)\n- Fixed issue where root level in-scene placed `NetworkObject`s would only allow the ownership permission to be no less than distributable or sessionowner. (#3407)"
      }
    },
    "2.3.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.3.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "2.4.0",
        "com.unity.nuget.mono-cecil": "1.11.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.3/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "d8bc8d81f1fac3f67700647caba94661bc567b80",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.3.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n\n- Fixed issue where during a `NetworkObject`'s spawn if you instantiated, spawned, and parented another network prefab under the currently spawning `NetworkObject` the parenting message would not properly defer until the parent `NetworkObject` was spawned. (#3401)"
      }
    },
    "2.3.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.3.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "2.4.0",
        "com.unity.nuget.mono-cecil": "1.11.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.3/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "630e7e2ae1c2cff6946392b7053e30667c8aeee2",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.3.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n- Added `NetworkManager.OnPreShutdown` which is called before the NetworkManager cleans up and shuts down. (#3366)\n- Added `Lerp` interpolation type that still uses a lerp approach but uses the new buffer consumption logic. (#3355)\n- Added property to enable or disable lerp smoothing for position, rotation, and scale interpolators. (#3355)\n- Added `NetworkTransform.InterpolationBufferTickOffset` static property to provide users with a way to increase or decrease the time marker where interpolators will pull state update from the queue. (#3355)\n- Added interpolator types as an inspector view selection for position, rotation, and scale. (#3337)\n- Added a new smooth dampening interpolator type that provides a nice balance between precision and smoothing results. (#3337)\n- Added `NetworkTimeSystem.TickLatency` property that provides the average latency of a client. (#3337)\n- Added `FastBufferReader(ArraySegment<byte> buffer, Allocator copyAllocator)` constructor that uses the `ArraySegment.Offset` as the `FastBufferReader` offset and the `ArraySegment.Count` as the `FastBufferReader` length. (#3321)\n- Added `FastBufferReader(ArraySegment<byte> buffer, Allocator copyAllocator, int length = -1)` constructor that uses the `ArraySegment.Offset` as the `FastBufferReader` offset. (#3321)\n\n### Fixed\n\n- Fixed issue where in-scene placed `NetworkObjects` could fail to synchronize its transform properly (especially without a `NetworkTransform`) if their parenting changes from the default when the scene is loaded and if the same scene remains loaded between network sessions while the parenting is completely different from the original hierarchy. (#3387)\n- Fixed an issue in `UnityTransport` where the transport would accept sends on invalid connections, leading to a useless memory allocation and confusing error message. (#3382)\n- Fixed issue where the time delta that interpolators used would not be properly updated during multiple fixed update invocations within the same player loop frame. (#3355)\n- Fixed issue when using a distributed authority network topology and many clients attempt to connect simultaneously the session owner could max-out the maximum in-flight reliable messages allowed, start dropping packets, and some of the connecting clients would fail to fully synchronize. (#3350)\n- Fixed issue when using a distributed authority network topology and scene management was disabled clients would not be able to spawn any new network prefab instances until synchronization was complete. (#3350)\n- Fixed issue where an owner that changes ownership, when using a distributed authority network topology, could yield identical previous and current owner identifiers. This could also cause `NetworkTransform` to fail to change ownership which would leave the previous owner still subscribed to network tick events. (#3347)\n- Fixed issue where the `MaximumInterpolationTime` could not be modified from within the inspector view or runtime. (#3337)\n- Fixed `ChangeOwnership` changing ownership to clients that are not observers. This also happened with automated object distribution. (#3323)\n- Fixed issue where `AnticipatedNetworkVariable` previous value returned by `AnticipatedNetworkVariable.OnAuthoritativeValueChanged` is updated correctly on the non-authoritative side. (#3306)\n- Fixed `OnClientConnectedCallback` passing incorrect `clientId` when scene management is disabled. (#3312)\n- Fixed issue where the `NetworkObject.Ownership` custom editor did not take the default \"Everything\" flag into consideration. (#3305)\n- Fixed DestroyObject flow on non-authority game clients. (#3291)\n- Fixed exception being thrown when a `GameObject` with an associated `NetworkTransform` is disabled. (#3243)\n- Fixed issue where the scene migration synchronization table was not cleaned up if the `GameObject` of a `NetworkObject` is destroyed before it should have been. (#3230)\n- Fixed issue where the scene migration synchronization table was not cleaned up upon `NetworkManager` shutting down. (#3230)\n- Fixed `NetworkObject.DeferDespawn` to respect the `Destroy"
      }
    },
    "1.12.2": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.12.2",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "1.4.0",
        "com.unity.nuget.mono-cecil": "1.10.1"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.12/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "6909b15b3dcb200e4f1cdb4e28562236a82915d1",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.12.2.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n\n- Fixed issue where a spawned `NetworkObject` that was registered with a prefab handler and owned by a client would invoke destroy more than once on the host-server side if the client disconnected while the `NetworkObject` was still spawned. (#3202)\n- Fixed issue where `NetworkRigidBody2D` was still using the deprecated `isKinematic` property in Unity versions 2022.3 and newer. (#3199)\n- Fixed issue where an exception was thrown when calling `NetworkManager.Shutdown` after calling `UnityTransport.Shutdown`. (#3118)"
      }
    },
    "1.12.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.12.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "1.4.0",
        "com.unity.nuget.mono-cecil": "1.10.1"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.12/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "fb5386c8e851c6c818109933bfd46653f3027aad",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.12.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n\n- Fixed issue where a spawned `NetworkObject` that was registered with a prefab handler and owned by a client would invoke destroy more than once on the host-server side if the client disconnected while the `NetworkObject` was still spawned. (#3202)\n- Fixed issue where `NetworkRigidBody2D` was still using the deprecated `isKinematic` property in Unity versions 2022.3 and newer. (#3199)\n- Fixed issue where an exception was thrown when calling `NetworkManager.Shutdown` after calling `UnityTransport.Shutdown`. (#3118)"
      }
    },
    "1.12.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.12.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "1.4.0",
        "com.unity.nuget.mono-cecil": "1.10.1"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.12/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "61beb9aa59470db69ca2c83a38a7d5d63e0b21b6",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.12.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n- Added `UnityTransport.GetEndpoint` method to provide a way to obtain `NetworkEndpoint` information of a connection via client identifier. (#3131)\n- Added a static `NetworkManager.OnInstantiated` event notification to be able to track when a new `NetworkManager` instance has been instantiated. (#3089)\n- Added a static `NetworkManager.OnDestroying` event notification to be able to track when an existing `NetworkManager` instance is being destroyed. (#3089)\n- Added message size validation to named and unnamed message sending functions for better error messages. (#3043)\n- Added \"Check for NetworkObject Component\" property to the Multiplayer->Netcode for GameObjects project settings. When disabled, this will bypass the in-editor `NetworkObject` check on `NetworkBehaviour` components. (#3034)\n\n### Fixed\n\n- Fixed issue where `NetworkList` properties on in-scene placed `NetworkObject`s could cause small memory leaks when entering playmode. (#3148)\n- Fixed issue where a newly synchronizing client would be synchronized with the current `NetworkVariable` values always which could cause issues with collections if there were any pending state updates. Now, when initially synchronizing a client, if a `NetworkVariable` has a pending state update it will serialize the previously known value(s) to the synchronizing client so when the pending updates are sent they aren't duplicate values on the newly connected client side. (#3126)\n- Fixed issue where changing ownership would mark every `NetworkVariable` dirty. Now, it will only mark any `NetworkVariable` with owner read permissions as dirty and will send/flush any pending updates to all clients prior to sending the change in ownership message.  (#3126)\n- Fixed issue with `NetworkVariable` collections where transferring ownership to another client would not update the new owner's previous value to the most current value which could cause the last/previous added value to be detected as a change when adding or removing an entry (as long as the entry removed was not the last/previously added value).  (#3126)\n- Fixed issue where a client (or server) with no write permissions for a `NetworkVariable` using a standard .NET collection type could still modify the collection which could cause various issues depending upon the modification and collection type.  (#3126)\n- Fixed issue where `NetworkAnimator` would statically allocate write buffer space for `Animator` parameters that could cause a write error if the number of parameters exceeded the space allocated. (#3124)\n- Fixed issue with the in-scene network prefab instance update menu tool where it was not properly updating scenes when invoked on the root prefab instance. (#3084)\n- Fixed issue where `NetworkAnimator` would send updates to non-observer clients. (#3058)\n- Fixed issue where an exception could occur when receiving a universal RPC for a `NetworkObject` that has been despawned. (#3055)\n- Fixed issue where setting a prefab hash value during connection approval but not having a player prefab assigned could cause an exception when spawning a player. (#3046)\n- Fixed issue where collections v2.2.x was not supported when using UTP v2.2.x within Unity v2022.3. (#3033)\n- Fixed issue where the `NetworkSpawnManager.HandleNetworkObjectShow` could throw an exception if one of the `NetworkObject` components to show was destroyed during the same frame. (#3029)\n- Fixed issue where the `NetworkManagerHelper` was continuing to check for hierarchy changes when in play mode. (#3027)\n\n### Changed\n\n- Changed `NetworkVariableDeltaMessage` so the server now forwards delta state updates (owner write permission based from a client) to other clients immediately as opposed to keeping a `NetworkVariable` or `NetworkList` dirty and processing them at the end of the frame or potentially on the next network tick. (#3126)\n- The Debug Simulator section of the Unity Transport component will now be hidden if Unity Transport 2.0 or later is installed. It was already non-functional in that situation and users should instead use the more featureful [Network Sim"
      }
    },
    "2.2.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.2.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.transport": "2.4.0",
        "com.unity.nuget.mono-cecil": "1.11.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.2/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "f2477a6c90fe227d487326b01afaa677e0fa8f31",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.2.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Bootstrap",
          "description": "A lightweight sample to get started",
          "displayName": "Bootstrap"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n- Added `NetworkObject.OwnershipStatus.SessionOwner` to allow Network Objects to be distributable and only owned by the Session Owner. This flag will override all other `OwnershipStatus` flags. (#3175)\n- Added `UnityTransport.GetEndpoint` method to provide a way to obtain `NetworkEndpoint` information of a connection via client identifier. (#3130)\n- Added `NetworkTransport.OnEarlyUpdate` and `NetworkTransport.OnPostLateUpdate` methods to provide more control over handling transport related events at the start and end of each frame. (#3113)\n\n### Fixed\n\n- Fixed issue where the server, host, or session owner would not populate the in-scene place `NetworkObject` table if the scene was loaded prior to starting the `NetworkManager`. (#3177)\n- Fixed issue where the `NetworkObjectIdHash` value could be incorrect when entering play mode while still in prefab edit mode with pending changes and using MPPM. (#3162)\n- Fixed issue where a sever only `NetworkManager` instance would spawn the actual `NetworkPrefab`'s `GameObject` as opposed to creating an instance of it. (#3160)\n- Fixed issue where only the session owner (as opposed to all clients) would handle spawning prefab overrides properly when using a distributed authority network topology. (#3160)\n- Fixed issue where an exception was thrown when calling `NetworkManager.Shutdown` after calling `UnityTransport.Shutdown`. (#3118)\n- Fixed issue where `NetworkList` properties on in-scene placed `NetworkObject`s could cause small memory leaks when entering playmode. (#3147)\n- Fixed in-scene `NertworkObject` synchronization issue when loading a scene with currently connected clients connected to a session created by a `NetworkManager` started as a server (i.e. not as a host). (#3133)\n- Fixed issue where a `NetworkManager` started as a server would not add itself as an observer to in-scene placed `NetworkObject`s instantiated and spawned by a scene loading event. (#3133)\n- Fixed issue where spawning a player using `NetworkObject.InstantiateAndSpawn` or `NetworkSpawnManager.InstantiateAndSpawn` would not update the `NetworkSpawnManager.PlayerObjects` or assign the newly spawned player to the `NetworkClient.PlayerObject`. (#3122)\n- Fixed issue where queued UnitTransport (NetworkTransport) message batches were being sent on the next frame. They are now sent at the end of the frame during `PostLateUpdate`.  (#3113)\n- Fixed issue where `NotOwnerRpcTarget` or `OwnerRpcTarget` were not using their replacements `NotAuthorityRpcTarget` and `AuthorityRpcTarget` which would invoke a warning. (#3111)\n- Fixed issue where client is removed as an observer from spawned objects when their player instance is despawned. (#3110)\n- Fixed issue where `NetworkAnimator` would statically allocate write buffer space for `Animator` parameters that could cause a write error if the number of parameters exceeded the space allocated. (#3108)\n\n### Changed\n\n- In-scene placed `NetworkObject`s have been made distributable when balancing object distribution after a connection event. (#3175)\n- Optimised `NetworkVariable` and `NetworkTransform` related packets when in Distributed Authority mode.\n- The Debug Simulator section of the Unity Transport component was removed. This section was not functional anymore and users are now recommended to use the more featureful [Network Simulator](https://docs-multiplayer.unity3d.com/tools/current/tools-network-simulator/) tool from the Multiplayer Tools package instead. (#3121)"
      }
    },
    "2.1.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.1.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.11.4",
        "com.unity.transport": "2.3.0"
      },
      "unity": "6000.0",
      "_upm": {
        "changelog": "### Added\n\n- Added ability to edit the `NetworkConfig.AutoSpawnPlayerPrefabClientSide` within the inspector view. (#3097)\n- Added `IContactEventHandlerWithInfo` that derives from `IContactEventHandler` that can be updated per frame to provide `ContactEventHandlerInfo` information to the `RigidbodyContactEventManager` when processing collisions. (#3094)\n  - `ContactEventHandlerInfo.ProvideNonRigidBodyContactEvents`: When set to true, non-`Rigidbody` collisions with the registered `Rigidbody` will generate contact event notifications. (#3094)\n  - `ContactEventHandlerInfo.HasContactEventPriority`: When set to true, the `Rigidbody` will be prioritized as the instance that generates the event if the `Rigidbody` colliding does not have priority. (#3094)\n- Added a static `NetworkManager.OnInstantiated` event notification to be able to track when a new `NetworkManager` instance has been instantiated. (#3088)\n- Added a static `NetworkManager.OnDestroying` event notification to be able to track when an existing `NetworkManager` instance is being destroyed. (#3088)\n\n### Fixed\n\n- Fixed issue where `NetworkPrefabProcessor` would not mark the prefab list as dirty and prevent saving the `DefaultNetworkPrefabs` asset when only imports or only deletes were detected.(#3103)\n- Fixed an issue where nested `NetworkTransform` components in owner authoritative mode cleared their initial settings on the server, causing improper synchronization. (#3099)\n- Fixed issue with service not getting synchronized with in-scene placed `NetworkObject` instances when a session owner starts a `SceneEventType.Load` event. (#3096)\n- Fixed issue with the in-scene network prefab instance update menu tool where it was not properly updating scenes when invoked on the root prefab instance. (#3092)\n- Fixed an issue where newly synchronizing clients would always receive current `NetworkVariable` values, potentially causing issues with collections if there were pending updates. Now, pending state updates serialize previous values to avoid duplicates on new clients. (#3081)\n- Fixed issue where changing ownership would mark every `NetworkVariable` dirty. Now, it will only mark any `NetworkVariable` with owner read permissions as dirty and will send/flush any pending updates to all clients prior to sending the change in ownership message. (#3081)\n- Fixed an issue where transferring ownership of `NetworkVariable` collections didn't update the new ownerâ€™s previous value, causing the last added value to be detected as a change during additions or removals. (#3081)\n- Fixed issue where a client (or server) with no write permissions for a `NetworkVariable` using a standard .NET collection type could still modify the collection which could cause various issues depending upon the modification and collection type. (#3081)\n- Fixed issue where applying the position and/or rotation to the `NetworkManager.ConnectionApprovalResponse` when connection approval and auto-spawn player prefab were enabled would not apply the position and/or rotation when the player prefab was instantiated. (#3078)\n- Fixed issue where `NetworkObject.SpawnWithObservers` was not being honored when spawning the player prefab. (#3077)\n- Fixed issue with the client count not being correct on the host or server side when a client disconnects itself from a session. (#3075)\n\n### Changed\n\n- Changed `NetworkConfig.AutoSpawnPlayerPrefabClientSide` is no longer automatically set when starting `NetworkManager`. (#3097)\n- Updated `NetworkVariableDeltaMessage` so the server now forwards delta state updates from clients immediately, instead of waiting until the end of the frame or the next network tick. (#3081)"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.1/manual/index.html",
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "1c6fb4fcb67826b9c6dff53c56b94e81ef0079cd",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.1.1.tgz"
      }
    },
    "2.0.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.0.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.11.4",
        "com.unity.transport": "2.3.0"
      },
      "unity": "6000.0",
      "_upm": {
        "changelog": "### Added\n\n- Added tooltips for all of the `NetworkObject` component's properties. (#3052)\n- Added message size validation to named and unnamed message sending functions for better error messages. (#3049)\n- Added \"Check for NetworkObject Component\" property to the Multiplayer->Netcode for GameObjects project settings. When disabled, this will bypass the in-editor `NetworkObject` check on `NetworkBehaviour` components. (#3031)\n- Added `NetworkTransform.SwitchTransformSpaceWhenParented` property that, when enabled, will handle the world to local, local to world, and local to local transform space transitions when interpolation is enabled. (#3013)\n- Added `NetworkTransform.TickSyncChildren` that, when enabled, will tick synchronize nested and/or child `NetworkTransform` components to eliminate any potential visual jittering that could occur if the `NetworkTransform` instances get into a state where their state updates are landing on different network ticks. (#3013)\n- Added `NetworkObject.AllowOwnerToParent` property to provide the ability to allow clients to parent owned objects when running in a client-server network topology. (#3013)\n- Added `NetworkObject.SyncOwnerTransformWhenParented` property to provide a way to disable applying the server's transform information in the parenting message on the client owner instance which can be useful for owner authoritative motion models. (#3013)\n- Added `NetcodeEditorBase` editor helper class to provide easier modification and extension of the SDK's components. (#3013)\n\n### Fixed\n\n- Fixed issue where `NetworkAnimator` would send updates to non-observer clients. (#3057)\n- Fixed issue where an exception could occur when receiving a universal RPC for a `NetworkObject` that has been despawned. (#3052)\n- Fixed issue where a NetworkObject hidden from a client that is then promoted to be session owner was not being synchronized with newly joining clients.(#3051)\n- Fixed issue where clients could have a wrong time delta on `NetworkVariableBase` which could prevent from sending delta state updates. (#3045)\n- Fixed issue where setting a prefab hash value during connection approval but not having a player prefab assigned could cause an exception when spawning a player. (#3042)\n- Fixed issue where the `NetworkSpawnManager.HandleNetworkObjectShow` could throw an exception if one of the `NetworkObject` components to show was destroyed during the same frame. (#3030)\n- Fixed issue where the `NetworkManagerHelper` was continuing to check for hierarchy changes when in play mode. (#3026)\n- Fixed issue with newly/late joined clients and `NetworkTransform` synchronization of parented `NetworkObject` instances. (#3013)\n- Fixed issue with smooth transitions between transform spaces when interpolation is enabled (requires `NetworkTransform.SwitchTransformSpaceWhenParented` to be enabled). (#3013)\n\n### Changed\n\n- Changed `NetworkTransformEditor` now uses `NetworkTransform` as the base type class to assure it doesn't display a foldout group when using the base `NetworkTransform` component class. (#3052)\n- Changed `NetworkAnimator.Awake` is now a protected virtual method. (#3052)\n- Changed  when invoking `NetworkManager.ConnectionManager.DisconnectClient` during a distributed authority session a more appropriate message is logged. (#3052)\n- Changed `NetworkTransformEditor` so it now derives from `NetcodeEditorBase`. (#3013)\n- Changed `NetworkRigidbodyBaseEditor` so it now derives from `NetcodeEditorBase`. (#3013)\n- Changed `NetworkManagerEditor` so it now derives from `NetcodeEditorBase`. (#3013)"
      },
      "upmCi": {
        "footprint": "f1ef7566b7a89b1ee9c34cc13400735ae63964d4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "8a7ae9f91a53bdcabe5e7df783dd1884c07bcd6f"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "bd5b7db87b589d1ad43f658b2068879a90edef0e",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.0.0.tgz"
      }
    },
    "2.0.0-pre.4": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.0.0-pre.4",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.11.4",
        "com.unity.transport": "2.3.0"
      },
      "unity": "6000.0",
      "_upm": {
        "changelog": "### Added\n\n- Added `NetworkVariable.CheckDirtyState` that is to be used in tandem with collections in order to detect whether the collection or an item within the collection has changed. (#3004)\n\n### Fixed\n\n- Fixed issue where nested `NetworkTransform` components were not getting updated. (#3016)\n- Fixed issue by adding null checks in `NetworkVariableBase.CanClientRead` and `NetworkVariableBase.CanClientWrite` methods to ensure safe access to `NetworkBehaviour`. (#3012)\n- Fixed issue where `FixedStringSerializer<T>` was using `NetworkVariableSerialization<byte>.AreEqual` to determine if two bytes were equal causes an exception to be thrown due to no byte serializer having been defined. (#3009)\n- Fixed Issue where a state with dual triggers, inbound and outbound, could cause a false layer to layer state transition message to be sent to non-authority `NetworkAnimator` instances and cause a warning message to be logged. (#3008)\n- Fixed issue using collections within `NetworkVariable` where the collection would not detect changes to items or nested items. (#3004)\n- Fixed issue where `List`, `Dictionary`, and `HashSet` collections would not uniquely duplicate nested collections. (#3004)\n- Fixed issue where `NotAuthorityTarget` would include the service observer in the list of targets to send the RPC to as opposed to excluding the service observer as it should. (#3000)\n- Fixed issue where `ProxyRpcTargetGroup` could attempt to send a message if there were no targets to send to. (#3000)\n\n### Changed\n\n- Changed `NetworkAnimator` to automatically switch to owner authoritative mode when using a distributed authority network topology. (#3021)\n- Changed permissions exception thrown in `NetworkList` to exiting early with a logged error that is now a unified permissions message within `NetworkVariableBase`. (#3004)\n- Changed permissions exception thrown in `NetworkVariable.Value` to exiting early with a logged error that is now a unified permissions message within `NetworkVariableBase`. (#3004)"
      },
      "upmCi": {
        "footprint": "48286e9f7b0e053fe7f7b524bafc69a99c2906fc"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "2802dfcd13c3be1ac356191cc87d1559203d2db3"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "46518f75ad620064571631a6a6be0f6407d9115d",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.0.0-pre.4.tgz"
      }
    },
    "1.11.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.11.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.4.0"
      },
      "unity": "2021.3",
      "_upm": {
        "changelog": "### Added\n\n- Added `NetworkVariable.CheckDirtyState` that is to be used in tandem with collections in order to detect whether the collection or an item within the collection has changed. (#3005)\n\n### Fixed\n\n- Fixed issue by adding null checks in `NetworkVariableBase.CanClientRead` and `NetworkVariableBase.CanClientWrite` methods to ensure safe access to `NetworkBehaviour`. (#3011)\n- Fixed issue using collections within `NetworkVariable` where the collection would not detect changes to items or nested items. (#3005)\n- Fixed issue where `List`, `Dictionary`, and `HashSet` collections would not uniquely duplicate nested collections. (#3005)\n- Fixed Issue where a state with dual triggers, inbound and outbound, could cause a false layer to layer state transition message to be sent to non-authority `NetworkAnimator` instances and cause a warning message to be logged. (#2999)\n- Fixed issue where `FixedStringSerializer<T>` was using `NetworkVariableSerialization<byte>.AreEqual` to determine if two bytes were equal causes an exception to be thrown due to no byte serializer having been defined. (#2992)\n\n### Changed\n\n- Changed permissions exception thrown in `NetworkList` to exiting early with a logged error that is now a unified permissions message within `NetworkVariableBase`. (#3005)\n- Changed permissions exception thrown in `NetworkVariable.Value` to exiting early with a logged error that is now a unified permissions message within `NetworkVariableBase`. (#3005)"
      },
      "upmCi": {
        "footprint": "aa624034952045f7f2399c1f99fd31b764234959"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.11/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "e3303ba66b4a642ccf0bc72104107e1b8e1ebe1c"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "0fd5c8e23452ec479b1d44f8a1da0cdc7bd7b4b4",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.11.0.tgz"
      }
    },
    "2.0.0-pre.3": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.0.0-pre.3",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.11.4",
        "com.unity.transport": "2.3.0"
      },
      "unity": "6000.0",
      "_upm": {
        "changelog": "### Added\n- Added: `UnityTransport.GetNetworkDriver` and `UnityTransport.GetLocalEndpoint` methods to expose the driver and local endpoint being used. (#2978)\n\n### Fixed\n\n- Fixed issue where deferred despawn was causing GC allocations when converting an `IEnumerable` to a list. (#2983)\n- Fixed issue where the realtime network stats monitor was not able to display RPC traffic in release builds due to those stats being only available in development builds or the editor. (#2979)\n- Fixed issue where `NetworkManager.ScenesLoaded` was not being updated if `PostSynchronizationSceneUnloading` was set and any loaded scenes not used during synchronization were unloaded. (#2971)\n- Fixed issue where `Rigidbody2d` under Unity 6000.0.11f1 has breaking changes where `velocity` is now `linearVelocity` and `isKinematic` is replaced by `bodyType`. (#2971)\n- Fixed issue where `NetworkSpawnManager.InstantiateAndSpawn` and `NetworkObject.InstantiateAndSpawn` were not honoring the ownerClientId parameter when using a client-server network topology. (#2968)\n- Fixed issue where internal delta serialization could not have a byte serializer defined when serializing deltas for other types. Added `[GenerateSerializationForType(typeof(byte))]` to both the `NetworkVariable` and `AnticipatedNetworkVariable` classes to assure a byte serializer is defined.(#2962)\n- Fixed issue when scene management was disabled and the session owner would still try to synchronize a late joining client. (#2962)\n- Fixed issue when using a distributed authority network topology where it would allow a session owner to spawn a `NetworkObject` prior to being approved. Now, an error message is logged and the `NetworkObject` will not be spawned prior to the client being approved.  (#2962)\n- Fixed issue where attempting to spawn during `NetworkBehaviour.OnInSceneObjectsSpawned` and `NetworkBehaviour.OnNetworkSessionSynchronized` notifications would throw a collection modified exception.  (#2962)\n\n### Changed\n\n- Changed logic where clients can now set the `NetworkSceneManager` client synchronization mode when using a distributed authority network topology. (#2985)"
      },
      "upmCi": {
        "footprint": "fbae2629229fb08020f4b9cef5656e6fdf517c3d"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "8575c902227d221f987d9cb869d501749f8631b4"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "d464764e39c2778030f3145d8295c98ca7b279a6",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.0.0-pre.3.tgz"
      }
    },
    "1.10.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.10.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.4.0"
      },
      "unity": "2021.3",
      "_upm": {
        "changelog": "### Added\n\n- Added `NetworkBehaviour.OnNetworkPreSpawn` and `NetworkBehaviour.OnNetworkPostSpawn` methods that provide the ability to handle pre and post spawning actions during the `NetworkObject` spawn sequence. (#2906)\n- Added a client-side only `NetworkBehaviour.OnNetworkSessionSynchronized` convenience method that is invoked on all `NetworkBehaviour`s after a newly joined client has finished synchronizing with the network session in progress. (#2906)\n- Added `NetworkBehaviour.OnInSceneObjectsSpawned` convenience method that is invoked when all in-scene `NetworkObject`s have been spawned after a scene has been loaded or upon a host or server starting. (#2906)\n\n### Fixed\n\n- Fixed issue where the realtime network stats monitor was not able to display RPC traffic in release builds due to those stats being only available in development builds or the editor. (#2980)\n- Fixed issue where `NetworkManager.ScenesLoaded` was not being updated if `PostSynchronizationSceneUnloading` was set and any loaded scenes not used during synchronization were unloaded.(#2977)\n- Fixed issue where internal delta serialization could not have a byte serializer defined when serializing deltas for other types. Added `[GenerateSerializationForType(typeof(byte))]` to both the `NetworkVariable` and `AnticipatedNetworkVariable` classes to assure a byte serializer is defined. (#2953)\n- Fixed issue with the client count not being correct on the host or server side when a client disconnects itself from a session. (#2941)\n- Fixed issue with the host trying to send itself a message that it has connected when first starting up. (#2941)\n- Fixed issue where in-scene placed NetworkObjects could be destroyed if a client disconnects early and/or before approval. (#2923)\n- Fixed issue where `NetworkDeltaPosition` would \"jitter\" periodically if both unreliable delta state updates and half-floats were used together. (#2922)\n- Fixed issue where `NetworkRigidbody2D` would not properly change body type based on the instance's authority when spawned. (#2916)\n- Fixed issue where a `NetworkObject` component's associated `NetworkBehaviour` components would not be detected if scene loading is disabled in the editor and the currently loaded scene has in-scene placed `NetworkObject`s. (#2906)\n- Fixed issue where an in-scene placed `NetworkObject` with `NetworkTransform` that is also parented under a `GameObject` would not properly synchronize when the parent `GameObject` had a world space position other than 0,0,0. (#2895)\n\n### Changed"
      },
      "upmCi": {
        "footprint": "f100032a819fdef7edacd4fdfa133b189f94ef7d"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.10/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "a342c8ddce87ae46a30dffbebb8f87ac364c0a87"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "ee7bebd1b67cf2a651a3a0865717ecc5ce5b3306",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.10.0.tgz"
      }
    },
    "2.0.0-pre.2": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.0.0-pre.2",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.11.4",
        "com.unity.transport": "2.2.1"
      },
      "unity": "6000.0",
      "_upm": {
        "changelog": "### Added\n\n- Added `AnticipatedNetworkVariable<T>`, which adds support for client anticipation of `NetworkVariable` values, allowing for more responsive gameplay. (#2957)\n- Added `AnticipatedNetworkTransform`, which adds support for client anticipation of NetworkTransforms. (#2957)\n- Added `NetworkVariableBase.ExceedsDirtinessThreshold` to allow network variables to throttle updates by only sending updates when the difference between the current and previous values exceeds a threshold. (This is exposed in `NetworkVariable<T>` with the callback `NetworkVariable<T>.CheckExceedsDirtinessThreshold`). (#2957)\n- Added `NetworkVariableUpdateTraits`, which add additional throttling support: `MinSecondsBetweenUpdates` will prevent the `NetworkVariable` from sending updates more often than the specified time period (even if it exceeds the dirtiness threshold), while `MaxSecondsBetweenUpdates` will force a dirty `NetworkVariable` to send an update after the specified time period even if it has not yet exceeded the dirtiness threshold. (#2957)\n- Added virtual method `NetworkVariableBase.OnInitialize` which can be used by `NetworkVariable` subclasses to add initialization code. (#2957)\n- Added `NetworkTime.TickWithPartial`, which represents the current tick as a double that includes the fractional/partial tick value. (#2957)\n- Added `NetworkTickSystem.AnticipationTick`, which can be helpful with implementation of client anticipation. This value represents the tick the current local client was at at the beginning of the most recent network round trip, which enables it to correlate server update ticks with the client tick that may have triggered them. (#2957)\n- Added event `NetworkManager.OnSessionOwnerPromoted` that is invoked when a new session owner promotion occurs. (#2948)\n- Added `NetworkRigidBodyBase.GetLinearVelocity` and `NetworkRigidBodyBase.SetLinearVelocity` convenience/helper methods. (#2948)\n- Added `NetworkRigidBodyBase.GetAngularVelocity` and `NetworkRigidBodyBase.SetAngularVelocity` convenience/helper methods. (#2948)\n\n### Fixed\n\n- Fixed issue when `NetworkTransform` half float precision is enabled and ownership changes the current base position was not being synchronized. (#2948)\n- Fixed issue where `OnClientConnected` not being invoked on the session owner when connecting to a new distributed authority session. (#2948)\n- Fixed issue where Rigidbody micro-motion (i.e. relatively small velocities) would result in non-authority instances slightly stuttering as the body would come to a rest (i.e. no motion). Now, the threshold value can increase at higher velocities and can decrease slightly below the provided threshold to account for this. (#2948)\n\n### Changed\n\n- Changed `NetworkAnimator` no longer requires the `Animator` component to exist on the same `GameObject`. (#2957)\n- Changed `NetworkObjectReference` and `NetworkBehaviourReference` to allow null references when constructing and serializing. (#2957)\n- Changed the client's owned objects is now returned (`NetworkClient` and `NetworkSpawnManager`) as an array as opposed to a list for performance purposes. (#2948)\n- Changed `NetworkTransfrom.TryCommitTransformToServer` to be internal as it will be removed by the final 2.0.0 release. (#2948)\n- Changed `NetworkTransformEditor.OnEnable` to a virtual method to be able to customize a `NetworkTransform` derived class by creating a derived editor control from `NetworkTransformEditor`. (#2948)"
      },
      "upmCi": {
        "footprint": "dffe7543c19c2670755cc7da27e1d4522c9414a9"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "2ecbd14351cac29ab3a18cc159c0a82513e9d241"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "aba11899db91ff1c9cf172ebeea35ff3ab614dcb",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.0.0-pre.2.tgz"
      }
    },
    "2.0.0-pre.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.0.0-pre.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.11.4",
        "com.unity.transport": "2.2.1"
      },
      "unity": "6000.0",
      "_upm": {
        "changelog": "### Added\n\n- Added event `NetworkManager.OnSessionOwnerPromoted` that is invoked when a new session owner promotion occurs. (#2948)\n- Added `NetworkRigidBodyBase.GetLinearVelocity` and `NetworkRigidBodyBase.SetLinearVelocity` convenience/helper methods. (#2948)\n- Added `NetworkRigidBodyBase.GetAngularVelocity` and `NetworkRigidBodyBase.SetAngularVelocity` convenience/helper methods. (#2948)\n\n### Fixed\n\n- Fixed issue when `NetworkTransform` half float precision is enabled and ownership changes the current base position was not being synchronized. (#2948)\n- Fixed issue where `OnClientConnected` not being invoked on the session owner when connecting to a new distributed authority session. (#2948)\n- Fixed issue where Rigidbody micro-motion (i.e. relatively small velocities) would result in non-authority instances slightly stuttering as the body would come to a rest (i.e. no motion). Now, the threshold value can increase at higher velocities and can decrease slightly below the provided threshold to account for this. (#2948)\n\n### Changed\n\n- Changed the client's owned objects is now returned (`NetworkClient` and `NetworkSpawnManager`) as an array as opposed to a list for performance purposes. (#2948)\n- Changed `NetworkTransfrom.TryCommitTransformToServer` to be internal as it will be removed by the final 2.0.0 release. (#2948)\n- Changed `NetworkTransformEditor.OnEnable` to a virtual method to be able to customize a `NetworkTransform` derived class by creating a derived editor control from `NetworkTransformEditor`. (#2948)"
      },
      "upmCi": {
        "footprint": "18101c69b1634ca6a71617efbaf53473b389e8ec"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "ba4102f8ded1ed3f18c5b0604bd39a846437e9b6"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "21125bbbdecd1de40afea00f15f26fe7c3661947",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.0.0-pre.1.tgz"
      }
    },
    "2.0.0-exp.5": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.0.0-exp.5",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.11.4",
        "com.unity.transport": "2.2.1"
      },
      "unity": "6000.0",
      "_upm": {
        "changelog": "### Fixed\n\n- Fixed issue where SessionOwner message was being treated as a new entry for the new message indexing when it should have been ordinally sorted with the legacy message indices. (#2942)"
      },
      "upmCi": {
        "footprint": "a38ece4dabc6c27e6618262e980d5de89bbda2e8"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "79e8fc8634b961f05fbc3f79e82d57c8f131c715"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "8ac9616b1b511316cca7c3122637514e7a1889ba",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.0.0-exp.5.tgz"
      }
    },
    "2.0.0-exp.4": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.0.0-exp.4",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.11.4",
        "com.unity.transport": "2.2.1"
      },
      "unity": "6000.0",
      "_upm": {
        "changelog": "### Added\n\n- Added `NetworkRigidbodyBase.AttachToFixedJoint` and `NetworkRigidbodyBase.DetachFromFixedJoint` to replace parenting for rigid bodies that have `NetworkRigidbodyBase.UseRigidBodyForMotion` enabled. (#2933)\n- Added `NetworkBehaviour.OnNetworkPreSpawn` and `NetworkBehaviour.OnNetworkPostSpawn` methods that provide the ability to handle pre and post spawning actions during the `NetworkObject` spawn sequence. (#2912)\n- Added a client-side only `NetworkBehaviour.OnNetworkSessionSynchronized` convenience method that is invoked on all `NetworkBehaviour`s after a newly joined client has finished synchronizing with the network session in progress. (#2912)\n- Added `NetworkBehaviour.OnInSceneObjectsSpawned` convenience method that is invoked when all in-scene `NetworkObject`s have been spawned after a scene has been loaded or upon a host or server starting. (#2912)\n\n### Fixed\n\n- Fixed issue where non-authoritative rigid bodies with `NetworkRigidbodyBase.UseRigidBodyForMotion` enabled would constantly log errors about the renderTime being before `StartTimeConsumed`. (#2933)\n- Fixed issue where in-scene placed NetworkObjects could be destroyed if a client disconnects early and/or before approval. (#2924)\n- Fixed issue where a `NetworkObject` component's associated `NetworkBehaviour` components would not be detected if scene loading is disabled in the editor and the currently loaded scene has in-scene placed `NetworkObject`s. (#2912)\n- Fixed issue where an in-scene placed `NetworkObject` with `NetworkTransform` that is also parented under a `GameObject` would not properly synchronize when the parent `GameObject` had a world space position other than 0,0,0. (#2898)\n\n### Changed\n\n- Change all the access modifiers of test class from Public to Internal (#2930)\n- Changed messages are now sorted by enum values as opposed to ordinally sorting the messages by their type name. (#2929)\n- Changed `NetworkClient.SessionModeTypes` to `NetworkClient.NetworkTopologyTypes`. (#2875)\n- Changed `NetworkClient.SessionModeType` to `NetworkClient.NetworkTopologyType`. (#2875)\n- Changed `NetworkConfig.SessionMode` to `NeworkConfig.NetworkTopology`. (#2875)"
      },
      "upmCi": {
        "footprint": "3e5693a7baed1b97a205035203bc4da81af55612"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "f4917e9cb719980bf229a71484d6f5467a2ad4e0"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "458340693d0591750506a9af86af627b23bc685d",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.0.0-exp.4.tgz"
      }
    },
    "1.9.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.9.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.4.0"
      },
      "unity": "2021.3",
      "_upm": {
        "changelog": "### Added\n- Added AnticipatedNetworkVariable<T>, which adds support for client anticipation of NetworkVariable values, allowing for more responsive gameplay (#2820)\n- Added AnticipatedNetworkTransform, which adds support for client anticipation of NetworkTransforms (#2820)\n- Added NetworkVariableBase.ExceedsDirtinessThreshold to allow network variables to throttle updates by only sending updates when the difference between the current and previous values exceeds a threshold. (This is exposed in NetworkVariable<T> with the callback NetworkVariable<T>.CheckExceedsDirtinessThreshold) (#2820)\n- Added NetworkVariableUpdateTraits, which add additional throttling support: MinSecondsBetweenUpdates will prevent the NetworkVariable from sending updates more often than the specified time period (even if it exceeds the dirtiness threshold), while MaxSecondsBetweenUpdates will force a dirty NetworkVariable to send an update after the specified time period even if it has not yet exceeded the dirtiness threshold. (#2820)\n- Added virtual method NetworkVariableBase.OnInitialize() which can be used by NetworkVariable subclasses to add initialization code (#2820)\n- Added virtual method NetworkVariableBase.Update(), which is called once per frame to support behaviors such as interpolation between an anticipated value and an authoritative one. (#2820)\n- Added NetworkTime.TickWithPartial, which represents the current tick as a double that includes the fractional/partial tick value. (#2820)\n- Added NetworkTickSystem.AnticipationTick, which can be helpful with implementation of client anticipation. This value represents the tick the current local client was at at the beginning of the most recent network round trip, which enables it to correlate server update ticks with the client tick that may have triggered them. (#2820)\n- `NetworkVariable` now includes built-in support for `NativeHashSet`, `NativeHashMap`, `List`, `HashSet`, and `Dictionary` (#2813)\n- `NetworkVariable` now includes delta compression for collection values (`NativeList`, `NativeArray`, `NativeHashSet`, `NativeHashMap`, `List`, `HashSet`, `Dictionary`, and `FixedString` types) to save bandwidth by only sending the values that changed. (Note: For `NativeList`, `NativeArray`, and `List`, this algorithm works differently than that used in `NetworkList`. This algorithm will use less bandwidth for \"set\" and \"add\" operations, but `NetworkList` is more bandwidth-efficient if you are performing frequent \"insert\" operations.) (#2813)\n- `UserNetworkVariableSerialization` now has optional callbacks for `WriteDelta` and `ReadDelta`. If both are provided, they will be used for all serialization operations on NetworkVariables of that type except for the first one for each client. If either is missing, the existing `Write` and `Read` will always be used. (#2813)\n- Network variables wrapping `INetworkSerializable` types can perform delta serialization by setting `UserNetworkVariableSerialization<T>.WriteDelta` and `UserNetworkVariableSerialization<T>.ReadDelta` for those types. The built-in `INetworkSerializable` serializer will continue to be used for all other serialization operations, but if those callbacks are set, it will call into them on all but the initial serialization to perform delta serialization. (This could be useful if you have a large struct where most values do not change regularly and you want to send only the fields that did change.) (#2813)\n\n### Fixed\n\n- Fixed issue where NetworkTransformEditor would throw and exception if you excluded the physics package. (#2871)\n- Fixed issue where `NetworkTransform` could not properly synchronize its base position when using half float precision. (#2845)\n- Fixed issue where the host was not invoking `OnClientDisconnectCallback` for its own local client when internally shutting down. (#2822)\n- Fixed issue where NetworkTransform could potentially attempt to \"unregister\" a named message prior to it being registered. (#2807)\n- Fixed issue where in-scene placed `NetworkObject`s with complex nested children `NetworkObject`s (more than one child in depth) would not synchronize properly if WorldPositionStays was set to true. (#2796)\n\n### Changed\n\n- Changed `NetworkObjectReference` and `NetworkBehaviourReference` to allow null references when constructing and serializing. (#2874)\n- Changed `NetworkAnimator` no longer requires the `Animator` component to exist on the same `GameObject`. (#2872)\n- Changed `NetworkTransform` to now use `NetworkTransformMessage` as opposed to named messages for NetworkTransformState updates. (#2810)\n- Changed `CustomMessageManager` so it no longer attempts to register or \"unregister\" a null or empty string and will log an error if this condition occurs. (#2807)"
      },
      "upmCi": {
        "footprint": "0c6c6a0e036a153ff11d0b99241c93ccebfec896"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.9/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "7d27c5141123e3b9f31419ccca7768a640a45d56"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "5f38aa6da4c16ce6d0d538f6f3707ef10aae9775",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.9.1.tgz"
      }
    },
    "2.0.0-exp.2": {
      "name": "com.unity.netcode.gameobjects",
      "version": "2.0.0-exp.2",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.11.4",
        "com.unity.transport": "2.2.1"
      },
      "unity": "6000.0",
      "_upm": {
        "changelog": "### Added\n- Added updates to all internal messages to account for a distributed authority network session connection.  (#2863)\n- Added `NetworkRigidbodyBase` that provides users with a more customizable network rigidbody, handles both `Rigidbody` and `Rigidbody2D`, and provides an option to make `NetworkTransform` use the rigid body for motion.  (#2863)\n  - For a customized `NetworkRigidbodyBase` class:\n    - `NetworkRigidbodyBase.AutoUpdateKinematicState` provides control on whether the kinematic setting will be automatically set or not when ownership changes.\n    - `NetworkRigidbodyBase.AutoSetKinematicOnDespawn` provides control on whether isKinematic will automatically be set to true when the associated `NetworkObject` is despawned.\n    - `NetworkRigidbodyBase.Initialize` is a protected method that, when invoked, will initialize the instance. This includes options to:\n      - Set whether using a `RigidbodyTypes.Rigidbody` or `RigidbodyTypes.Rigidbody2D`.\n      - Includes additional optional parameters to set the `NetworkTransform`, `Rigidbody`, and `Rigidbody2d` to use.\n  - Provides additional public methods:\n    - `NetworkRigidbodyBase.GetPosition` to return the position of the `Rigidbody` or `Rigidbody2d` (depending upon its initialized setting).\n    - `NetworkRigidbodyBase.GetRotation` to return the rotation of the `Rigidbody` or `Rigidbody2d` (depending upon its initialized setting).\n    - `NetworkRigidbodyBase.MovePosition` to move to the position of the `Rigidbody` or `Rigidbody2d` (depending upon its initialized setting).\n    - `NetworkRigidbodyBase.MoveRotation` to move to the rotation of the `Rigidbody` or `Rigidbody2d` (depending upon its initialized setting).\n    - `NetworkRigidbodyBase.Move` to move to the position and rotation of the `Rigidbody` or `Rigidbody2d` (depending upon its initialized setting).\n    - `NetworkRigidbodyBase.Move` to move to the position and rotation of the `Rigidbody` or `Rigidbody2d` (depending upon its initialized setting).\n    - `NetworkRigidbodyBase.SetPosition` to set the position of the `Rigidbody` or `Rigidbody2d` (depending upon its initialized setting).\n    - `NetworkRigidbodyBase.SetRotation` to set the rotation of the `Rigidbody` or `Rigidbody2d` (depending upon its initialized setting).\n    - `NetworkRigidbodyBase.ApplyCurrentTransform` to set the position and rotation of the `Rigidbody` or `Rigidbody2d` based on the associated `GameObject` transform (depending upon its initialized setting).\n    - `NetworkRigidbodyBase.WakeIfSleeping` to wake up the rigid body if sleeping.\n    - `NetworkRigidbodyBase.SleepRigidbody` to put the rigid body to sleep.\n    - `NetworkRigidbodyBase.IsKinematic` to determine if the `Rigidbody` or `Rigidbody2d` (depending upon its initialized setting) is currently kinematic.\n    - `NetworkRigidbodyBase.SetIsKinematic` to set the `Rigidbody` or `Rigidbody2d` (depending upon its initialized setting) current kinematic state.\n    - `NetworkRigidbodyBase.ResetInterpolation` to reset the `Rigidbody` or `Rigidbody2d` (depending upon its initialized setting) back to its original interpolation value when initialized.\n  - Now includes a `MonoBehaviour.FixedUpdate` implementation that will update the assigned `NetworkTransform` when `NetworkRigidbodyBase.UseRigidBodyForMotion` is true. (#2863)\n- Added `RigidbodyContactEventManager` that provides a more optimized way to process collision enter and collision stay events as opposed to the `Monobehaviour` approach. (#2863)\n  - Can be used in client-server and distributed authority modes, but is particularly useful in distributed authority.\n- Added rigid body motion updates to `NetworkTransform` which allows users to set interolation on rigid bodies. (#2863)\n  - Extrapolation is only allowed on authoritative instances, but custom class derived from `NetworkRigidbodyBase` or `NetworkRigidbody` or `NetworkRigidbody2D` automatically switches non-authoritative instances to interpolation if set to extrapolation.\n- Added distributed authority mode support to `NetworkAnimator`. (#2863)\n- Added session mode selection to `NetworkManager` inspector view. (#2863)\n- Added distributed authority permissions feature. (#2863)\n- Added distributed authority mode specific `NetworkObject` permissions flags (Distributable, Transferable, and RequestRequired). (#2863)\n- Added distributed authority mode specific `NetworkObject.SetOwnershipStatus` method that applies one or more `NetworkObject` instance's ownership flags. If updated when spawned, the ownership permission changes are synchronized with the other connected clients. (#2863)\n- Added distributed authority mode specific `NetworkObject.RemoveOwnershipStatus` method that removes one or more `NetworkObject` instance's ownership flags. If updated when spawned, the ownership permission changes are synchronized with the other connected clients. (#2863)\n- Added distributed authority mode specific `NetworkObject.HasOwnershipStatus` method that will return (true or false) whether one or more ownership flags is set. (#2863)\n- Added distributed authority mode specific `NetworkObject.SetOwnershipLock` method that locks ownership of a `NetworkObject` to prevent ownership from changing until the current owner releases the lock. (#2863)\n- Added distributed authority mode specific `NetworkObject.RequestOwnership` method that sends an ownership request to the current owner of a spawned `NetworkObject` instance. (#2863)\n- Added distributed authority mode specific `NetworkObject.OnOwnershipRequested` callback handler that is invoked on the owner/authoritative side when a non-owner requests ownership. Depending upon the boolean returned value depends upon whether the request is approved or denied. (#2863)\n- Added distributed authority mode specific `NetworkObject.OnOwnershipRequestResponse` callback handler that is invoked when a non-owner's request has been processed. This callback includes a `NetworkObjet.OwnershipRequestResponseStatus` response parameter that describes whether the request was approved or the reason why it was not approved. (#2863)\n- Added distributed authority mode specific `NetworkObject.DeferDespawn` method that defers the despawning of `NetworkObject` instances on non-authoritative clients based on the tick offset parameter. (#2863)\n- Added distributed authority mode specific `NetworkObject.OnDeferredDespawnComplete` callback handler that can be used to further control when deferring the despawning of a `NetworkObject` on non-authoritative instances. (#2863)\n- Added `NetworkClient.SessionModeType` as one way to determine the current session mode of the network session a client is connected to. (#2863)\n- Added distributed authority mode specific `NetworkClient.IsSessionOwner` property to determine if the current local client is the current session owner of a distributed authority session. (#2863)\n- Added distributed authority mode specific client side spawning capabilities. When running in distributed authority mode, clients can instantiate and spawn `NetworkObject` instances (the local client is authomatically the owner of the spawned object). (#2863)\n  - This is useful to better visually synchronize owner authoritative motion models and newly spawned `NetworkObject` instances (i.e. projectiles for example).\n- Added distributed authority mode specific client side player spawning capabilities. Clients will automatically spawn their associated player object locally. (#2863)\n- Added distributed authority mode specific `NetworkConfig.AutoSpawnPlayerPrefabClientSide` property (default is true) to provide control over the automatic spawning of player prefabs on the local client side. (#2863)\n- Added distributed authority mode specific `NetworkManager.OnFetchLocalPlayerPrefabToSpawn` callback that, when assigned, will allow the local client to provide the player prefab to be spawned for the local client. (#2863)\n  - This is only invoked if the `NetworkConfig.AutoSpawnPlayerPrefabClientSide` property is set to true.\n- Added distributed authority mode specific `NetworkBehaviour.HasAuthority` property that determines if the local client has authority over the associated `NetworkObject` instance (typical use case is within a `NetworkBehaviour` script much like that of `IsServer` or `IsClient`). (#2863)\n- Added distributed authority mode specific `NetworkBehaviour.IsSessionOwner` property that determines if the local client is the session owner (typical use case would be to determine if the local client can has scene management authority within a `NetworkBehaviour` script). (#2863)\n- Added support for distributed authority mode scene management where the currently assigned session owner can start scene events (i.e. scene loading and scene unloading). (#2863)\n\n### Fixed\n\n- Fixed issue where the host was not invoking `OnClientDisconnectCallback` for its own local client when internally shutting down. (#2822)\n- Fixed issue where NetworkTransform could potentially attempt to \"unregister\" a named message prior to it being registered. (#2807)\n- Fixed issue where in-scene placed `NetworkObject`s with complex nested children `NetworkObject`s (more than one child in depth) would not synchronize properly if WorldPositionStays was set to true. (#2796)\n\n### Changed\n- Changed client side awareness of other clients is now the same as a server or host. (#2863)\n- Changed `NetworkManager.ConnectedClients` can now be accessed by both server and clients. (#2863)\n- Changed `NetworkManager.ConnectedClientsList` can now be accessed by both server and clients. (#2863)\n- Changed `NetworkTransform` defaults to owner authoritative when connected to a distributed authority session. (#2863)\n- Changed `NetworkVariable` defaults to owner write and everyone read permissions when connected to a distributed authority session (even if declared with server read or write permissions).  (#2863)\n- Changed `NetworkObject` no longer implements the `MonoBehaviour.Update` method in order to determine whether a `NetworkObject` instance has been migrated to a different scene. Instead, only `NetworkObjects` with the `SceneMigrationSynchronization` property set will be updated internally during the `NetworkUpdateStage.PostLateUpdate` by `NetworkManager`. (#2863)\n- Changed `NetworkManager` inspector view layout where properties are now organized by category. (#2863)\n- Changed `NetworkTransform` to now use `NetworkTransformMessage` as opposed to named messages for NetworkTransformState updates. (#2810)\n- Changed `CustomMessageManager` so it no longer attempts to register or \"unregister\" a null or empty string and will log an error if this condition occurs. (#2807)"
      },
      "upmCi": {
        "footprint": "30b58dd41527f0745f60a544f04a338712651b16"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@2.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "e7ac3c896eea828bced614363711b80dcad4d570"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "0e975d993930faf7746d2b6824c3050276fc7951",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-2.0.0-exp.2.tgz"
      }
    },
    "1.8.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.8.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.4.0"
      },
      "unity": "2021.3",
      "_upm": {
        "changelog": "### Fixed\n\n- Fixed a compile error when compiling for IL2CPP targets when using the new `[Rpc]` attribute. (#2824)"
      },
      "upmCi": {
        "footprint": "5e57664d4f43bf176189c5ec8fd10f595b668e7d"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.8/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "eb213838233cbee2030891203bcb72d2354a5a7d"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "36e7f3554a713342e070928a3c9189f19654fcfc",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.8.1.tgz"
      }
    },
    "1.8.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.8.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.4.0"
      },
      "unity": "2021.3",
      "_upm": {
        "changelog": "### Added\n\n- Added a new RPC attribute, which is simply `Rpc`. (#2762)\n  - This is a generic attribute that can perform the functions of both Server and Client RPCs, as well as enabling client-to-client RPCs. Includes several default targets: `Server`, `NotServer`, `Owner`, `NotOwner`, `Me`, `NotMe`, `ClientsAndHost`, and `Everyone`. Runtime overrides are available for any of these targets, as well as for sending to a specific ID or groups of IDs.\n  - This attribute also includes the ability to defer RPCs that are sent to the local process to the start of the next frame instead of executing them immediately, treating them as if they had gone across the network. The default behavior is to execute immediately.\n  - This attribute effectively replaces `ServerRpc` and `ClientRpc`. `ServerRpc` and `ClientRpc` remain in their existing forms for backward compatibility, but `Rpc` will be the recommended and most supported option.\n- Added `NetworkManager.OnConnectionEvent` as a unified connection event callback to notify clients and servers of all client connections and disconnections within the session (#2762)\n- Added `NetworkManager.ServerIsHost` and `NetworkBehaviour.ServerIsHost` to allow a client to tell if it is connected to a host or to a dedicated server (#2762)\n- Added `SceneEventProgress.SceneManagementNotEnabled` return status to be returned when a `NetworkSceneManager` method is invoked and scene management is not enabled. (#2735)\n- Added `SceneEventProgress.ServerOnlyAction` return status to be returned when a `NetworkSceneManager` method is invoked by a client. (#2735)\n- Added `NetworkObject.InstantiateAndSpawn` and `NetworkSpawnManager.InstantiateAndSpawn` methods to simplify prefab spawning by assuring that the prefab is valid and applies any override prior to instantiating the `GameObject` and spawning the `NetworkObject` instance. (#2710)\n\n### Fixed\n\n- Fixed issue where a client disconnected by a server-host would not receive a local notification. (#2789)\n- Fixed issue where a server-host could shutdown during a relay connection but periodically the transport disconnect message sent to any connected clients could be dropped. (#2789)\n- Fixed issue where a host could disconnect its local client but remain running as a server. (#2789)\n- Fixed issue where `OnClientDisconnectedCallback` was not being invoked under certain conditions. (#2789)\n- Fixed issue where `OnClientDisconnectedCallback` was always returning 0 as the client identifier. (#2789)\n- Fixed issue where if a host or server shutdown while a client owned NetworkObjects (other than the player) it would throw an exception. (#2789)\n- Fixed issue where setting values on a `NetworkVariable` or `NetworkList` within `OnNetworkDespawn` during a shutdown sequence would throw an exception. (#2789)\n- Fixed issue where a teleport state could potentially be overridden by a previous unreliable delta state. (#2777)\n- Fixed issue where `NetworkTransform` was using the `NetworkManager.ServerTime.Tick` as opposed to `NetworkManager.NetworkTickSystem.ServerTime.Tick` during the authoritative side's tick update where it performed a delta state check. (#2777)\n- Fixed issue where a parented in-scene placed NetworkObject would be destroyed upon a client or server exiting a network session but not unloading the original scene in which the NetworkObject was placed. (#2737)\n- Fixed issue where during client synchronization and scene loading, when client synchronization or the scene loading mode are set to `LoadSceneMode.Single`, a `CreateObjectMessage` could be received, processed, and the resultant spawned `NetworkObject` could be instantiated in the client's currently active scene that could, towards the end of the client synchronization or loading process, be unloaded and cause the newly created `NetworkObject` to be destroyed (and throw and exception). (#2735)\n- Fixed issue where a `NetworkTransform` instance with interpolation enabled would result in wide visual motion gaps (stuttering) under above normal latency conditions and a 1-5% or higher packet are drop rate. (#2713)\n- Fixed issue where  you could not have multiple source network prefab overrides targeting the same network prefab as their override. (#2710)\n\n### Changed\n- Changed the server or host shutdown so it will now perform a \"soft shutdown\" when `NetworkManager.Shutdown` is invoked. This will send a disconnect notification to all connected clients and the server-host will wait for all connected clients to disconnect or timeout after a 5 second period before completing the shutdown process. (#2789)\n- Changed `OnClientDisconnectedCallback` will now return the assigned client identifier on the local client side if the client was approved and assigned one prior to being disconnected. (#2789)\n- Changed `NetworkTransform.SetState` (and related methods) now are cumulative during a fractional tick period and sent on the next pending tick. (#2777)\n- `NetworkManager.ConnectedClientsIds` is now accessible on the client side and will contain the list of all clients in the session, including the host client if the server is operating in host mode (#2762)\n- Changed `NetworkSceneManager` to return a `SceneEventProgress` status and not throw exceptions for methods invoked when scene management is disabled and when a client attempts to access a `NetworkSceneManager` method by a client. (#2735)\n- Changed `NetworkTransform` authoritative instance tick registration so a single `NetworkTransform` specific tick event update will update all authoritative instances to improve perofmance. (#2713)\n- Changed `NetworkPrefabs.OverrideToNetworkPrefab` dictionary is no longer used/populated due to it ending up being related to a regression bug and not allowing more than one override to be assigned to a network prefab asset. (#2710)\n- Changed in-scene placed `NetworkObject`s now store their source network prefab asset's `GlobalObjectIdHash` internally that is used, when scene management is disabled, by clients to spawn the correct prefab even if the `NetworkPrefab` entry has an override. This does not impact dynamically spawning the same prefab which will yield the override on both host and client. (#2710)\n- Changed in-scene placed `NetworkObject`s no longer require a `NetworkPrefab` entry with `GlobalObjectIdHash` override in order for clients to properly synchronize. (#2710)\n- Changed in-scene placed `NetworkObject`s now set their `IsSceneObject` value when generating their `GlobalObjectIdHash` value. (#2710)\n- Changed the default `NetworkConfig.SpawnTimeout` value from 1.0s to 10.0s. (#2710)"
      },
      "upmCi": {
        "footprint": "d2e1d4664bac8ee7f790f7869f550b2f3e65977d"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.8/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "53b735c70fba0c5476fe04b6440320bcd61ed195"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "73fc4a429086e602a97b87bba283a3934372282d",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.8.0.tgz"
      }
    },
    "1.7.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.7.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.4.0"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Added\n\n### Fixed\n\n- Fixed a bug where having a class with Rpcs that inherits from a class without Rpcs that inherits from NetworkVariable would cause a compile error. (#2751)\n- Fixed issue where `NetworkBehaviour.Synchronize` was not truncating the write buffer if nothing was serialized during `NetworkBehaviour.OnSynchronize` causing an additional 6 bytes to be written per `NetworkBehaviour` component instance. (#2749)\n\n### Changed"
      },
      "upmCi": {
        "footprint": "0aa1a9720f4e4850c481cc1bb159b646494808e1"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.7/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "5df824c7588b43c29238a927d14642d5f94129ff"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "8e51f76d8fcf6dddff806c2ca12e4526a9b9a727",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.7.1.tgz"
      }
    },
    "1.7.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.7.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.4.0"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Added\n\n- exposed NetworkObject.GetNetworkBehaviourAtOrderIndex as a public API (#2724)\n- Added context menu tool that provides users with the ability to quickly update the GlobalObjectIdHash value for all in-scene placed prefab instances that were created prior to adding a NetworkObject component to it. (#2707)\n- Added methods NetworkManager.SetPeerMTU and NetworkManager.GetPeerMTU to be able to set MTU sizes per-peer (#2676)\n- Added `GenerateSerializationForGenericParameterAttribute`, which can be applied to user-created Network Variable types to ensure the codegen generates serialization for the generic types they wrap. (#2694)\n- Added `GenerateSerializationForTypeAttribute`, which can be applied to any class or method to ensure the codegen generates serialization for the specific provided type. (#2694)\n- Exposed `NetworkVariableSerialization<T>.Read`, `NetworkVariableSerialization<T>.Write`, `NetworkVariableSerialization<T>.AreEqual`, and `NetworkVariableSerialization<T>.Duplicate` to further support the creation of user-created network variables by allowing users to access the generated serialization methods and serialize generic types efficiently without boxing. (#2694)\n- Added `NetworkVariableBase.MarkNetworkBehaviourDirty` so that user-created network variable types can mark their containing `NetworkBehaviour` to be processed by the update loop. (#2694)\n\n### Fixed\n\n- Fixed issue where the server side `NetworkSceneManager` instance was not adding the currently active scene to its list of scenes loaded. (#2723)\n- Generic NetworkBehaviour types no longer result in compile errors or runtime errors (#2720)\n- Rpcs within Generic NetworkBehaviour types can now serialize parameters of the class's generic types (but may not have generic types of their own) (#2720)\n- Errors are no longer thrown when entering play mode with domain reload disabled (#2720)\n- NetworkSpawn is now correctly called each time when entering play mode with scene reload disabled (#2720)\n- NetworkVariables of non-integer types will no longer break the inspector (#2714)\n- NetworkVariables with NonSerializedAttribute will not appear in the inspector (#2714)\n- Fixed issue where `UnityTransport` would attempt to establish WebSocket connections even if using UDP/DTLS Relay allocations when the build target was WebGL. This only applied to working in the editor since UDP/DTLS can't work in the browser. (#2695)\n- Fixed issue where a `NetworkBehaviour` component's `OnNetworkDespawn` was not being invoked on the host-server side for an in-scene placed `NetworkObject` when a scene was unloaded (during a scene transition) and the `NetworkBehaviour` component was positioned/ordered before the `NetworkObject` component. (#2685)\n- Fixed issue where `SpawnWithObservers` was not being honored when `NetworkConfig.EnableSceneManagement` was disabled. (#2682)\n- Fixed issue where `NetworkAnimator` was not internally tracking changes to layer weights which prevented proper layer weight synchronization back to the original layer weight value. (#2674)\n- Fixed \"writing past the end of the buffer\" error when calling ResetDirty() on managed network variables that are larger than 256 bytes when serialized. (#2670)\n- Fixed issue where generation of the `DefaultNetworkPrefabs` asset was not enabled by default. (#2662)\n- Fixed issue where the `GlobalObjectIdHash` value could be updated but the asset not marked as dirty. (#2662)\n- Fixed issue where the `GlobalObjectIdHash` value of a (network) prefab asset could be assigned an incorrect value when editing the prefab in a temporary scene. (#2662)\n- Fixed issue where the `GlobalObjectIdHash` value generated after creating a (network) prefab from an object constructed within the scene would not be the correct final value in a stand alone build. (#2662)\n\n### Changed\n\n- Updated dependency on `com.unity.transport` to version 1.4.0. (#2716)"
      },
      "upmCi": {
        "footprint": "87fd22da62ed4e055a6eead5cea85b4b449eded0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.7/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "f4004c72eb46bf2aac62bc71b599017bd0570fdb"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "fa501a7c693bdd18f20cf5e1767ea1e763aab992",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.7.0.tgz"
      }
    },
    "1.6.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.6.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.3.4"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Added\n\n- Added a protected virtual method `NetworkTransform.OnInitialize(ref NetworkTransformState replicatedState)` that just returns the replicated state reference.\n  \n### Fixed\n\n- Fixed  issue where invoking `NetworkManager.Shutdown` within `NetworkManager.OnClientStopped` or `NetworkManager.OnServerStopped` would force `NetworkManager.ShutdownInProgress` to remain true after completing the shutdown process. (#2661)\n- Fixed issue with client synchronization of position when using half precision and the delta position reaches the maximum value and is collapsed on the host prior to being forwarded to the non-owner clients. (#2636)\n- Fixed issue with scale not synchronizing properly depending upon the spawn order of NetworkObjects. (#2636)\n- Fixed issue position was not properly transitioning between ownership changes with an owner authoritative NetworkTransform. (#2636)\n- Fixed issue where a late joining non-owner client could update an owner authoritative NetworkTransform if ownership changed without any updates to position prior to the non-owner client joining. (#2636)\n\n### Changed"
      },
      "upmCi": {
        "footprint": "58b37aee2ff0caec7a160473c56e62119d3b760a"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.6/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "4ee8da05b439a5b8f76ee6d008221c6d58b7965a"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "c2d6608014f2035f69f29e9caaae2eb51f88e14d",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.6.0.tgz"
      }
    },
    "1.5.2": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.5.2",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.3.4"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Added\n\n### Fixed\n\n- Fixed issue where `NetworkClient.OwnedObjects` was not returning any owned objects due to the `NetworkClient.IsConnected` not being properly set. (#2631)\n- Fixed a crash when calling TrySetParent with a null Transform (#2625)\n- Fixed issue where a `NetworkTransform` using full precision state updates was losing transform state updates when interpolation was enabled. (#2624)\n- Fixed issue where `NetworkObject.SpawnWithObservers` was not being honored for late joining clients. (#2623)\n- Fixed issue where invoking `NetworkManager.Shutdown` multiple times, depending upon the timing, could cause an exception. (#2622)\n- Fixed issue where removing ownership would not notify the server that it gained ownership. This also resolves the issue where an owner authoritative NetworkTransform would not properly initialize upon removing ownership from a remote client. (#2618)\n- Fixed ILPP issues when using CoreCLR and for certain dedicated server builds. (#2614)\n- Fixed an ILPP compile error when creating a generic NetworkBehaviour singleton with a static T instance. (#2603)\n\n### Changed"
      },
      "upmCi": {
        "footprint": "e7549ba358ade416ab85285cdf53c5a6aac35cef"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.5/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "36368846c5bfe6cfb93adc36282507614955955c"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "b90cf7bd07f627449ad485d06fb5e2d7376bc93c",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.5.2.tgz"
      }
    },
    "1.5.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.5.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.3.4"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Added\n\n- Added support for serializing `NativeArray<>` and `NativeList<>` in `FastBufferReader`/`FastBufferWriter`, `BufferSerializer`, `NetworkVariable`, and RPCs. (To use `NativeList<>`, add `UNITY_NETCODE_NATIVE_COLLECTION_SUPPORT` to your Scripting Define Symbols in `Project Settings > Player`) (#2375)\n- The location of the automatically-created default network prefab list can now be configured (#2544)\n- Added: Message size limits (max single message and max fragmented message) can now be set using NetworkManager.MaximumTransmissionUnitSize and NetworkManager.MaximumFragmentedMessageSize for transports that don't work with the default values (#2530)\n- Added `NetworkObject.SpawnWithObservers` property (default is true) that when set to false will spawn a `NetworkObject` with no observers and will not be spawned on any client until `NetworkObject.NetworkShow` is invoked. (#2568)\n\n### Fixed\n\n- Fixed: Fixed a null reference in codegen in some projects (#2581)\n- Fixed issue where the `OnClientDisconnected` client identifier was incorrect after a pending client connection was denied. (#2569)\n- Fixed warning \"Runtime Network Prefabs was not empty at initialization time.\" being erroneously logged when no runtime network prefabs had been added (#2565)\n- Fixed issue where some temporary debug console logging was left in a merged PR. (#2562)\n- Fixed the \"Generate Default Network Prefabs List\" setting not loading correctly and always reverting to being checked. (#2545)\n- Fixed issue where users could not use NetworkSceneManager.VerifySceneBeforeLoading to exclude runtime generated scenes from client synchronization. (#2550)\n- Fixed missing value on `NetworkListEvent` for `EventType.RemoveAt` events.  (#2542,#2543)\n- Fixed issue where parenting a NetworkTransform under a transform with a scale other than Vector3.one would result in incorrect values on non-authoritative instances. (#2538)\n- Fixed issue where a server would include scene migrated and then despawned NetworkObjects to a client that was being synchronized. (#2532)\n- Fixed the inspector throwing exceptions when attempting to render `NetworkVariable`s of enum types. (#2529)\n- Making a `NetworkVariable` with an `INetworkSerializable` type that doesn't meet the `new()` constraint will now create a compile-time error instead of an editor crash (#2528)\n- Fixed Multiplayer Tools package installation docs page link on the NetworkManager popup. (#2526)\n- Fixed an exception and error logging when two different objects are shown and hidden on the same frame (#2524)\n- Fixed a memory leak in `UnityTransport` that occurred if `StartClient` failed. (#2518)\n- Fixed issue where a client could throw an exception if abruptly disconnected from a network session with one or more spawned `NetworkObject`(s). (#2510)\n- Fixed issue where invalid endpoint addresses were not being detected and returning false from NGO UnityTransport. (#2496)\n- Fixed some errors that could occur if a connection is lost and the loss is detected when attempting to write to the socket. (#2495)\n\n## Changed\n\n- Adding network prefabs before NetworkManager initialization is now supported. (#2565)\n- Connecting clients being synchronized now switch to the server's active scene before spawning and synchronizing NetworkObjects. (#2532)\n- Updated `UnityTransport` dependency on `com.unity.transport` to 1.3.4. (#2533)\n- Improved performance of NetworkBehaviour initialization by replacing reflection when initializing NetworkVariables with compile-time code generation, which should help reduce hitching during additive scene loads. (#2522)"
      },
      "upmCi": {
        "footprint": "35c5325acc3edf18c37ef8c9d19e0944fae0d42a"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.5/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "7a969f89d6dda65ac373ce552c0c997c9116f21a"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "e500cbd52b887ac300383b3ec10cb0aa4a68c241",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.5.1.tgz"
      }
    },
    "1.4.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.4.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.3.3"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Added\n\n- Added a way to access the GlobalObjectIdHash via PrefabIdHash for use in the Connection Approval Callback. (#2437)\n- Added `OnServerStarted` and `OnServerStopped` events that will trigger only on the server (or host player) to notify that the server just started or is no longer active (#2420)\n- Added `OnClientStarted` and `OnClientStopped` events that will trigger only on the client (or host player) to notify that the client just started or is no longer active (#2420)\n- Added `NetworkTransform.UseHalfFloatPrecision` property that, when enabled, will use half float values for position, rotation, and scale. This yields a 50% bandwidth savings a the cost of precision. (#2388)\n- Added `NetworkTransform.UseQuaternionSynchronization` property that, when enabled, will synchronize the entire quaternion. (#2388)\n- Added `NetworkTransform.UseQuaternionCompression` property that, when enabled, will use a smallest three implementation reducing a full quaternion synchronization update to the size of an unsigned integer. (#2388)\n- Added `NetworkTransform.SlerpPosition` property that, when enabled along with interpolation being enabled, will interpolate using `Vector3.Slerp`. (#2388)\n- Added `BufferedLinearInterpolatorVector3` that replaces the float version, is now used by `NetworkTransform`, and provides the ability to enable or disable `Slerp`. (#2388)\n- Added `HalfVector3` used for scale when half float precision is enabled. (#2388)\n- Added `HalfVector4` used for rotation when half float precision and quaternion synchronization is enabled. (#2388)\n- Added `HalfVector3DeltaPosition` used for position when half float precision is enabled. This handles loss in position precision by updating only the delta position as opposed to the full position. (#2388)\n- Added `NetworkTransform.GetSpaceRelativePosition` and `NetworkTransform.GetSpaceRelativeRotation` helper methods to return the proper values depending upon whether local or world space. (#2388)\n- Added `NetworkTransform.OnAuthorityPushTransformState` virtual method that is invoked just prior to sending the `NetworkTransformState` to non-authoritative instances. This provides users with the ability to obtain more precise delta values for prediction related calculations. (#2388)\n- Added `NetworkTransform.OnNetworkTransformStateUpdated` virtual method that is invoked just after the authoritative `NetworkTransformState` is applied. This provides users with the ability to obtain more precise delta values for prediction related calculations. (#2388)\n- Added `NetworkTransform.OnInitialize`virtual method that is invoked after the `NetworkTransform` has been initialized or re-initialized when ownership changes. This provides for a way to make adjustments when `NetworkTransform` is initialized (i.e. resetting client prediction etc) (#2388)\n- Added `NetworkObject.SynchronizeTransform` property (default is true) that provides users with another way to help with bandwidth optimizations where, when set to false, the `NetworkObject`'s associated transform will not be included when spawning and/or synchronizing late joining players. (#2388)\n- Added `NetworkSceneManager.ActiveSceneSynchronizationEnabled` property, disabled by default, that enables client synchronization of server-side active scene changes. (#2383)\n- Added `NetworkObject.ActiveSceneSynchronization`, disabled by default, that will automatically migrate a `NetworkObject` to a newly assigned active scene. (#2383)\n- Added `NetworkObject.SceneMigrationSynchronization`, enabled by default, that will synchronize client(s) when a `NetworkObject` is migrated into a new scene on the server side via `SceneManager.MoveGameObjectToScene`. (#2383)\n\n### Changed\n\n- Made sure the `CheckObjectVisibility` delegate is checked and applied, upon `NetworkShow` attempt. Found while supporting (#2454), although this is not a fix for this (already fixed) issue. (#2463)\n- Changed `NetworkTransform` authority handles delta checks on each new network tick and no longer consumes processing cycles checking for deltas for all frames in-between ticks. (#2388)\n- Changed the `NetworkTransformState` structure is now public and now has public methods that provide access to key properties of the `NetworkTransformState` structure. (#2388)\n- Changed `NetworkTransform` interpolation adjusts its interpolation \"ticks ago\" to be 2 ticks latent if it is owner authoritative and the instance is not the server or 1 tick latent if the instance is the server and/or is server authoritative. (#2388)\n- Updated `NetworkSceneManager` to migrate dynamically spawned `NetworkObject`s with `DestroyWithScene` set to false into the active scene if their current scene is unloaded. (#2383)\n- Updated the server to synchronize its local `NetworkSceneManager.ClientSynchronizationMode` during the initial client synchronization. (#2383)\n\n### Fixed\n\n- Fixed issue where during client synchronization the synchronizing client could receive a ObjectSceneChanged message before the client-side NetworkObject instance had been instantiated and spawned. (#2502)\n- Fixed issue where `NetworkAnimator` was building client RPC parameters to exclude the host from sending itself messages but was not including it in the ClientRpc parameters. (#2492)\n- Fixed issue where `NetworkAnimator` was not properly detecting and synchronizing cross fade initiated transitions. (#2481)\n- Fixed issue where `NetworkAnimator` was not properly synchronizing animation state updates. (#2481)\n- Fixed float NetworkVariables not being rendered properly in the inspector of NetworkObjects. (#2441)\n- Fixed an issue where Named Message Handlers could remove themselves causing an exception when the metrics tried to access the name of the message.(#2426)\n- Fixed registry of public `NetworkVariable`s in derived `NetworkBehaviour`s (#2423)\n- Fixed issue where runtime association of `Animator` properties to `AnimationCurve`s would cause `NetworkAnimator` to attempt to update those changes. (#2416)\n- Fixed issue where `NetworkAnimator` would not check if its associated `Animator` was valid during serialization and would spam exceptions in the editor console. (#2416)\n- Fixed issue with a child's rotation rolling over when interpolation is enabled on a `NetworkTransform`. Now using half precision or full quaternion synchronization will always update all axis. (#2388)\n- Fixed issue where `NetworkTransform` was not setting the teleport flag when the `NetworkTransform.InLocalSpace` value changed. This issue only impacted `NetworkTransform` when interpolation was enabled. (#2388)\n- Fixed issue when the `NetworkSceneManager.ClientSynchronizationMode` is `LoadSceneMode.Additive` and the server changes the currently active scene prior to a client connecting then upon a client connecting and being synchronized the NetworkSceneManager would clear its internal ScenePlacedObjects list that could already be populated. (#2383)\n- Fixed issue where a client would load duplicate scenes of already preloaded scenes during the initial client synchronization and `NetworkSceneManager.ClientSynchronizationMode` was set to `LoadSceneMode.Additive`. (#2383)"
      },
      "upmCi": {
        "footprint": "dad9d9cf0a4704c51c7f587ac264ae49fe2efa1f"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.4/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "a418eabe59ed5f5e918d1756ee051436d2819828"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "b2e1b9169ca542da893c9100a358b25a68dafa3b",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.4.0.tgz"
      }
    },
    "1.3.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.3.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.3.3"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Added\n\n- Added detection and graceful handling of corrupt packets for additional safety. (#2419)\n\n### Changed\n\n- The UTP component UI has been updated to be more user-friendly for new users by adding a simple toggle to switch between local-only (127.0.0.1) and remote (0.0.0.0) binding modes, using the toggle \"Allow Remote Connections\" (#2408)\n- Updated `UnityTransport` dependency on `com.unity.transport` to 1.3.3. (#2450)\n- `NetworkShow()` of `NetworkObject`s are delayed until the end of the frame to ensure consistency of delta-driven variables like `NetworkList`.\n- Dirty `NetworkObject` are reset at end-of-frame and not at serialization time.\n- `NetworkHide()` of an object that was just `NetworkShow()`n produces a warning, as remote clients will _not_ get a spawn/despawn pair.\n- Renamed the NetworkTransform.SetState parameter `shouldGhostsInterpolate` to `teleportDisabled` for better clarity of what that parameter does. (#2228)\n- Network prefabs are now stored in a ScriptableObject that can be shared between NetworkManagers, and have been exposed for public access. By default, a Default Prefabs List is created that contains all NetworkObject prefabs in the project, and new NetworkManagers will default to using that unless that option is turned off in the Netcode for GameObjects settings. Existing NetworkManagers will maintain their existing lists, which can be migrated to the new format via a button in their inspector. (#2322)\n\n### Fixed\n\n- Fixed issue where changes to a layer's weight would not synchronize unless a state transition was occurring.(#2399)\n- Fixed issue where `NetworkManager.LocalClientId` was returning the `NetworkTransport.ServerClientId` as opposed to the `NetworkManager.m_LocalClientId`. (#2398)\n- Fixed issue where a dynamically spawned `NetworkObject` parented under an in-scene placed `NetworkObject` would have its `InScenePlaced` value changed to `true`. This would result in a soft synchronization error for late joining clients. (#2396)\n- Fixed a UTP test that was failing when you install Unity Transport package 2.0.0 or newer. (#2347)\n- Fixed issue where `NetcodeSettingsProvider` would throw an exception in Unity 2020.3.x versions. (#2345)\n- Fixed server side issue where, depending upon component ordering, some NetworkBehaviour components might not have their OnNetworkDespawn method invoked if the client side disconnected. (#2323)\n- Fixed a case where data corruption could occur when using UnityTransport when reaching a certain level of send throughput. (#2332)\n- Fixed an issue in `UnityTransport` where an exception would be thrown if starting a Relay host/server on WebGL. This exception should only be thrown if using direct connections (where WebGL can't act as a host/server). (#2321)\n- Fixed `NetworkAnimator` issue where it was not checking for `AnimatorStateTtansition.destinationStateMachine` and any possible sub-states defined within it. (#2309)\n- Fixed `NetworkAnimator` issue where the host client was receiving the ClientRpc animation updates when the host was the owner.(#2309)\n- Fixed `NetworkAnimator` issue with using pooled objects and when specific properties are cleaned during despawn and destroy.(#2309)\n- Fixed issue where `NetworkAnimator` was checking for animation changes when the associated `NetworkObject` was not spawned.(#2309)\n- Corrected an issue with the documentation for BufferSerializer (#2401)"
      },
      "upmCi": {
        "footprint": "edebf4ce36d2ecd3e2a7632dbf88da8cbc89aa50"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.3/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "469b46fabe1a78032a31ab04a15490a6912dadfb"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "3d75a402a464c495c399acdc6bbfcaecd45e527a",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.3.1.tgz"
      }
    },
    "1.2.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.2.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.3.0"
      },
      "unity": "2020.3",
      "upmCi": {
        "footprint": "4160b9a4b03a930793225fd4767f2b00fee62c79"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode.gameobjects@1.2/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "789f0930ead8e5ba27e123323f407d6f3393aa7b"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "dd108ea7e342e1371ba042614870a504875db6c2",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.2.0.tgz"
      }
    },
    "1.1.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.1.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.3.0"
      },
      "unity": "2020.3",
      "upmCi": {
        "footprint": "4d959c429b2aabd0ba04a6a1a4e1c5e352e6366f"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "2c69184e5f85a025455c415145be3eeecbf98446"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "4c82bb0b29728e93187a7419ecac826f3ccb238c",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.1.0.tgz"
      }
    },
    "1.0.2": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.2",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.2.0"
      },
      "unity": "2020.3",
      "upmCi": {
        "footprint": "01764b7751e27d1e2af672c49cec3ed5691b53b7"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "fe0c300aa691f31d2aec1d4b73e2971f28122d3b"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "223730174cc72ba2de9e2d3c8e0f8893859fcb90",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.2.tgz"
      }
    },
    "1.0.1": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.1",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.2.0"
      },
      "unity": "2020.3",
      "upmCi": {
        "footprint": "8824c99a21c438135052b8a8d42b6a8cb865bea3"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "ce1ab3ca9495caf3f906d8ca5459677614214837"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "dist": {
        "shasum": "48356cddd011bf7a3ef78728015b51dfa9a1ddf6",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.1.tgz"
      }
    },
    "1.0.0": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.0",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.1.0"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Changed\n\n- Changed version to 1.0.0. (#2046)"
      },
      "upmCi": {
        "footprint": "382d762a40cdcb42ebaf495e373effb00362baf1"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "fddb7cd920e1db9e49d44846d7121e38f59bd137"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "_id": "com.unity.netcode.gameobjects@1.0.0",
      "_integrity": "sha512-6NjRRaNiEVPQdXiA4AC1twL9Ouzv3KP5qGBSugIUptif2xMYnFV1OYzedwGY2zunpPSUIEQzVa28Vw2g/UdneQ==",
      "_resolved": "/tmp/com.unity.netcode.gameobjects@1.0.0-x97rd3m_.tgz",
      "_from": "file:/tmp/com.unity.netcode.gameobjects@1.0.0-x97rd3m_.tgz",
      "dist": {
        "shasum": "33f08fc87c96e8eb4b106cad952d10382c093211",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.0.tgz"
      }
    },
    "1.0.0-pre.10": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.0-pre.10",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.1.0"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Added\n\n- Added a new `OnTransportFailure` callback to `NetworkManager`. This callback is invoked when the manager's `NetworkTransport` encounters an unrecoverable error. Transport failures also cause the `NetworkManager` to shut down. Currently, this is only used by `UnityTransport` to signal a timeout of its connection to the Unity Relay servers. (#1994)\n- Added `NetworkEvent.TransportFailure`, which can be used by implementations of `NetworkTransport` to signal to `NetworkManager` that an unrecoverable error was encountered. (#1994)\n- Added test to ensure a warning occurs when nesting NetworkObjects in a NetworkPrefab (#1969)\n- Added `NetworkManager.RemoveNetworkPrefab(...)` to remove a prefab from the prefabs list (#1950)\n\n### Changed\n\n- Updated `UnityTransport` dependency on `com.unity.transport` to 1.1.0. (#2025)\n- (API Breaking) `ConnectionApprovalCallback` is no longer an `event` and will not allow more than 1 handler registered at a time. Also, `ConnectionApprovalCallback` is now a `Func<>` taking `ConnectionApprovalRequest` in and returning `ConnectionApprovalResponse` back out (#1972)\n\n### Removed\n\n### Fixed\n- Fixed issue where dynamically spawned `NetworkObject`s could throw an exception if the scene of origin handle was zero (0) and the `NetworkObject` was already spawned. (#2017)\n- Fixed issue where `NetworkObject.Observers` was not being cleared when despawned. (#2009)\n- Fixed `NetworkAnimator` could not run in the server authoritative mode. (#2003)\n- Fixed issue where late joining clients would get a soft synchronization error if any in-scene placed NetworkObjects were parented under another `NetworkObject`. (#1985)\n- Fixed issue where `NetworkBehaviourReference` would throw a type cast exception if using `NetworkBehaviourReference.TryGet` and the component type was not found. (#1984)\n- Fixed `NetworkSceneManager` was not sending scene event notifications for the currently active scene and any additively loaded scenes when loading a new scene in `LoadSceneMode.Single` mode. (#1975)\n- Fixed issue where one or more clients disconnecting during a scene event would cause `LoadEventCompleted` or `UnloadEventCompleted` to wait until the `NetworkConfig.LoadSceneTimeOut` period before being triggered. (#1973)\n- Fixed issues when multiple `ConnectionApprovalCallback`s were registered (#1972)\n- Fixed a regression in serialization support: `FixedString`, `Vector2Int`, and `Vector3Int` types can now be used in NetworkVariables and RPCs again without requiring a `ForceNetworkSerializeByMemcpy<>` wrapper. (#1961)\n- Fixed generic types that inherit from NetworkBehaviour causing crashes at compile time. (#1976)\n- Fixed endless dialog boxes when adding a `NetworkBehaviour` to a `NetworkManager` or vice-versa. (#1947)\n- Fixed `NetworkAnimator` issue where it was only synchronizing parameters if the layer or state changed or was transitioning between states. (#1946)\n- Fixed `NetworkAnimator` issue where when it did detect a parameter had changed it would send all parameters as opposed to only the parameters that changed. (#1946)\n- Fixed `NetworkAnimator` issue where it was not always disposing the `NativeArray` that is allocated when spawned. (#1946)\n- Fixed `NetworkAnimator` issue where it was not taking the animation speed or state speed multiplier into consideration. (#1946)\n- Fixed `NetworkAnimator` issue where it was not properly synchronizing late joining clients if they joined while `Animator` was transitioning between states. (#1946)\n- Fixed `NetworkAnimator` issue where the server was not relaying changes to non-owner clients when a client was the owner. (#1946)\n- Fixed issue where the `PacketLoss` metric for tools would return the packet loss over a connection lifetime instead of a single frame. (#2004)"
      },
      "upmCi": {
        "footprint": "13bd9771fd94050d43c32b238d73617da4b2389d"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "d1302ce0b946a675f49425dbd11ee2c4afe89d3f"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "_id": "com.unity.netcode.gameobjects@1.0.0-pre.10",
      "_integrity": "sha512-4MNt3riqnSfl5/U3ewRmUxqPl1NZmATe3EhKFDxqD3JC3FSFQQdOEblyNSISAD0dEjltLwMSaMcMEQaAhcBy2g==",
      "_resolved": "/tmp/com.unity.netcode.gameobjects@1.0.0-pre.10-w5ctcl2r.tgz",
      "_from": "file:/tmp/com.unity.netcode.gameobjects@1.0.0-pre.10-w5ctcl2r.tgz",
      "dist": {
        "shasum": "296f0daa3d701c5e4b3273c443f903cc0ac44328",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.0-pre.10.tgz"
      }
    },
    "1.0.0-pre.9": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.0-pre.9",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.0.0"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Fixed\n\n- Fixed Hosting again after failing to host now works correctly (#1938)\n- Fixed NetworkManager to cleanup connected client lists after stopping (#1945)\n- Fixed NetworkHide followed by NetworkShow on the same frame works correctly (#1940)"
      },
      "upmCi": {
        "footprint": "ed33b1bdf8c343399eadd7640f4e9caa4ed07776"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "cdca1eb844973e9f314f6a263bb4c0497d9e396f"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "_id": "com.unity.netcode.gameobjects@1.0.0-pre.9",
      "_integrity": "sha512-vKXL7UjNfUd+d/+ILqqZtEl+Mn8ADZN5jrr4Qun6mHn4nq0FZX4s2+u6Q5V96a8ORi09d7JYX+Go4+X+D2XaAg==",
      "_resolved": "/tmp/com.unity.netcode.gameobjects@1.0.0-pre.9-6j8x0c4y.tgz",
      "_from": "file:/tmp/com.unity.netcode.gameobjects@1.0.0-pre.9-6j8x0c4y.tgz",
      "dist": {
        "shasum": "02cd33215ef1e2ccbb0c0f7c3b6315965b503e6f",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.0-pre.9.tgz"
      }
    },
    "1.0.0-pre.8": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.0-pre.8",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.0.0"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Changed\n\n- `unmanaged` structs are no longer universally accepted as RPC parameters because some structs (i.e., structs with pointers in them, such as `NativeList<T>`) can't be supported by the default memcpy struct serializer. Structs that are intended to be serialized across the network must add `INetworkSerializeByMemcpy` to the interface list (i.e., `struct Foo : INetworkSerializeByMemcpy`). This interface is empty and just serves to mark the struct as compatible with memcpy serialization. For external structs you can't edit, you can pass them to RPCs by wrapping them in `ForceNetworkSerializeByMemcpy<T>`. (#1901)\n\n### Removed\n- Removed `SIPTransport` (#1870)\n\n- Removed `ClientNetworkTransform` from the package samples and moved to Boss Room's Utilities package which can be found [here](https://github.com/Unity-Technologies/com.unity.multiplayer.samples.coop/blob/main/Packages/com.unity.multiplayer.samples.coop/Utilities/Net/ClientAuthority/ClientNetworkTransform.cs).\n\n### Fixed\n\n- Fixed `NetworkTransform` generating false positive rotation delta checks when rolling over between 0 and 360 degrees. (#1890)\n- Fixed client throwing an exception if it has messages in the outbound queue when processing the `NetworkEvent.Disconnect` event and is using UTP. (#1884)\n- Fixed issue during client synchronization if 'ValidateSceneBeforeLoading' returned false it would halt the client synchronization process resulting in a client that was approved but not synchronized or fully connected with the server. (#1883)\n- Fixed an issue where UNetTransport.StartServer would return success even if the underlying transport failed to start (#854)\n- Passing generic types to RPCs no longer causes a native crash (#1901)\n- Fixed an issue where calling `Shutdown` on a `NetworkManager` that was already shut down would cause an immediate shutdown the next time it was started (basically the fix makes `Shutdown` idempotent). (#1877)"
      },
      "upmCi": {
        "footprint": "7593dccd41bcdc7887dea63f675cdee7400ee3dc"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "437d82ad0f11faa22e9f2539dddd3c5dda798a36"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        }
      ],
      "_id": "com.unity.netcode.gameobjects@1.0.0-pre.8",
      "_integrity": "sha512-rMEQGI5b/OWRQ1V/qkV/iFAklvdCfniaFvBL/eTNfW3Jyg+DEsdlMiqbErgX2QzMdnnLmmfFZxKBXUo4NcBZHg==",
      "_resolved": "/tmp/com.unity.netcode.gameobjects@1.0.0-pre.8-x4cualaf.tgz",
      "_from": "file:/tmp/com.unity.netcode.gameobjects@1.0.0-pre.8-x4cualaf.tgz",
      "dist": {
        "shasum": "528799057acfd5faaf9d8fc2d40bf33faa9cea72",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.0-pre.8.tgz"
      }
    },
    "1.0.0-pre.7": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.0-pre.7",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.transport": "1.0.0"
      },
      "unity": "2020.3",
      "upm": {
        "changelog": "### Added\n\n- Added editor only check prior to entering into play mode if the currently open and active scene is in the build list and if not displays a dialog box asking the user if they would like to automatically add it prior to entering into play mode. (#1828)\n- Added `UnityTransport` implementation and `com.unity.transport` package dependency (#1823)\n- Added `NetworkVariableWritePermission` to `NetworkVariableBase` and implemented `Owner` client writable netvars. (#1762)\n- `UnityTransport` settings can now be set programmatically. (#1845)\n- `FastBufferWriter` and Reader IsInitialized property. (#1859)\n\n### Changed\n\n- Updated `UnityTransport` dependency on `com.unity.transport` to 1.0.0 (#1849)\n\n### Removed\n\n- Removed `SnapshotSystem` (#1852)\n- Removed `com.unity.modules.animation`, `com.unity.modules.physics` and `com.unity.modules.physics2d` dependencies from the package (#1812)\n- Removed `com.unity.collections` dependency from the package (#1849)\n\n### Fixed\n- Fixed in-scene placed NetworkObjects not being found/ignored after a client disconnects and then reconnects. (#1850)\n- Fixed issue where `UnityTransport` send queues were not flushed when calling `DisconnectLocalClient` or `DisconnectRemoteClient`. (#1847)\n- Fixed NetworkBehaviour dependency verification check for an existing NetworkObject not searching from root parent transform relative GameObject. (#1841)\n- Fixed issue where entries were not being removed from the NetworkSpawnManager.OwnershipToObjectsTable. (#1838)\n- Fixed ClientRpcs would always send to all connected clients by default as opposed to only sending to the NetworkObject's Observers list by default. (#1836)\n- Fixed clarity for NetworkSceneManager client side notification when it receives a scene hash value that does not exist in its local hash table. (#1828)\n- Fixed client throws a key not found exception when it times out using UNet or UTP. (#1821)\n- Fixed network variable updates are no longer limited to 32,768 bytes when NetworkConfig.EnsureNetworkVariableLengthSafety is enabled. The limits are now determined by what the transport can send in a message. (#1811)\n- Fixed in-scene NetworkObjects get destroyed if a client fails to connect and shuts down the NetworkManager. (#1809)\n- Fixed user never being notified in the editor that a NetworkBehaviour requires a NetworkObject to function properly. (#1808)\n- Fixed PlayerObjects and dynamically spawned NetworkObjects not being added to the NetworkClient's OwnedObjects (#1801)\n- Fixed issue where NetworkManager would continue starting even if the NetworkTransport selected failed. (#1780)\n- Fixed issue when spawning new player if an already existing player exists it does not remove IsPlayer from the previous player (#1779)\n- Fixed lack of notification that NetworkManager and NetworkObject cannot be added to the same GameObject with in-editor notifications (#1777)\n- Fixed parenting warning printing for false positives (#1855)"
      },
      "upmCi": {
        "footprint": "98c91bebf56ec13b76dfa5cf9d5d22946f7529cd"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "16420648a7790c64f917e000f7d0cdbe57350835"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        },
        {
          "displayName": "ClientNetworkTransform",
          "description": "A sample to demonstrate how client-driven NetworkTransform can be implemented",
          "path": "Samples~/ClientNetworkTransform"
        }
      ],
      "_id": "com.unity.netcode.gameobjects@1.0.0-pre.7",
      "_integrity": "sha512-0/XFGQcuWa/rVph07i8tp2EiHNLXYqp3jAE9iDVSx2WjTZILM7pUyaS0oRK5Tcgqy/wSWoNirzf8UbuHV300kw==",
      "_resolved": "/tmp/com.unity.netcode.gameobjects@1.0.0-pre.7-qydaeap8.tgz",
      "_from": "file:/tmp/com.unity.netcode.gameobjects@1.0.0-pre.7-qydaeap8.tgz",
      "dist": {
        "shasum": "eb02d4a581bd1efb107adea99f08113e711743ab",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.0-pre.7.tgz"
      }
    },
    "1.0.0-pre.6": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.0-pre.6",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.physics2d": "1.0.0",
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.collections": "1.1.0"
      },
      "unity": "2020.3",
      "upm": {
        "changelog": "### Added,- NetworkAnimator now properly synchrhonizes all animation layers as well as runtime-adjusted weighting between them (#1765),- Added first set of tests for NetworkAnimator - parameter syncing, trigger set / reset, override network animator (#1735),### Changed,### Fixed,- Fixed an issue where sometimes the first client to connect to the server could see messages from the server as coming from itself. (#1683),- Fixed an issue where clients seemed to be able to send messages to ClientId 1, but these messages would actually still go to the server (id 0) instead of that client. (#1683),- Improved clarity of error messaging when a client attempts to send a message to a destination other than the server, which isn't allowed. (#1683),- Disallowed async keyword in RPCs (#1681),- Fixed an issue where Alpha release versions of Unity (version 2022.2.0a5 and later) will not compile due to the UNet Transport no longer existing (#1678),- Fixed messages larger than 64k being written with incorrectly truncated message size in header (#1686) (credit: @kaen),- Fixed overloading RPC methods causing collisions and failing on IL2CPP targets. (#1694),- Fixed spawn flow to propagate `IsSceneObject` down to children NetworkObjects, decouple implicit relationship between object spawning & `IsSceneObject` flag (#1685),- Fixed error when serializing ConnectionApprovalMessage with scene management disabled when one or more objects is hidden via the CheckObjectVisibility delegate (#1720),- Fixed CheckObjectVisibility delegate not being properly invoked for connecting clients when Scene Management is enabled. (#1680),- Fixed NetworkList to properly call INetworkSerializable's NetworkSerialize() method (#1682),- Fixed NetworkVariables containing more than 1300 bytes of data (such as large NetworkLists) no longer cause an OverflowException (the limit on data size is now whatever limit the chosen transport imposes on fragmented NetworkDelivery mechanisms) (#1725),- Fixed ServerRpcParams and ClientRpcParams must be the last parameter of an RPC in order to function properly. Added a compile-time check to ensure this is the case and trigger an error if they're placed elsewhere (#1721),- Fixed FastBufferReader being created with a length of 1 if provided an input of length 0 (#1724),- Fixed The NetworkConfig's checksum hash includes the NetworkTick so that clients with a different tickrate than the server are identified and not allowed to connect (#1728),- Fixed OwnedObjects not being properly modified when using ChangeOwnership (#1731),- Improved performance in NetworkAnimator (#1735),- Removed the \"always sync\" network animator (aka \"autosend\") parameters (#1746)"
      },
      "upmCi": {
        "footprint": "86275b5331ab1e0e0a176d177bcd429a69c058af"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "cc3c088aad2bfb1b3da51137057df65b882cad45"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        },
        {
          "displayName": "ClientNetworkTransform",
          "description": "A sample to demonstrate how client-driven NetworkTransform can be implemented",
          "path": "Samples~/ClientNetworkTransform"
        }
      ],
      "_id": "com.unity.netcode.gameobjects@1.0.0-pre.6",
      "_integrity": "sha512-t8Dx0Ewt3YEll6V/R2Ti7m9N6+db3QBOuImuBrqQqGK2ybDjm5Fqsbxt0Lf6Zuc0ArvT3TxznMg5CiBKPqK5lg==",
      "_resolved": "/tmp/com.unity.netcode.gameobjects@1.0.0-pre.6-kce9h2n8.tgz",
      "_from": "file:/tmp/com.unity.netcode.gameobjects@1.0.0-pre.6-kce9h2n8.tgz",
      "dist": {
        "shasum": "dd0ac314d899d54bdb4a6a7ea6f020ee68625852",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.0-pre.6.tgz"
      }
    },
    "1.0.0-pre.5": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.0-pre.5",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.physics2d": "1.0.0",
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.collections": "1.1.0"
      },
      "unity": "2020.3",
      "upmCi": {
        "footprint": "770504b1f691c766a300b616c1d8106335265f3c"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "d1f990d97b80d49ce12fce7357cbd5f6b794ce01"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        },
        {
          "displayName": "ClientNetworkTransform",
          "description": "A sample to demonstrate how client-driven NetworkTransform can be implemented",
          "path": "Samples~/ClientNetworkTransform"
        }
      ],
      "_id": "com.unity.netcode.gameobjects@1.0.0-pre.5",
      "_integrity": "sha512-/oE0an4WLEaeEzxYbc8hFsAakL6kjOouIcTIvoyrUxpM5PPQwyCHLxMeHATaJP9XkAl05mz+jSCGIblYRb68GA==",
      "_resolved": "/tmp/com.unity.netcode.gameobjects@1.0.0-pre.5-s_z3dk35.tgz",
      "_from": "file:/tmp/com.unity.netcode.gameobjects@1.0.0-pre.5-s_z3dk35.tgz",
      "dist": {
        "shasum": "6fd3d6d0d0f198bdf47e04c926a56d16a8e1dc70",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.0-pre.5.tgz"
      }
    },
    "1.0.0-pre.4": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.0-pre.4",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.physics2d": "1.0.0",
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.collections": "1.1.0"
      },
      "unity": "2020.3",
      "upmCi": {
        "footprint": "28fd203207af71c78d6aaba679e94c5ead807529"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "b14204cd059fb90f4a64319824105619f317d591"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        },
        {
          "displayName": "ClientNetworkTransform",
          "description": "A sample to demonstrate how client-driven NetworkTransform can be implemented",
          "path": "Samples~/ClientNetworkTransform"
        }
      ],
      "_id": "com.unity.netcode.gameobjects@1.0.0-pre.4",
      "_integrity": "sha512-poyDTVTb+8DGwJJWrBuieAtwVTI0KOkXxZbNIaYGN+pmv/9cvLz1xhc/IebNXqpvdQyxNln3qT8WU1IY/Amxkw==",
      "_resolved": "/pkgprom/com.unity.netcode.gameobjects-1.0.0-pre.4.tgz",
      "_from": "file:com.unity.netcode.gameobjects-1.0.0-pre.4.tgz",
      "dist": {
        "shasum": "53fb4263693efe73dcb5f5100c6d631b86f437f4",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.0-pre.4.tgz"
      }
    },
    "1.0.0-pre.3": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.0-pre.3",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.modules.ai": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.collections": "1.0.0-pre.5"
      },
      "unity": "2020.3",
      "upmCi": {
        "footprint": "883b3567bbb5155b7d06ef3c2cac755efa58a235"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "3e4df72dadeea8bd622da2824e30541910c79d3d"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        },
        {
          "displayName": "ClientNetworkTransform",
          "description": "A sample to demonstrate how client-driven NetworkTransform can be implemented",
          "path": "Samples~/ClientNetworkTransform"
        }
      ],
      "_id": "com.unity.netcode.gameobjects@1.0.0-pre.3",
      "_integrity": "sha512-bHPM2xuvwiQUHdd0nbvIRyWSy5zDwHTFDvwC+nS4TW3jxy2Is66ggb6RtZfn5uDR3rPpVu9wZQIT89Hf45yrDg==",
      "_resolved": "/pkgprom/com.unity.netcode.gameobjects-1.0.0-pre.3.tgz",
      "_from": "file:com.unity.netcode.gameobjects-1.0.0-pre.3.tgz",
      "dist": {
        "shasum": "51ce0dfd0fc167792dd5e506d1f322ef71b348a3",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.0-pre.3.tgz"
      }
    },
    "1.0.0-pre.2": {
      "name": "com.unity.netcode.gameobjects",
      "version": "1.0.0-pre.2",
      "displayName": "Netcode for GameObjects",
      "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
      "category": "",
      "dependencies": {
        "com.unity.modules.ai": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.nuget.mono-cecil": "1.10.1",
        "com.unity.collections": "1.0.0-pre.5"
      },
      "unity": "2020.3",
      "upmCi": {
        "footprint": "f3acafb35c17cf3cb48042bf9655c4ada00c34ae"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.netcode.gameobjects.git",
        "type": "git",
        "revision": "bcef5b992c5414707ff48c95a48a113fd0e09ad3"
      },
      "samples": [
        {
          "displayName": "Bootstrap",
          "description": "A lightweight sample to get started",
          "path": "Samples~/Bootstrap"
        },
        {
          "displayName": "ClientNetworkTransform",
          "description": "A sample to demonstrate how client-driven NetworkTransform can be implemented",
          "path": "Samples~/ClientNetworkTransform"
        }
      ],
      "_id": "com.unity.netcode.gameobjects@1.0.0-pre.2",
      "_integrity": "sha512-6Q9pvxLAHfCGjmISEuVMjjkN8QwXt+x+sRrSTWEYU25/t+zEMJK33wI9+gc0qvlcALZ8xWsfMI8HnarSNFmPjg==",
      "_resolved": "/pkgprom/com.unity.netcode.gameobjects-1.0.0-pre.2.tgz",
      "_from": "file:com.unity.netcode.gameobjects-1.0.0-pre.2.tgz",
      "dist": {
        "shasum": "e083030e43dc5c9ea787063d48bb3e2c3e7f7ac8",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode.gameobjects/-/com.unity.netcode.gameobjects-1.0.0-pre.2.tgz"
      }
    }
  },
  "etag": "\"9d53c4c2ae39746a3cb077ed4daf75b3\"",
  "provider": "upm",
  "name": "com.unity.netcode.gameobjects",
  "description": "Netcode for GameObjects is a high-level netcode SDK that provides networking capabilities to GameObject/MonoBehaviour workflows within Unity and sits on top of underlying transport layer.",
  "_id": "com.unity.netcode.gameobjects",
  "cnTags": [],
  "time": {
    "2.5.1": "2025-09-16T03:13:01Z",
    "1.14.1": "2025-08-27T03:16:01Z",
    "2.5.0": "2025-08-22T03:13:01Z",
    "1.14.0": "2025-07-31T03:13:01Z",
    "1.13.1": "2025-07-22T03:13:24Z",
    "2.4.4": "2025-07-22T03:13:01Z",
    "2.4.3": "2025-06-28T03:13:00Z",
    "2.4.2": "2025-06-17T03:13:01Z",
    "2.4.1": "2025-06-14T03:16:00Z",
    "2.4.0": "2025-06-06T03:16:01Z",
    "1.13.0": "2025-05-01T03:13:01Z",
    "2.3.2": "2025-04-23T03:13:01Z",
    "2.3.1": "2025-04-15T03:13:01Z",
    "2.3.0": "2025-04-11T03:13:01Z",
    "1.12.2": "2025-01-25T03:13:01Z",
    "1.12.1": "2025-01-21T03:13:01Z",
    "1.12.0": "2024-12-30T03:18:43Z",
    "2.2.0": "2024-12-30T03:18:39Z",
    "2.1.1": "2024-10-21T09:42:31Z",
    "2.0.0": "2024-09-16T17:14:51Z",
    "2.0.0-pre.4": "2024-08-22T12:03:11Z",
    "1.11.0": "2024-08-22T11:59:38Z",
    "2.0.0-pre.3": "2024-07-29T11:40:55Z",
    "1.10.0": "2024-07-25T18:06:31Z",
    "2.0.0-pre.2": "2024-06-24T12:47:05Z",
    "2.0.0-pre.1": "2024-06-20T09:27:07Z",
    "2.0.0-exp.5": "2024-06-03T21:27:39Z",
    "2.0.0-exp.4": "2024-05-31T16:46:34Z",
    "1.9.1": "2024-04-23T07:34:57Z",
    "2.0.0-exp.2": "2024-04-04T09:22:38Z",
    "1.8.1": "2024-02-14T10:37:30Z",
    "1.8.0": "2024-01-08T10:14:13Z",
    "1.7.1": "2023-11-24T10:03:54Z",
    "1.7.0": "2023-10-23T14:23:08Z",
    "1.6.0": "2023-08-25T09:55:28Z",
    "1.5.2": "2023-07-27T08:52:38Z",
    "1.5.1": "2023-06-12T15:10:30Z",
    "1.4.0": "2023-04-21T08:17:35Z",
    "1.3.1": "2023-04-03T12:52:29Z",
    "1.2.0": "2022-12-09T19:37:06Z",
    "1.1.0": "2022-10-20T09:28:51Z",
    "1.0.2": "2022-09-13T16:24:04Z",
    "1.0.1": "2022-08-25T16:02:37Z",
    "1.0.0": "2022-06-29T15:47:01Z",
    "1.0.0-pre.10": "2022-06-22T20:48:37Z",
    "1.0.0-pre.9": "2022-05-10T17:19:47Z",
    "1.0.0-pre.8": "2022-04-28T02:51:59Z",
    "1.0.0-pre.7": "2022-04-07T02:10:29Z",
    "1.0.0-pre.6": "2022-03-03T05:23:55Z",
    "1.0.0-pre.5": "2022-01-28T23:33:54Z",
    "1.0.0-pre.4": "2022-01-06T21:08:14Z",
    "1.0.0-pre.3": "2021-11-02T20:31:26Z",
    "1.0.0-pre.2": "2021-10-20T17:14:15Z"
  }
}
