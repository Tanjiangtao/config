{
  "dist-tags": {
    "latest": "1.9.0"
  },
  "versions": {
    "1.9.0": {
      "name": "com.unity.netcode",
      "version": "1.9.0",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.5",
        "com.unity.transport": "2.5.3",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.9/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "7906a2acb8d5b3605b4a3c98b2df8475fc1b9402",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.9.0.tgz"
      },
      "unityRelease": "20f1",
      "_upm": {
        "changelog": "### Added\n\n* `GenerateTestsForBurstCompatibility` test coverage - and `ToString` overloads - of `ToFixedString` methods.\n* **Behaviour Breaking Change:** `GhostSendSystemData.PercentReservedForDespawnMessages` denoting the percentage of the snapshot capacity reserved for ghost despawn messages, with a default value of 33% (i.e. one third of the snapshot). This replaces the internal const of 100 ghosts.\n* A clickable link directing users where to disable Batched Tick Warnings.\n* New + and - buttons for automatic thin client creation in the PlayMode Tools window.\n* Bounds checks to `NetworkDriverStore` and `NetworkDriverStore.Concurrent` driver accessors.\n\n### Changed\n\n* Marginally reduced the bandwidth consumption of the `GID` and `SpawnTick` values of ghosts within snapshots, on average.\n* **API Breaking Change:** The `PrefabDebugName.Name` has now been fully deprecated, reducing archetype chunk sizes, increasing per-chunk entity capacity for ghost instances.\n* Best practice on GhostOwnerIsLocal usage. Server-only world behaviour is now undefined and might be changed in future versions. GhostOwnerIsLocal should only be used in client logic. To find owned ghosts in prediction logic, please make sure to strip your input components so they only appear on predicted ghosts.\n* Best practice on NetcodeServerRateManage.WillUpdate. Should now use NetworkTime.NumPredictedTicksExpected server side.\n* Significant internal refactoring for upcoming Single World Host feature.\n* The importance visualizer setting name for \"Per Entity Spatial Chunk Structure\" has been changed to \"Per Chunk\". This does not change the behavior, the name is only changed to more accurately reflect the underlying data that is being visualized.\n* Made `NetworkDriverStore` methods readonly, where possible.\n\n### Fixed\n\n* The analyzer to warn about using the `Simulate` component while ignoring enabled state has been fixed to correctly warn when using SystemAPI.Query().WithAll<Simulate>()` and similar calls.\n* Issue where the ghost data writes could fail while gathering the host migration data (now it will always grow correctly).\n* `Allocator.Persistent` memory leaks caused by `ImportanceDrawerSystem.cs`.\n* `ClampPartialTicksThreshold` now displays correctly in the `NetCodeConfig`.\n* **Behaviour Breaking Change:** Ghost despawn messages are now added to the snapshot in a round-robin priority order, where up to 2 despawn messages can be \"in-flight\" for a single ghost at once. Old behaviour was to send up to 100 ghostIds per snapshot, where each despawn was sent up to 5 times in a row before the next 100 could be added. Delta-compression has also been significantly improved. This new approach significantly improves despawn throughput, while also significantly reducing despawn bandwidth consumption.\n* **Behaviour Breaking Change:** The minimum `DefaultSnapshotPacketSize` is now 100 bytes, up from 1 byte.\n* Incorrectness in ghost despawn message handling, leading to missed despawns, and rare snapshot errors.\n* Hardened snapshot receive logic to expect exact `dataStream.GetBitsRead()` correctness, and used it to fix a (harmless) incorrectness when a chunk attempts to write its first ghost into the snapshot, but fails due to exceeding the stream capacity.\n* Potential dependency error with importance visualization.\n* Broken table on PlayMode Tool documentation page."
      }
    },
    "1.8.0": {
      "name": "com.unity.netcode",
      "version": "1.8.0",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.5",
        "com.unity.transport": "2.5.3",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.8/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "2fb2edf0390f170cab588f431ef7d268b848750b",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.8.0.tgz"
      },
      "unityRelease": "20f1",
      "_upm": {
        "changelog": "### Added\n\n* The Playmode Tool's Importance Visualizer drawer that helps visualize Importance Scaling outcomes.\n* The `GhostDistancePartitioningSystem.AutomaticallyAddGhostDistancePartitionSharedComponent`, which allows you to opt-out of the default behaviour (of always adding a `GhostDistancePartitionShared` to all valid ghost instances), enabling you to filter your importance scaling on the existence of this shared component (without having to rip out the entire implementation).\n* Test coverage of `GhostImportance.BatchScaleImportanceFunction` and `GhostImportance.ScaleImportanceFunction` has been improved (via NetcodeSamples tests), particularly in cases where the `GhostDistancePartitionShared` (or user-code equivalent) is only added to a subset of all ghosts (i.e. used as a filter).\n* Support for Forced Input Latency via `ClientTickRate.ForcedInputLatencyTicks`, with new fields `NetworkTime.InputTargetTick` and `NetworkTime.EffectiveInputLatencyTicks`, and new input system `ApplyCurrentInputBufferElementToInputDataForGatherSystem<TInputComponentData, TInputHelper>` (which was needed to correctly handle `IInputComponentData` incremental values).\n* `NetworkTime.NumPredictedTicksExpected` denotes the (un-batched) number of predicted ticks that the client is expected to run within this prediction loop update.\n* [Experimental] Server and Client Profiler Modules for the Unity Profiler Window as an alternative to the web profiler. Adds new stats and includes per-component stats. Requires Unity 6 or newer. Set the script define NETCODE_PROFILER_ENABLED to enable this feature.\n\n### Changed\n\n* **Behaviour Breaking Change:** `GhostDistanceImportance` scale functions no longer multiply the `baseImportance` by 1000, as that is now performed automatically by the `GhostSendSystem` (see new `GhostSystemConstants.ImportanceScalingMultiplier` constant), removing the final importance 1000x discrepancy between ghost chunks that use importance scaling, and ones that don't.\n* Input systems that write the `NetworkTime.ServerTick` into `AddCommandData` calls should instead use `InputTargetTick` for correctness. This value only differs from `ServerTick` when input latency is encountered (see `ForcedInputLatencyTicks` and `MaxPredictAheadTimeMS`).\n* `NetworkTime.ToFixedString` output has been extended to reflect the new Forced Input Latency data.\n* Updated com.unity.transport dependency to 2.5.3 from 2.4.0\n\n### Fixed\n\n* Instead of constantly mispredicting, `MaxPredictAheadTimeMS` will now correctly add forced input latency to the client when said clients RTT is higher than this value.\n* A potential crash with buffers and prediction switching stripping when your prefab contained a non-zero sized IBufferElementData that was marked for prediction/interpolation only. When restoring any buffer to their prefab value, the wrong length was used, potentially leading to a memcpy overwriting memory."
      }
    },
    "1.7.0": {
      "name": "com.unity.netcode",
      "version": "1.7.0",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.5",
        "com.unity.transport": "2.4.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.7/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "fe22aba4e18120bda30c03db2be5ba30ae633665",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.7.0.tgz"
      },
      "unityRelease": "20f1",
      "_upm": {
        "changelog": "### Added\n\n* A warning will now appear if you have a query involving `Simulate` while ignoring enabled state with `EntityQueryOptions.IgnoreComponentEnabledState` in the prediction loop.\n\n### Changed\n\n* Removed `ENABLE_HOST_MIGRATION` define which hid the host migration feature, it's now enabled by default. This also enables by default the `NetworkStreamIsReconnected` component which works without host migration.\n* Refactor host migration API\n  * Removed `MigrateDataToNewServerWorld`/`ConfigureClientAndConnect` helper functions. They'll be in the docs and sample instead.\n  * Renamed `HostMigrationUtility`->`HostMigrationData` and in that class renamed `Get/SetHostMigrationData` to `Get/Set` (class only contains data methods) with parameters reflecting directionality of data buffer and world. Removed `TryGetHostMigrationData`, use `Get` instead (native list version).\n  * Removed `DataStorageMethod` as it no only has one enum value.\n* The ghost component serialization method in the host migration feature changed to a much better performing one.\n\n### Fixed\n\n* Issue where `PreparePredictedData` was not being called on `GhostPlayableBehaviour`, breaking `GhostAnimationController` functionality.\n* Issue where `NetCodeConfig.EnableClientServerBootstrap` was not visible within the `NetCodeConfig`.\n* Issue when running a webgl player where you could not connect or receive connections from non-webgl platform players."
      }
    },
    "1.6.2": {
      "name": "com.unity.netcode",
      "version": "1.6.2",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.5",
        "com.unity.transport": "2.4.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.6/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "6e0b1c9336703bc0149c3f4aedd8db18e1e52e8e",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.6.2.tgz"
      },
      "unityRelease": "20f1",
      "_upm": {
        "changelog": "### Added\n\n* `UnityEngine.Time.frameCount` is appended to netcode packet `timestamp` logs using format: `[Fr{0}]`.\n\n### Changed\n\n* The client now sends - as part of its command data - some extra information regarding the command tick. In particular, it informs the server if the current command is for a full or partial update/tick. This ensure a more proper time-sync, and avoids mis-predictions.\n\n### Fixed\n\n* Adding `GhostAuthoringComponent` will now work properly for a prefab that is opened (double clicked instead of just selected).\n* Issue preventing static-optimized, not pre-spawned ghosts from spawning on clients when their first serialization result was 'zero-change' against a baseline value of `default(T)`. They'd previously only be sent for the first time after changing.\n* **Project Breaking Change:** Regenerated the GUID for `Packages/com.unity.netcode/Tests/Editor/Physics/Unity.NetCode.Physics.Editor.Tests.asmdef` so that it would no longer clash with `Packages/com.havok.physics/Plugins/Android/Havok.Physics.Plugin.Android.asmdef`. Any assemblies attempting to reference **Unity.NetCode.Physics.Editor.Tests** by GUID `d8342c4acf8f78e439367cff1a5e802f` will need to be changed to `bec3f262d6e6466eb2c61661da550f47`.\n* An issue - due to improper time syncing in between the client and server - especially when using IPC, causing multiple side effects:\n  * the client was typically only sending commands to the server for partial ticks, not full ticks, causing mis-predictions.\n  * the client was slightly behind the server, thus receiving new snapshots slightly in advance, and skipping running the `PredictedSimulationSystemGroup` for one frame or more, causing jittery and noticeable artefacts.\n* **Potential Behaviour Breaking Change:** GhostInstance's GhostType is now set with the same valid value for both client and server prespawned instances. (Previously, this was always kept at an initial -1 value server side and never initialized). This way is now more consistent behaviour between client and server."
      }
    },
    "1.6.1": {
      "name": "com.unity.netcode",
      "version": "1.6.1",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.5",
        "com.unity.transport": "2.4.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.6/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "de906627a8109618e16a6b33e2512ae6dbc12497",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.6.1.tgz"
      },
      "unityRelease": "20f1",
      "_upm": {
        "changelog": "### Added\n\n* Two new entity command buffer systems that run at the beginning and end of the `PredictedSimulationSystemGroup` respectively: `BeginPredictedSimulationCommandBufferSystem` and `EndPredictedSimulationCommandBufferSystem`.\n* A new internal `PredictedSpawningSystemGroup`, running after the `EndPredictedSimulationCommandBufferSystem`, created to guarantee that when a new snapshot is received from server, all new ghosts are spawned and ready to receive new data.\n* New documentation regarding the NetworkDriverStore architecture, setup and how to use it in conjunction with Unity.Relay.\n* Experimental host migration feature added, enabled with the ENABLE_HOST_MIGRATION define but otherwise hidden.\n* With ENABLE_HOST_MIGRATION defined, when a client reconnects to a server after disconnecting the connection entity on both sides will receive a `NetworkStreamIsReconnected` component. An internal unique ID is added to connections to track this behaviour.\n* The ability to define a smaller `GhostSystemConstants.SnapshotHistorySize` value via compiler define `NETCODE_SNAPSHOT_HISTORY_SIZE_6` or `NETCODE_SNAPSHOT_HISTORY_SIZE_16`. These values are well suited for larger scale use-cases where server memory is constrained, and snapshot sends of individual ghosts are relatively infrequent.\n* Support for combining Ghost Relevancy with Ghost Importance Scaling via new `PrioChunks.isRelevant` field, [enabling a fast-path for relevancy calculations](https://docs.unity3d.com/Packages/com.unity.netcode@latest?subfolder=/manual/optimizations.html#relevancy-fast-path-via-importance-scaling).\n* Analytics to netcode tools to better understand their usage.\n\n### Changed\n\n* **Behaviour Breaking Change:** Predicted spawned ghosts for partial ticks skip restoring the state from the backup (and instead continue prediction from their spawn state) when the last backup state tick is identical to the spawn tick, as no data has changed.\n* **Behaviour Breaking Change:** Reduced the complexity (and performance overhead) of the `GhostCount.GhostCountOnServer` calculations internally. Note that this value is (and always has been) an approximation.\n* IsReconnected split into NetworkStreamIsReconnected for reconnected connections and IsMigrated for re-spawned ghosts (Host Migration).\n* Moved host migration related types into a `Unity.Netcode.HostMigration` namespace, renamed the `HostMigration` class to `HostMigrationUtility` so it works in the new namespace.\n* Prespawn ghost IDs will now be preserved between host migrations\n* Client connection `NetworkIDs` are now preserved between host migrations.\n\n### Fixed\n\n* **Behaviour Breaking Change:** Incorrect state serialized inside the `SnapshotDataBuffer` for predicted spawned ghost on the client when spawned inside the prediction loop. The `PredictedGhostSpawnSystem` is now updated also as part of the prediction loop (inside the `PredictedSpawningSystemGroup`) to ensure that any predicted spawned ghosts on the client are correctly initialized at the tick they are spawned, and not with partial tick state.\n* Issue where predicted spawned ghosts re-simulated from the wrong tick when configured to rollback to their `spawnTick` and are spawned inside the prediction loop. They are now restored using the corrected full tick state, rather than the erroneous partial tick state.\n* Enable creating and initializing server drivers when using WebGL to enable self-hosting cases using relay. Many methods were under conditional compilation flags and removed from the WebGL build and not usable outside the editor.\n* All the unmanaged systems present in the FixedStepSimulationSystemGroup that have a direct or indirect update dependency to the PhysicsSystemGroup are now correctly moved to the PredictedFixedStepSimulationSystemGroup. This is a **Behaviour Change** in respect the previous versions, where all the unmanaged systems continued to stay inside the fixed update group, regardless of the dependency of update order.\n* An issue with Mutiplayer PlayModeTool window, throwing exceptions when docked after a domain reload. The i"
      }
    },
    "1.4.1": {
      "name": "com.unity.netcode",
      "version": "1.4.1",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.5",
        "com.unity.transport": "2.4.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.4/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "30f2ac451a68f0303751116274281005f67421b0",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.4.1.tgz"
      },
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Fixed\n\n* \"Size limitation on snapshot did not prevent all errors\" and improper serialization of a ghost group root when the group is empty and the available space in the data stream is not enough to encode the length of the group (0, that takes 2 bits).\n* Missing reset of the entity sent state when a group fail to serialize. The serialized children entity were incorrectly reported to be sent, potentially causing improper baseline used by the server to delta compress the data."
      }
    },
    "1.5.1": {
      "name": "com.unity.netcode",
      "version": "1.5.1",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.5",
        "com.unity.transport": "2.4.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.5/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "3febe9d26bb9e25ccfc18738571a38a83102c001",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.5.1.tgz"
      },
      "unityRelease": "20f1",
      "_upm": {
        "changelog": "### Added\n\n* Experimental host migration feature added, enabled with the ENABLE_HOST_MIGRATION define but otherwise hidden.\n* With ENABLE_HOST_MIGRATION defined, when a client reconnects to a server after disconnecting the connection entity on both sides will receive a `NetworkStreamIsReconnected` component. An internal unique ID is added to connections to track this behaviour.\n\n### Changed\n\n* IsReconnected split into NetworkStreamIsReconnected for reconnected connections and IsMigrated for re-spawned ghosts (Host Migration).\n\n### Fixed\n\n* An issue with Mutiplayer PlayModeTool window, throwing exceptions when docked after a domain reload. The issue was due to because of an access to `EditorPrefs` and `Application.productName` while restoring the window state.\n* Issue where, during host migration, ghosts could be migrated with a 0 id and type. Causing various issues when instantiated on the new host.\n* Crash which could happen after host migrations when the server is deploying the host migration data.\n* Issue with prespawn prefab entity list initialization after a host migration, the ordering of the prespawn ghosts could be shifted by one because of the internal `PrespawnSceneList` entity prefab creation. This would result in *invalid ghost type X (expected X+1)* off by one style errors."
      }
    },
    "1.5.0": {
      "name": "com.unity.netcode",
      "version": "1.5.0",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.5",
        "com.unity.transport": "2.4.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.5/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "ceae16c3c59d70ed69be626e92b7c65e5e8bbbee",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.5.0.tgz"
      },
      "unityRelease": "20f1",
      "_upm": {
        "changelog": "### Added\n\n* The `AutomaticThinClientWorldsUtility` class, which facilitates runtime creation (and management) of thin clients. It is available to user-code, and when in `PlayType.Server`.\n* `ClientTickRate.NumAdditionalClientPredictedGhostLifetimeTicks`, which can be used to fine-tune/alleviate a common issue where **correctly predicted** client predicted spawns are de-spawned by the netcode package **before** they have an opportunity to be classified against their server-side counterparts, which is a common occurrence when said spawns replicate later than expected (which can happen for a variety of reasons). The default behaviour is to have them despawn if they have not been classified by the `NetworkTime.InterpolationTick`. This value extends this threshold by this many additional ticks. However, if ghosts are frequently unable to replicate by the `NetworkTime.InterpolationTick`, then your interpolation buffer may be too small. I.e. Consider tweaking `ClientTickRate.InterpolationTimeMS` (or the `InterpolationTimeNetTicks` equivalent) first. For further reading, refer to the [interpolation docs here](Documentation~/interpolation.md).\n* Exposed the `k_TickPeriod` range constant (defaulting to `±5 ticks`) in the default classification system as `ClientTickRate.DefaultClassificationAllowableTickPeriod`. This may help fix esoteric default classification related errors, particularly when the server is frequently batching ticks (leading to large tick deltas). That said; prefer writing your own classification system, which can take advantage of project-specific `GhostField` data to more accurately classify predicted spawns.\n* `ClientServerBootstrap.AllNetCodeWorldsEnumerator` and `ClientServerBootstrap.AllClientWorldsEnumerator` helpers.\n* Doc on gotcha with custom template serialization and byte alignment.\n* Tests (and a packet dump entry & warning log) covering the case where clients are impacted by the unfathomably rare `MaxBaselineAge` edge-case.\n* FixedList replication support for RPC, Command, and components (IComponentData, IBufferElementData, IInputComponentData). Some limitation apply, see the doc for further info.\n* unsafe fixed buffer replication support for RPC, Command, and components (IComponentData, IBufferElementData, IInputComponentData). Some limitation apply, see the doc for further info.\n* GhostAuthoringComponent.UseSingleBaseline`, denoting that this prefab type should force 'single baseline' delta-compression during serialization, which can lead to significant CPU savings at the cost of marginally increased bandwidth consumption, particularly for ghosts with many components, and/or with many GhostField's which rarely change.\n* new templates for serializing bytes and short using 8 and 16 bits instead of a full 32 bit data, when they are sent uncompressed.\n* Static-optimized ghosts now report their `CanUseStaticOptimization` (CUSO) status to the packet dump (including the `ComponentType` of the first detected changed version), which should aid debugging efforts.\n* Broad packet dump data improvements, at the cost of worsened server performance when enabled.\n* missing documentation in regards what are the fields types for which prediction errors are reported.\n* Documentation and test coverage regarding the `GhostGroup` feature.\n* Test and doc coverage of `[GhostField]` C# unions (via `[StructLayout(LayoutKind.Explicit)]`), which are supported (with many caveats).\n* Test coverage of `NetworkStreamSnapshotTargetSize`, UTP's `MaxMessageSize`, and `GhostSystemConstants.MaxSnapshotSendAttempts`.\n\n### Changed\n\n* **Behaviour Breaking Change:** The client will now ignore the `HandshakeApprovalTimeoutMS` until it has completed the `Handshake` phase, as it should respect this servers value, rather than assuming its own. Relatedly: Be aware that client worlds will not fetch the `ClientServerTickRate` values from a `NetCodeConfig.Global` config, they will only accept values sent to it by the server during handshake.\n* **Behaviour Breaking Change:** The `AddCommandData` method will now reject inputs with `Invalid` Tick v"
      }
    },
    "1.5.0-exp.101": {
      "name": "com.unity.netcode",
      "version": "1.5.0-exp.101",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.9",
        "com.unity.transport": "2.4.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.5/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "0f2dc8587fe31a940429b5e2c06ed67c7eb20f6b",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.5.0-exp.101.tgz"
      },
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Fixed\n\n* Fix broken link in the documentation."
      }
    },
    "1.5.0-exp.100": {
      "name": "com.unity.netcode",
      "version": "1.5.0-exp.100",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.9",
        "com.unity.transport": "2.4.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.5/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "918ce2f29ede7a4d5faf43bcc15070a6d0584954",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.5.0-exp.100.tgz"
      },
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Changed\n\n* Big documentation overhaul for host migration feature.\n* Don't add input component buffers to host migration data. These can cause issues after host migration when they have inputs event counters set to some value where the migrated clients will be start counts starting from 0. The increment/decrement mechanism breaks.\n* Ghost IDs and spawn ticks in the `GhostInstance` component will now be preserved for non-prespawn ghosts between host migrations.\n\n### Fixed\n\n* UpdateSize in the `HostMigrationStats` component is now correct when using compression\n* Issue with the native list size being incorrectly re-sized in `HostMigration.GetHostMigrationData`\n* Test failures when packet dumps are enabled\n* Issue where old prespawn snapshot data would still exist for clients after a host migration causing deserialization errors."
      }
    },
    "1.5.0-exp.2": {
      "name": "com.unity.netcode",
      "version": "1.5.0-exp.2",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.9",
        "com.unity.transport": "2.4.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.5/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "7266eeec02be299b657b611ccb0ec636408f71e1",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.5.0-exp.2.tgz"
      },
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Changed\n\n* Added more sections to the documentation with information about what to look out for during a host migration.\n* Renamed `HostMigration.MigrateServerData` to `HostMigration.SetHostMigrationData` and made it public. It's the counterpart to `GetHostMigrationData`. `MigrateDataToNewServerWorld` is now optional to use.\n* Added a world parameter to the public APIs `GetHostMigrationData`/`TryGetHostMigrationData`.\n\n### Fixed\n\n* Issue where the relay connection setup would fail after host migrations. Stopped using fixed listening ports on the server.\n* Issue with incorrect host migration size being uploaded. When the host migration data blob was small it would cause errors during deployment.\n* Issue when the host configuration part of the migration data was over 1KB in size."
      }
    },
    "1.5.0-exp.1": {
      "name": "com.unity.netcode",
      "version": "1.5.0-exp.1",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.9",
        "com.unity.transport": "2.4.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.5/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "f02267ec0b338c0d5f772c688973e74f8b14ce92",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.5.0-exp.1.tgz"
      },
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Added\n\n* The `AutomaticThinClientWorldsUtility` class, which facilitates runtime creation (and management) of thin clients. It is available to user-code, and when in `PlayType.Server`.\n* `ClientTickRate.NumAdditionalClientPredictedGhostLifetimeTicks`, which can be used to tune down a common issue where (correctly predicted) client predicted spawns are despawned by the netcode package before they can be classified against their server-side counterparts (i.e. which may arrive shortly after).\n* Exposed the implicit `k_TickPeriod` range constant (defaulting to `±5 ticks`) in the default classification system as `ClientTickRate.DefaultClassificationAllowableTickPeriod`. This may help fix esoteric default classification related errors, particularly when the server is frequently batching ticks (leading to large tick deltas). Prefer writing your own classification system, though, which can take advantage of project-specific GhostField data.\n* Host migration feature for simple projects. APIs are provided to save the current server world state, mostly related to current ghosts (`HostMigration.GetHostMigrationData`) and then to deploy a given server state data blob to a new server world (`HostMigration.MigrateDataToNewServerWorld`). This can be used with the Unity Lobby service to better facilitate host migrations with session persistence. See Host Migration section in the manual for more information.\n\n### Changed\n\n* **Behaviour Breaking Change:** The client will now ignore the `HandshakeApprovalTimeoutMS` until it has completed the `Handshake` phase, as it should respect this servers value, rather than assuming its own. Relatedly: Be aware that client worlds will not fetch the `ClientServerTickRate` values from a `NetCodeConfig.Global` config, they will only accept values sent to it by the server during handshake.\n* **Behaviour Breaking Change:** The `AddCommandData` method will now reject inputs with `Invalid` Tick values, preventing runtime exceptions in rare cases.\n* **Behaviour Breaking Change:** The `DefaultDriverConstructor` no longer removes the IPC driver when `RequestedPlayType == Server`, as thin clients can now be instantiated on DGS builds (assuming supported by user-code).\n* **Value Breaking Change:** Increased the Lag Compensation Physics `CollisionWorld` history buffer capacity from 16 ticks to 32 ticks, as the previous buffer was too small for some use-cases. However, the default value (when using `LagCompensationConfig.ServerHistorySize:0`) remains at 16. Increasing this will allocate more collision worlds, increasing the memory consumption on the `ServerWorld`, particularly with very large physics scenes, and therefore should only be done if you intend to support high-ping players (i.e. you're often seeing `PhysicsWorldHistorySingleton.GetCollisionWorldFromTick` clamp a clients history to the last/oldest stored value). Also note the change to the public const `PhysicsWorldHistory.RawHistoryBufferMaxCapacity` (from 16 to 32).\n\n### Fixed\n\n* Issue where disconnecting while in the process of spawning prefabs raised the following error: \"Found a ghost in the ghost map which does not have an entity connected to it. This can happen if you delete ghost entities on the client.\"\n* Overzealous RPC validation error when broadcasting an RPC on the same frame as a disconnection.\n* The `AutomaticThinClientWorldsUtility` now allows you to disable automatic in-editor thin client creation by setting `BootstrapInitialization` and `RuntimeInitialization` to null during bootstrapping.\n* Removed the limitation preventing thin clients from being created when in mode `Server`, including DGS builds. Ensure thin client systems are in assemblies that will be loaded on the server.\n* Bug causing user-created thin client worlds to be automatically cleaned up by the netcode package due to `RequestedNumThinClients`. Now, only worlds which are created via the `AutomaticThinClientWorldsUtility` (or manually added by user-code to its tracking list) will be automatically disposed.\n* Inconsistencies in documentation around RollbackPredictionOnSt"
      }
    },
    "1.4.0": {
      "name": "com.unity.netcode",
      "version": "1.4.0",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.entities": "1.3.5",
        "com.unity.transport": "2.4.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.4/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "e1dc18e490f07bc7a4c3c34b222bc837b9520936",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.4.0.tgz"
      },
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Added\n\n* A togglable warning to display when the server is batching ticks.\n* PhysicGroupRunMode property to the NetcodePhysicsConfigAuthoring to let the user configure when the predicted physics loop should run.\n* PredictionLoopUpdateMode property to the ClientTickRate to let the user configure when the PredictionSimulationSystemGroup should update. In particular, it is allow now to have the prediction loop running all the time, regardless of the presence of predicted ghost.\n* `GhostSendSystemData.MaxIterateChunks`, which denotes the maximum number of chunks the `GhostSendSystem` will iterate over in a single tick, for a given connection, within a single `NetworkTickRate` snapshot send interval. It's an optimization in use-cases where you have many thousands of static ghosts (and thus hundreds of static chunks which are iterated over unnecessarily to find ones containing possible changes), but can lead to empty snapshots if set too low. Pairs well with `MaxSendChunks`, and defaults to 0 (OFF) to avoid a behaviour change.\n* Many Unity Transport Package `NetworkConfigParameters` have been added to the `NetCodeConfig`. They are ignored if using a custom driver, unless said driver calls the new static method `DefaultDriverBuilder.AddNetcodePackageNetworkConfigParameters`.\n* `ClientServerTickRate.SnapshotAckMaskCapacity` configures the length of the ack mask history (in `ServerTicks`). It is used by the snapshot system to determine whether or not a ghost has an acked baseline snapshot, and only queried when said chunk is attempting to be resent. Its new default (of 4096, up from 256) supports ~1.1 minutes (up from ~4.26 seconds) under default settings (i.e. assuming a `SimulationTickRate` of 60Hz). Increasing this value further can protect against the aforementioned snapshot acking errors when sending tens of thousands of ghosts to an individual client connection.\n* `GhostAuthoringComponent.MaxSendRate`, which denotes the maximum possible send frequency (in Hz) for ghost chunks of this ghost prefab type. Note, however, that other factors (like `NetworkTickRate`, ghost instance count, the use of <b>Static-Optimization</b> vs <b>Dynamic</b>, `Importance`, <b>Importance-Scaling</b>, `DefaultSnapshotPacketSize` etc.) will determine the final send rate. Use `MaxSendRate` to brute-force reduce the bandwidth consumption of your most impactful ghost types.\n* `GhostCountInstantiatedOnClient` and `GhostCountReceivedOnClient` to the `GhostCount` struct to differentiate ghosts which we have only received the data for, from fully instantiated ghosts (i.e. ghosts with entities). See deprecation entry and `PendingSpawnPlaceholder`.\n* The `AutomaticThinClientWorldsUtility` class, which facilitates runtime creation (and management) of thin clients. It is available to user-code, and when in `PlayType.Server`.\n\n### Changed\n\n* The error for `NetworkProtocolVersion` mismatches will now better indicate what exactly went wrong, and what steps can be taken to resolve the error.\n* Incremental UI improvement to the `MultiplayerPlayModeWindow` netcode worlds display. The server now lists ghost counts (details in tooltip), the client `GhostCount` singleton is now available via hovering over the ping tooltip (as it's often something you want to know), and the `DriverStore` drivers are now displayed consistently.\n* Re-enabled disabled LoadScenes_AllScenesShouldConnect and LoadScenes_NoScenesShouldLog tests randomly failing that were failing because of the CommandSendSystemGroup issue.\n* **Behaviour Breaking Change:** `GhostSendSystemData.MaxSendChunks` no longer limits the max number of chunks to iterate over (i.e. query) - unless `GhostSendSystemData.MaxIterateChunks` is zero - as it no longer counts cancelled chunk snapshot writes towards its total. Therefore, use `GhostSendSystemData.MaxIterateChunks` instead to denote that limit. This should lead to fewer emptier packets, particularly when used in conjunction with many static and irrelevant ghosts.\n* **API & Behaviour Breaking Change:** The netcode package `DefaultDriverConstructor` will now defau"
      }
    },
    "1.3.6": {
      "name": "com.unity.netcode",
      "version": "1.3.6",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.transport": "2.2.1",
        "com.unity.entities": "1.3.5",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Changed\n\n* Improved XML document for `NetworkStreamDriver.ConnectionEventsForTick`.\n* Updated entities packages dependencies\n\n### Fixed\n\n* an issue with netcode source generated files, causing multiple Burst.CompileAsync invocation, ending up in stalling the editor and the player for long time, and / or causing crashes.\n* Issue where `OverrideAutomaticNetcodeBootstrap` instances in scenes would be ignored in the Editor if 'Fast Enter Play-Mode Options' is disabled (i.e. when domain reloads triggered after clicking to enter play-mode).\n* Longstanding API documentation errors across Netcode for Entities API documentation."
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.3/manual/index.html",
      "dist": {
        "shasum": "7add295fd041f288872aca14ca66600f357655c2",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.3.6.tgz"
      }
    },
    "1.3.2": {
      "name": "com.unity.netcode",
      "version": "1.3.2",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "dependencies": {
        "com.unity.transport": "2.2.1",
        "com.unity.entities": "1.3.2",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Changed\n * Updated entities packages dependencies\n\n### Added\n\n* Significantly reduced bandwidth consumption of command packets (i.e. input packets), by a) converting the first command payload in each packet to use delta-compression against zero, b) by making the number of commands sent (per-packet) tied to the `TargetCommandSlack`, c) by delta-compressing the NetworkTicks using the assumed previous tick (which is a correct assumption in the common case), and d) by using a single `changeBit` if the previous command is exactly the same.\n* `ClientTickRate.NumAdditionalCommandsToSend` is a new field allowing you to configure how many additional commands to send to the server in each command (i.e. input) packet.\n* Support for dumping input commands into the `NetDebugPacket` dump, helping users visualize and diagnose bandwidth consumption. Implement the optional, burst-compatible method `ToFixedString` on your input components to see field data in your packet dumps, too.\n* A `NetworkSnapshotAck.CommandArrivalStatistics` struct, documenting (on the server, for each client) how many commands arrive, and how many commands arrive too late. These statistics can be used to inform and tweak `TargetCommandSlack` and `NumAdditionalCommandsToSend`.\n* Significantly expanded our automated test coverage for Lag Compensation. We now detect off-by-one-tick errors between the client and server's lag compensation resolutions.\n* `LagCompensationConfig.DeepCopyDynamicColliders` (defaulting to true) and `LagCompensationConfig.DeepCopyStaticColliders` (defaulting to false) configuration values, enabling you to control whether or not colliders are deep copied during world cloning, preventing runtime exceptions when querying historic worlds during Lag Compensation. Also see the specialized `PhysicsWorldHistorySingleton.DeepCopyRigidBodyCollidersWhitelist` collection.\n\n### Changed\n\n* `PhysicsWorldHistory` now clones collision worlds *after* the `BuildPhysicsWorld` step for the given `ServerTick`. This fixes an issue where the `CollisionWorld` returned by `GetCollisionWorldFromTick` is off-by-one on the server. It is now easier to reason about, as the data stored for `ServerTick` T now actually corresponds to the `BuildPhysicsWorld` operation that occurred on tick T (rather than T-1, which was the previous behaviour). We strongly recommend having automated testing for lag compensation accuracy, as this may introduce a regression, and is therefore a minor breaking change.\n* `PhysicsWorldHistory` now deep copies dynamic colliders by default (see fix entry). Performance impact should be negligible.\n\n### Fixed\n\n* Corrected `seealso` usage in XML package documentation.\n* Documentation improvements and clarifications on the following pages: command stream, ghost snapshots, spawning ghosts, logging, network connection, networked cube, prediction, and RPCs.\n* Lag Compensation issue in the case where an Entity - hit by a query against a historic lag compensation `CollisionWorld` fetched via `GetCollisionWorldFromTick` - has since been deleted. The colliders of dynamic ghosts are now deep cloned by default, preventing the blob asset assertions which would have otherwise been encountered here. You can also opt-into copying static colliders via the `LagCompensationConfig` or `NetCodePhysicsConfig` authoring (although the recommendation is to instead query twice; once against static geometry exclusively, using the latest collision world, then again using the hit position of the static query, against lag compensated dynamic entities).\n* Issue where non-power-of-2 History Buffer sizes would return incorrect entries when `ServerTick` wraps around.\n* an issue with iOS and WebGL AOT, causing the player throwing exceptions while trying to initialize the Netcode generated ghost serializer function pointers. The issue is present when using Burst 1.8 and Unity 6.0+\n* an issue with GhostGroup serialization, incorrectly accessing the wrong ghost prefab type in the GhostCollectionPrefab array.\n* an issue with buffer serialization when using GhostGroup, causing memory stomping at runtime (and exception thrown in the editor), due to the fact the required size for storing the buffer in the snapshot was calculated incorrectly. The root cause was the incorrect index used to access the GhostCollectionPrefab collection."
      },
      "upmCi": {
        "footprint": "e5b1dca67670175eeaa61f4876150e1f0d88af18"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.3/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "921920e681054c59b440cc1e2aef10f781dc4124"
      },
      "dist": {
        "shasum": "f014118a72146c0153797ac74ac178f75963639c",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.3.2.tgz"
      }
    },
    "1.2.4": {
      "name": "com.unity.netcode",
      "version": "1.2.4",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.1.0",
        "com.unity.entities": "1.2.4",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Changed\n* Updated entities packages dependencies"
      },
      "upmCi": {
        "footprint": "e2172de2037f6ded67e9d986fa04cc9795aaff35"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.2/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "3229c084d74b90980f151fe926f426ae38a63b44"
      },
      "dist": {
        "shasum": "9ed7af6727b9852f85bb3d67251392d172b6aba3",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.2.4.tgz"
      }
    },
    "1.3.0-pre.4": {
      "name": "com.unity.netcode",
      "version": "1.3.0-pre.4",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.2.1",
        "com.unity.entities": "1.3.0-pre.4",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Added\n\n* Optional UUID5GhostType property to the GhostCreation.Config struct, which allows you to provide your own unique UUID5 identifier when creating a ghost prefab at runtime, instead of relying on the auto-generated one (which uses the SHA1 of the ghost name).\n* NetworkStreamDriver.ResetDriverStore to properly reset the NetworkDriverStore\n\n### Changed\n\n* All Simulate component enable states are reset to using a job instead of doing that synchronously on the main thread. Reason for the change is the fact this was inducing a big stall at the end of the Prediction loop. However, the benefits is only visible when there are a large number of jobified workload.\n* Corrected incorrect/missing CHANGELOG entries across many previous versions.\n* Updated Burst dependency to version 1.8.16\n* Unified Multiplayer Project settings.\n* Moved menu items to a collective place to improve workflows. This removes the Multiplayer menu and integrates into common places Window, Assets/Create, right-click menus, etc.\n* The dependency on Unity Transport has been updated to version 2.2.1\n* Re-exposed `TryFindAutoConnectEndPoint` and `HasDefaultAddressAndPortSet`, with small documentation updates.\n* ConcurrentDriverStore and NetworkDriverStore.Concurrent are now public and you can use the NetworkDriverStore.Concurrent in your jobs to send/receive data."
      },
      "upmCi": {
        "footprint": "c8583843007a3693df56a732eb9b59f9417ac6a1"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.3/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "6b0c8d27a0224c9cf76032c48d1b981e9750f10d"
      },
      "dist": {
        "shasum": "8eca6323c9b03d4d48fc72bb5f371b941a9d6992",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.3.0-pre.4.tgz"
      }
    },
    "1.3.0-exp.1": {
      "name": "com.unity.netcode",
      "version": "1.3.0-exp.1",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.2.0",
        "com.unity.entities": "1.3.0-exp.1",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Added\n\n* The Multiplayer PlayMode Tools Window now calls synchronous `Connect` and `Disconnect` methods, and now shows the `Handshake` connection step. Handshake occurs when the client connection has been accepted by the server, but said client is awaiting a `NetworkId` assignment RPC from said server.\n* Possibility to optimise the ghost serialization and pre-serialization by registering a custom chunk serialization function pointer that will let users reason on a per-archetype and write the serialization code without requiring virtual methods (function pointer call indirection) and optimised for the use case.\n* Further clarifications, minor improvements, and fixes to the PlayMode Tools Window.\n* `DefaultRelevancyQuery` to specify general rules for relevancy without specifying it ghost by ghost.\n* Tooltips and additional info for the NetCodeConfig, supporting `ClientServerTickRate`, `ClientTickRate`, and `GhostSendSystemData`.\n* Method `EnablePacketLogging.LogToPacket`, allowing user-code to add custom events to the netcode per-connection packet dump.\n* An optional connection approval procedure so you can validate that a connection is allowed to connect before a network ID is assigned to it. Connection Approval requests can be sent by client to server via an IApprovalRpcCommand RPC. The server can validate the arbitrary payload included in the RPC. No other data is processed by the server until the connection is approved.\n* More documentation on prediction, edge cases to be careful about, interpolation, compression, physics ghost setup checklist and the general update loop.\n* Increased validation applied to RPC serialization (including better error logging). We now ensure their deserialized size is the expected number of bytes.\n* Test coverage for `windowSize: 64` for `ReliableSequencedPipelineStage`.\n* PredictedSpawnedGhostRollbackToSpawnTick property to the GhostAuthoringComponent to allow predicted ghost spawned by client to rollback and re-simulate their state starting from their spawn tick, until the authoritative spawn has been received from the server. The rollback only occurs if the client receives new snapshots from server that contains at least one predicted ghost.\n* Changed usage of NetworkParameterConstants.MTU to use user configurable NetworkParameterConstants.MaxMessageSize. This allows snapshot and command buffers to reference the correct value and scale buffers accordingly.\n* Exposed `NetworkStreamDriver.DriverStore` and `LastEndPoint`.\n* Copy-free accessors for `NetworkStreamDriver` instances (via `GetDriverInstanceRW` and `GetDriverInstanceRO`) and underlying drivers (via `GetDriverRW` and `GetDriverRO`), which are also now used internally. The struct copy originals have been weakly deprecated.\n* Support for serializing non-byte-aligned RPCs. I.e. You can now delta-compress RPC fields using the `IRpcCommandSerializer` by delta-compressing against hardcoded baseline values.\n\n### Changed\n\n* Added the full type name of the RPC component to the RPC entity name (behind \"NetcodeRPC_\" prefix).\n* The netcode RPC header size has now changed (from 9B to 5B per packet, plus either 10B or 4B per RPC, depending on `DynamicAssemblyList`).\n* The max size of a serialized RPC is now 8192 bytes (ushort.MaxValue bits), as we now send the bits written, to be able to validate that the exact number of bits were read in the `RpcSystem`.\n* Reduced bandwidth consumption of netcode's `RpcSetNetworkId` RPC payload.\n* Updated `com.unity.transport` dependency to version 2.2.0.\n* Fixed another issue with predicted ghosts spawned again inside the prediction loop, not rolling back to the backup or re-predicting from the spawn tick, after being initialized by the PredictedSpawnGhostSystem (because of command buffer delay), effectively mispredicting again the first full tick and subsequent partial, and making the backup also contain mispredicted information.\n* Renamed `RpcSetNetworkId` to `ServerApprovedConnection`.\n* The servers `Handshake` process is no longer instantaneous, resulting in a few extra ticks being required (typically) before a connection can be fully established (approximately 7 ticks, up from 4). See bug fix entry.\n* `NetCodeConnectionEvent`s are now raised on the server for the protocol version handshake process (the `ConnectionState.State.Handshake` enum value). See bug fix entry.\n* Reduced bandwidth consumption of netcode's `NetworkProtocolVersion` RPC.\n\n### Removed\n\n* NoScale function delegate.\n\n### Fixed\n\n* Compile error when having both com.unity.netcode and com.unity.dedicated-server package together.\n* Issue where disconnecting your own client (via a direct `Disconnect` call) would fail to recycle the `NetworkId` component, and fail to dispose of the Entity.\n* We now also correctly report and clean-up stale connections. I.e. Connections that are entered into invalid states by user-code.\n* Issue where the `CommandSendSystem` was attempting to send RPCs with stale connections.\n* some slow path in the normal ghost serialization that was causing many re-serialization of the same chunk, in case the chunk data was not fitting inside the temporary stream buffer. That was almost the norm in many cases, when the serialised entities are large enough (either because of the number of components or because of the size of them).\n* NetworkStreamConnection now holds an accurate connection state right after the call to driver's Connect, instead of having to wait a frame to get it updated.\n* Minor documentation issues.\n* InvalidOperationException: cases where EntityManager is part of an exclusive transaction we skip gathering analytics for its world.\n* Breaking change where NoScale function was removed.\n* Issue where the `NetCodeDebugConfig` would not reset to the `LogLevel` default (of `Notify`) if toggled ON, changed, then toggled OFF, during playmode.\n* Minor documentation errors and improving overall grammar.\n* Issue where `NetCodeConfig.Global` did not load correctly on first boot, if not selected in the Project assets window. If you have a global `NetCodeConfig` set in your PreloadedAssets Project Setting, we'll also auto-upgrade your project, moving the save to Project Settings (via `NetCodeClientAndServerSettings`).\n* Negative network delta time will skip updating the system group.\n* `NETCODE_NDEBUG` define compiler error, and related missing documentation.\n* Issue where two IInputComponentData with the same name but in different namespaces would result in conflicted generated code. Namespace is now taken into account for source gen.\n* Network emulation tooltip clarification.\n* Off-by-one error causing RPCs sent on the same tick as the `ProtocolVersion` RPC to be corrupted.\n* Language improvements to PredictedSimulationSystemGroup and ClientServerBootstrap.\n* Performance problems with GhostCollectionSystem, with large number of prefabs.\n* PredictedGhostSpawnSystem incorrectly set the offset for serialized buffer data inside the snapshot buffer, making that incompatible with the GhostUpdateSystem logic and causing wrong data potentially copied back to the entity buffer.\n* An issue with preserialized ghost, that were stomping component data with incorrect values.\n* an issue in GhostUpdateSystem that was incorrectly handling the GhostComponentAttribute.SendToOwner flag, causing during continuation and partial ticks replicated data being overwritten incorrectly for predicted ghosts.\n* An issue due to structural changes, that was causing a large number of prediction step performed by the client due to the fact a given ghost could not continue the current prediction from the last full ticks (either partial ticks or another full tick) because the entity data could not be found anymore in the prediction history buffer.\n* Issue where RPCs appeared on deleted connection entities, leading to user code runtime exceptions, where, occasionally, the `NetworkId` component could not be found on the `ReceiveRpcCommandRequest.SourceConnection` (as the connection was already disconnected).\n* the client was acknowledging to the server only the last received snapshot instead of the last 32 (this was used to defeat packet loss). This was affecting both the ability to correct use all the available baseline for delta compression, and multiple re-sending static optimized ghost.\n* Rendering issue in `GhostAuthoringInspectionComponent`, causing UI to right-clip.\n* Defensive fix for other rendering issue in `GhostAuthoringInspectionComponent`, causing the Refresh and auto-refresh buttons to not appear correctly.\n* Fixed check to early release allocations in the case where a ghost chunk has been reused. We now correctly free these chunks, reducing allocated memory overhead on the server.\n* Rotation glitch issue with prediction switching interpolation\n* Issue where RTT calculation would be incorrectly high when first connecting, especially with high packet loss.\n* Issue where running a netcode test would invalidate the `NetworkTimeSystem.TimestampMS` for subsequent play-mode runs, when Domain Reloads are disabled, leading to `0±0` ping readout (and related issues).\n* an issue with predicted spawned ghost and enableable components state not being saved correctly in the snapshot buffer when the PredictedSpawnGhostRequest is processed and the entity initialized.\n* an issue with pre-spawned ghost and enableable components state not being saved correctly in the predicted spawn baseline buffer.\n* exception thrown by the `GhostPresentationGameObjectSystem` when an entity is destroyed. The system was accessing the tracked `GameObject` list using an invalid index in cases where the removed `GameObject` was the last element.\n* Exceptionally rare infinite loop crash in `SetupDataAndAvailableBaselines`.\n* an issue in the PredictedGhostHistorySystem, that was storing the backup of newly spawned ghost using the wrong ghost type and serializer. It was causing weird problem later in the GhostUpdateSystem, in case predicted spawned ghost are eligible to start re-simulating from the spawn tick. In particular, crashes, big memory allocation or other component data could be clobbered with invalid data.\n* an issue with predicted spawned not restored from backup correctly whence spawned immediately at the tick they are supposed to (no command buffer) inside a system executing in the prediction loop (using the IsFirstTimePredictedTick condiition). The snapshot data at spawn, that is initialized the next frame, it is not going to be a full tick, but a partial tick, causing more misprediction. The backup in general should be preferred in this case, because at least it is aligned with the last full tick.\n* broken multiphysics sample particles colliding with the player character only on the client (they are supposed to be only visual) because of a missing WorldIndex authoring component.\n* `IRpcCommandSerializer<T>` can now be used with structs implementing `IRpcCommand` and `IApprovalRpcCommand` (rather than just `IComponentData`). I.e. The limitation is restricted, and code-gen will handle this case correctly (by skipping the generation of the RPC systems and serializer).\n* We now (correctly) wait for the server to receive a valid protocol version from the client before moving said client from the `Handshake` state to the `Connected` state. Therefore; `Handshake` events are now correctly raised on the server.\n* The protocol version handshake process can now correctly timeout (see: `HandshakeApprovalTimeoutMS`) in the exceptional case where the server does not receive a `RequestProtocolVersionHandshake` RPC from the client. If the approval flow is enabled, this single timeout counter is used for both states.\n* Removed the hardcoded 'Protocol Version' RPC logic, simplifying RPC sending and receiving. Netcode's handshake RPCs now use the existing `IApprovalRpcCommand` flows."
      },
      "upmCi": {
        "footprint": "f9c50a7c07f7b59c52e6dcfacbc808c0d7736473"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.3/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "d5bde5f043ad76defc80bbc6be1f8630d14b108d"
      },
      "dist": {
        "shasum": "62bfa0a2b2526f86a0df2155947abb8e3af96697",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.3.0-exp.1.tgz"
      }
    },
    "1.2.3": {
      "name": "com.unity.netcode",
      "version": "1.2.3",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.1.0",
        "com.unity.entities": "1.2.3",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Changed\n* Updated entities packages dependencies"
      },
      "upmCi": {
        "footprint": "3ef2bbdc2c1c22f3f95fbbe7ab63dd5b34907d8b"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.2/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "0e866f29be5f7742acc14fad89281f547835ef01"
      },
      "dist": {
        "shasum": "0ce9bcee38895bcb6566b5b882eeed0624725730",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.2.3.tgz"
      }
    },
    "1.2.1": {
      "name": "com.unity.netcode",
      "version": "1.2.1",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.1.0",
        "com.unity.entities": "1.2.1",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Changed\n\n* Updated Burst dependency to version 1.8.13\n* Updated entities packages dependencies"
      },
      "upmCi": {
        "footprint": "2a3fa1e508d74a00333496f3d563d6cc7c3bf5ad"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.2/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "6ecf7a215623cca37079c6f1a3e6f2f686c91721"
      },
      "dist": {
        "shasum": "5139da8409a95f5895f9bd5f2f6ff454771e23b4",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.2.1.tgz"
      }
    },
    "1.2.0": {
      "name": "com.unity.netcode",
      "version": "1.2.0",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.1.0",
        "com.unity.entities": "1.2.0",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Changed\n*Release Preparation"
      },
      "upmCi": {
        "footprint": "14f73fe31687e3259c784ff7454311310d71c70f"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.2/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "ea4236421d61011e37e71d22108c5e4e70cf71d7"
      },
      "dist": {
        "shasum": "4a8018a1b7bdd5bc478c0c351367430ccdd9085b",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.2.0.tgz"
      }
    },
    "1.2.0-pre.12": {
      "name": "com.unity.netcode",
      "version": "1.2.0-pre.12",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.1.0",
        "com.unity.entities": "1.2.0-pre.12",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Added\n\n* Optimisations for the gather-ghost-chunk by batching function pointer calls and using a better hash map.\n* BatchScaleImportanceDelegate, a new version of the importance scaling function that work in batches. It is not required to set both the ScaleImportance and the BatchScaleImportance function pointers. If the BatchScaleImportance is set, it is the preferred.\n* TempStreamInitialSize, a new parameter in the GhostSendSystemData for tuning the initial size of the temporary buffer used by server to serialise ghosts. By default now the size is 8KB.\n* AlwaysRelevantQuery to specify general rules for relevancy without specifying it ghost by ghost.\n\n### Changed\n\n* StreamCompressionDataModel is passed as in parameter to avoid many copy every time a WriteXXX or ReadXXX was called.\n* Updated Burst dependency to version 1.8.12\n\n### Fixed\n\n* UI issue disallowing the user from enabling the Network Emulator utility when upgrading with a now-deprecated EditorPref value.\n* an issue with pre-serialised ghosts, corrupting memory, crashing or copying wrong data into the snapshot buffer in certain conditions.\n* avoided GC allocation and the costly Marshal.GetDelegateFromFunctionPointer every time an FunctionPointer.Invoke is called. This is done by using directly unmanaged function pointers.  All this, compatible with Burst enabled/disabled at any time.\n* lot of memory copies for loop invariants. This also reduced some SafetyChecks and costly operations.\n* avoid costly re-serialization of the whole chunk when the temp buffer can't fit all the data. This is one of the biggest costs during the serialisation loop. By default now the buffer is 8KB that reduce this possibility almost to 0.\n* Assigned InterpolationTick to always be equal ServerTick on the Server simulation (as stated in the summary for this parameter). Additionally the typos pointed out in the parameter summary were corrected.\n* Issue where prespawn failed to initialize when relevancy list was updated before replicating internal prespawn ghosts."
      },
      "upmCi": {
        "footprint": "e6362f31dc4ec15a45c61de6d15816f5473a1b49"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.2/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "1ae43e0525b8a09c7fe52ab40c762938a4937244"
      },
      "dist": {
        "shasum": "9bc885dc60988ef6ae8d3da91388b4dea0431428",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.2.0-pre.12.tgz"
      }
    },
    "1.2.0-pre.6": {
      "name": "com.unity.netcode",
      "version": "1.2.0-pre.6",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.1.0",
        "com.unity.entities": "1.2.0-pre.6",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Changed\n\n* Promotion preparation"
      },
      "upmCi": {
        "footprint": "3a1e6b9bc4307b7c333cd180de21b9f13b936e1b"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.2/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "c2136868e2bfbe78d7c68475d8ced6c623b4cb6d"
      },
      "dist": {
        "shasum": "a849a8a54b9fce0daa5681aaa3221849feeab382",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.2.0-pre.6.tgz"
      }
    },
    "1.2.0-pre.4": {
      "name": "com.unity.netcode",
      "version": "1.2.0-pre.4",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.1.0",
        "com.unity.entities": "1.2.0-pre.4",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Added\n\n* You can now disable the automatic Entities `ICustomBootstrap` bootstrapping (which calls NetCode's own `ClientServerBootstrap`) by either; a) disabling it in the ProjectSettings (default value is enabled), or b) adding the new `OverrideAutomaticNetcodeBootstrap` MonoBehaviour to your first build scene (i.e. your Active scene). Thus, there is no longer any need to write a custom bootstrap just to support a Frontend scene vs a Gameplay scene.\n* A `NetCodeConfig` ScriptableObject, containing most NetCode configuration variables, allowing customization without needing to modify code. Most variables are live-tweakable.\n* A 'Snapshot Sequence Id' (SSId), which is used to accurately measure packet loss. It adds 1 byte of header to each snapshot, but enables us to measure Netcode-caused causes of PL (i.e. out of order snapshots being discarded, and discarding a snapshot if another arrives on the same frame). Access statistics via a new struct on the client's `NetworkSnapshotAck`.\n* `RpcCollection.GetRpcHeaderLength` and `NetworkStreamDriver.GetMaximumHeaderSize` to allow users to determine max safe payload sizes.\n\n### Fixed\n\n* Esoteric exception in `MultiplayerPlaymodeWindow` in server-only cases.\n* Interpolated ghosts now support `IInputComponentData` and `AutoCommandTarget`.\n* Improved `UpdateGhostOwnerIsLocal` to make it reactive to `GhostOwner` changes, thus it no longer needs to poll.\n* NetDbg `ArgumentException` when a predicted ghost contains a replicated enableable flag component.\n* Display-only issue where the variants for additional entities (created via baking) were calculated as if they were 'root' entities. They are - in fact - child entities, thus the variants automatically selected for them should default to child defaults.\n* QoL issue; we now allow users to opt-out of auto-baking `GhostAuthoringInspectionComponent`s when selecting their GameObject, reducing stalls when clicking around the Hierarchy or Project.\n* QoL issue where `GhostAuthoringInspectionComponent` was not always modifiable in areas of the Editor where it is valid to modify them.\n* Issue where `GhostAuthoringComponent` was disallowed in nested prefab setups (where the root prefab is NOT a ghost).\n* Log verbiage when creating a driver in DefaultDriverConstructor read like a 'call to action'. It's not."
      },
      "upmCi": {
        "footprint": "9a0ca01acd8f36ba0b6d69406c2e0bc136e197b2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.2/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "38c44b22a14cc4a35bc1b7a2f5ab1846208176d5"
      },
      "dist": {
        "shasum": "751c2bd9d708429b3b26d742a1bc794b96e52284",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.2.0-pre.4.tgz"
      }
    },
    "1.2.0-exp.3": {
      "name": "com.unity.netcode",
      "version": "1.2.0-exp.3",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.1.0",
        "com.unity.entities": "1.2.0-exp.3",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "11f1",
      "_upm": {
        "changelog": "### Added\n\n* `GhostInputSystemGroup` and `GhostSimulationSystemGroup` are now included in the LocalSimulation world, which means your Input polling systems will now automatically get added to the LocalWorld. This helps facilitate support for singleplayer testing workflows. LocalWorld performance is unaffected (as it's a negligible overhead to tick these empty `SystemGroup`s).\n* support for GameObject rendering for debug bounding boxes. Entities Graphics was already supported, this adds support for GameObjects rendering. See Playmode Tools in docs for more details.\n* `ConvertToGhostPrefab` will now set the `EntityName` to the configured GhostName (if null). Useful for dynamically created Entity prefabs.\n* components, buffers and commands that implement generic interfaces that inherit from the IComponentData and IBufferElementData (i.e IComponentData) are now detected correctly and serialization code generated.\n\n### Changed\n\n* mostly for maintenance, code-generation for the component and buffer serialiser, using helper methods living all inside the package. No user visible changes\n* Updated Transport dependency to version 2.1.0.\n* The minimum supported editor version is now 2022.3.11f1\n* all Simulate component enable states are reset to using a job instead of doing that synchronously on the main thread. Reason for the change is the fact this was inducing a big stall at the end of the Prediction loop. However, the benefits is only visible when there are a large number of jobified workload.\n* components, command, buffers and rpc are now replicated also if they are private or internal\n\n### Removed\n\n* dependency from com.unity.logging. Before, in order to use Netcode for Entities, the logging package was required. Now it is optional.\n\n### Fixed\n\n* We now correctly throw a `PlatformNotSupportedException` in the three locations we previously threw `NotImplementedException`s in `ClientServerBootStrap` (methods; `CreateServerWorld`, `CreateClientWorld`, and `CreateThinClientWorld`).\n* when the server change owner for a ghost configured as owner-predicted, the ghost automatically switch the operation mode from interpolated to predicted (or vice versa) based on the owner.\n* an issue with \"partial component\" send optimisation (component present only on interpolated or predicted ghost, or based on the owner) that was causing data being deserialised incorrectly.\n* an issue with enable-bits serialisation not respecting the SendToOwner property set in the GhostComponentAttribute, cluttering the state always with the latest server data, regardless of the setting.\n* an issue with code-gen when using combination of flags for the GhostComponent.PrefabType property.\n* `Error: Invalid context argument index` errors when using the Timeout feature of the PlayMode Tools.\n* Updated log message for overriding variants rule\n* `IndexOutOfRangeException` in the `GhostCollectionSystem` when ghost hash mismatches are present (a common error during dev).\n* An issue accessing the m_PredictionSwitchingSmoothingLookup buffer when multiple ghosts change their owner and they need to switch prediction mode.\n* GhostPrefabCreation.ConvertToGhostPrefab api that incorrectly replicated and assign to child entity components the root entity variant."
      },
      "upmCi": {
        "footprint": "a16254d0b89718efee03c81626c172b5e34fbb2a"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.2/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "9bfd95fb576e8fa710c8544b6706bdd73e25afef"
      },
      "dist": {
        "shasum": "b810ecadd34f77eb142ead8983a66fa75f10e306",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.2.0-exp.3.tgz"
      }
    },
    "1.1.0-pre.3": {
      "name": "com.unity.netcode",
      "version": "1.1.0-pre.3",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.1",
        "com.unity.entities": "1.1.0-pre.3",
        "com.unity.logging": "1.1.0-pre.3",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Changed\n\n* the DefaultTranslationSmoothingAction.DefaultStaticUserParams is now public and can be used by user code (to either change the defaults or use them in their own custom smoothing methods).\n\n### Fixed\n\n* issue when using prediction error smoothing, causing wrong component data retrieved from the backup buffer and consequently not making the smoothing function work as expected.\n* an issue in the reported elapsed time when executing the PredictedFixedStepSystemGroup in presence of partial ticks and PredictedFixedStepSimulationTickRatio grater than 1, causing problem with physics and character controller interpolation.\n* An issue with the change mask not read correctly when serializing/deserializing components with more than 32 fields.\n* `InvalidOperationException: Comparison function is incorrect` inside `GhostComponentSerializerCollectionSystemGroup` due to `ComponentTypeSerializationStrategy.DefaultType` being a `byte` flag enum (so it erroneously matched `128 - 0` the same as `0 - 128` due to wrapping)."
      },
      "upmCi": {
        "footprint": "87dd944372c7e5179109b8bfb0401b6c09dc3a9e"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.1/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "5edeb315aa3ca0d26060290a69660b2afdabe2ff"
      },
      "dist": {
        "shasum": "be47e4b5d420f45d11ac755132521c08a12275eb",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.1.0-pre.3.tgz"
      }
    },
    "1.1.0-exp.1": {
      "name": "com.unity.netcode",
      "version": "1.1.0-exp.1",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.1",
        "com.unity.entities": "1.1.0-exp.1",
        "com.unity.logging": "1.1.0-exp.1",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Added\n\n* source generator can now be configure to enable/disable logs, report timings. It also possible to set the minimal log level (by default is now Error).\n* new public template specs and generator documentation\n* Added convenience methods for getting the clientworld / serverworld (or thin client list) added to ClientServerBootstrap\n* Additional analytics events. Multiplayer tools fields, prediction switching counters, tick rate configuration.\n* New method on the `PredictedFixedStepSimulationSystemGroup` class to initialise the rate as a multiple of a base tick rate.\n* `Packet Fuzz %` is now configurable via the Network Simulator. It's a security tool that should not be enabled during normal testing. It's purpose is to test against malicious MitM attacks, which aim to take down your server via triggering exceptions during packet deserialization. Thus, all deserialization code should be written with safeguards and tolerances, ensuring your logic will fail gracefully.\n* CopyInputToCommandBufferSystemGroup group, that contains all the system that copy IInputCommandData to the underlying ICommand buffer. This let you now target this group with the guarantee that all inputs are not copied after it run.\n* CopyCommandBufferToInputSystemGroup group, that contains all the system that copy ICommandData to their IInputCommandData representation. It runs first in the prediction loop and you can easily target it to do logic before or after the input are updated.\n* GhostSpawnClassificationSystemGroup, that is aimed to contains all your classification systems in one place.\n* Error messages to some missing `NetworkDriver.Begin/EndSend` locations.\n* defining `ENABLE_UNITY_RPC_REGISTRATION_LOGGING` will now log information about registered RPCs during netcode startup\n* We now automatically detect `Application.runInBackground` being set to false during multiplayer gameplay (a common error), and give advice via a suppressible error log as to why it should be enabled.\n* We introduced the new InputBufferData<T> buffer, that is used as underlying container for all IInputComponentData.\n* conditional compilation for some public interfaces in DefaultDriverBuilder to exclude the use of RegisterServer methods for WebGL build (they can't listen). It is possible to do everything manually, but the helper methods are not present anymore.\n* new method for creating a NetworkDriver using WebSocketNetworkInterface.\n* Added two new values to the `NetworkStreamDisconnectReason` enum: `AuthenticationFailure` and `ProtocolError`. The former is returned when the transport is configured to use DTLS or TLS and it fails to establish a secure session. The latter is returned for low-level unexpected transport errors (e.g. malformed packets in a TCP stream).\n\n### Changed\n\n* relaxed public field condition for variants. When declaring a ghost component variations, the variant fields are not required to be public. This make the type pretty much unusable for any other purpose but declaring the type serialisation.\n* Increased the ThinClient cap on `MultiplayerPlayModePreferences.MaxNumThinClients` from 32 to 1k, to facilitate some amount of in-editor testing of high-player-counts.\n* NetcodeTestWorld updates the worlds in the same way the package does: first server, then all clients worlds.\n* When Dedicated Server package is installed, the PlayMode Type value is overridden by the active Multiplayer Role.\n\n### Deprecated\n\n* The public `PredictedFixedStepSimulationGroup.TimeStep`. You should always use the `PredictedFixedStepSimulationGroup.ConfigureTimeStep` to setup the rate of the `PredictedFixedStepSimulationSystemGroup.`.\n* the IInputBufferData interface (internal for code-gen use but public) has been deprecated and will be removed in the 1.2 release.\n\n### Fixed\n\n* incorrect code generated serialization and calculated ChangeMask bits for component and buffers when the GhostFieldAttribute.Composite flag is set to true (in some cases).\n* wrong check for typename in GhostComponentVariation\n* missing region in unquantized float template, causing errors when used for interpolated field.\n* improper check when the ClientServerSetting asset is saved, causing worker process not seeing the changes in the settings.\n* The server world was not setting the correct rate to the group, if that was not done as part of the bootstrap.\n* Exception thrown when the NetDbg tools is connecting to either the editor or player.\n* Renamed (and marginally improved) the \"Multiplayer PlayMode Tools\" Window to the \"PlayMode Tools\" Window, to disambiguate it from \"[MPPM] Multiplayer Play Mode\" (an Engine feature).\n* Attempting to access internals of Netcode for Entities (e.g. via Assembly Definition References) would cause compiler errors due to `MonoPInvokeCallbackAttribute` being ambiguous between AOT and Unity.Entities.\n* Packet dump logging exception when using relevancy, despawns, and packet dumps enabled. Also fixed performance overhead (as it was erroneously logging stack traces).\n* An issue with variant hash calculation in release build, causing ghost prefab hash being different in between development/editor and release build.\n* GhostUpdateSystem.RestoreFromBackup does not always invalidate/bump the chunk version for a component, but only if the chunk as changed since the last time the restore occurred.\n* Issue in TryGetHashElseZero, that was using the ComponentType.GetDebugName to calculate the variant hash, leading incorrect results in a release player build\n* A `NetworkDriver.BeginSend` error causing an infinite loop in the `RpcSystem`.\n* Deprecated Analytics API when using 2023.2 or newer.\n* compilation issue when using 2023.2, caused by an ambiguous symbol (define in both Editor and in Entities.Editor assembly)\n* Errant netcode systems no longer show up in the DefaultWorld: `PhysicsWorldHistory`, `SwitchPredictionSmoothingPhysicsOrderingSystem`, `SwitchPredictionSmoothingSystem`, `GhostPresentationGameObjectTransformSystem`, `GhostPresentationGameObjectSystem`, and `SetLocalPlayerGraphicsColorsSystem`.\n* Previous was hard to retrieve the generated buffer for a given IInputComponentData. Now is easy as doing something like InputBufferData<MyInputComponent>.\n* Compilation error when building for WebGL\n* SnapshotDataLookupCache not created in the correct order, causing custom classification system using the SnapshotBufferHelper to throw exceptions, because the cache was not initialised.\n* A replicated `[GhostEnabledBit]` flag component would throw an `ArgumentException` when added to a Prespawned Ghost due to `ArchetypeChunk.GetDynamicComponentDataArrayReinterpret`."
      },
      "upmCi": {
        "footprint": "142b6d5f84e0d29136fe7e018a8ed953c8e74762"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.1/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "c3274ed2015eeec85914d62bfbd32e39f0dd112b"
      },
      "dist": {
        "shasum": "4e47ea3a38f18ed3c7eee5a7f8da5c769d4b4630",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.1.0-exp.1.tgz"
      }
    },
    "1.0.17": {
      "name": "com.unity.netcode",
      "version": "1.0.17",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.1",
        "com.unity.entities": "1.0.16",
        "com.unity.logging": "1.0.16",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Added\n\n* defining ENABLE_UNITY_RPC_REGISTRATION_LOGGING will now log information about registered RPCs during netcode startup\n\n### Changed\n\n* NetcodePacket debug log filenames changed to include date/time and version information\n\n### Fixed\n\n* addressed a case where it was possible for an exception to be thrown on the server if an RPC was queued for a then dropped connection.\n* \"AssetDatabase.RegisterCustomDependency are restricted during importing\" exception thrown by the NetCodeClientSettings, NetCodeClientServerSettings, NetCodeServerSettings in their OnDisable method, when using 2023.2 or newer."
      },
      "upmCi": {
        "footprint": "a56f2a21ac675cb9d7151fd20c66c7f7fabf1770"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "8f9a34fef643cca2b5f84470ac61c171c1831168"
      },
      "dist": {
        "shasum": "dcb476daaf3e0723146d51860a4d4b28f1305773",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.17.tgz"
      }
    },
    "1.0.15": {
      "name": "com.unity.netcode",
      "version": "1.0.15",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.1",
        "com.unity.entities": "1.0.14",
        "com.unity.logging": "1.0.14",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.3",
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Changed\n\n* Updated com.unity.entities dependency to 1.0.14\n* Use of non required TempJob allocation and use Allocator.Temp instead.\n\n### Fixed\n\n* Runtime EntityQuery leaks and reduce runtime memory pressure due to continuously allocating queries without disposing.\n* Reduced memory usage in Editor tests, by avoiding allocating queries continuously in hot paths."
      },
      "upmCi": {
        "footprint": "e6289d65df199ced74648f8de51830472111eac8"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "13433ff314ae6503bb855899b83d26a063650441"
      },
      "dist": {
        "shasum": "f6de70ade4fc7a1a6d713ba309443e01f9c800ee",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.15.tgz"
      }
    },
    "1.0.12": {
      "name": "com.unity.netcode",
      "version": "1.0.12",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.1",
        "com.unity.entities": "1.0.11",
        "com.unity.logging": "1.0.11",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.2",
      "unityRelease": "15f1",
      "_upm": {
        "changelog": "### Changed\n* Updated com.unity.entities dependency to 1.0.11\n\n### Fixed\n* `MultiplayerPlayModeWindow > Dump Packet Logs` now works more reliably, now works with NUnit tests, and dump files are named with more context.\n* Fixed bug in `GhostSendSystem` that caused it to not replicate ghosts when enabling packet dumps. `GhostValuesAreSerialized_WithPacketDumpsEnabled` test added."
      },
      "upmCi": {
        "footprint": "cf5420ec6d17a2c7db7e73d934d24e9997619cc9"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "81c21934f16a49fc5f826187f07aaea4728d63c3"
      },
      "dist": {
        "shasum": "752b4615ecf554c602abac3ce519201ec1542403",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.12.tgz"
      }
    },
    "1.0.11": {
      "name": "com.unity.netcode",
      "version": "1.0.11",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.1",
        "com.unity.entities": "1.0.10",
        "com.unity.logging": "1.0.11",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.2",
      "unityRelease": "15f1",
      "_upm": {
        "changelog": "### Fixed\n\n* Updated logging dependency"
      },
      "upmCi": {
        "footprint": "5f122986cefc8b5207a730563066dae5586cfae0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "7913fb5a6e4700c816c0910e23fbaad56b71fc6b"
      },
      "dist": {
        "shasum": "d8178090c65961eb908e695725ba5a7d386fbdc8",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.11.tgz"
      }
    },
    "1.0.10": {
      "name": "com.unity.netcode",
      "version": "1.0.10",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.1",
        "com.unity.entities": "1.0.10",
        "com.unity.logging": "1.0.10",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.2",
      "unityRelease": "15f1",
      "_upm": {
        "changelog": "### Added\n\n* What's New and Upgrade Guide section in the docs.\n* New NetworkRequestListenResult cleanup component, that can be used to track the result of a listen request.\n\n### Changed\n\n* documentation index page with up-to-date info and links.\n* Removed forcing local client/server to alway use the loopback address to connect.\n* It is now possible to listen to the NetworkEndPoint.Any also for IPC connection.\n* The NetworkStreamDriver.GetRemoteAddress always return a consistent address for the connection when the NetworkDriver is configured to use the Unity Relay. Before, an invalid address was returned after the connection has been established, that was incorrect.\n* Exposed all the internal state of the NetworkTimeSystem as public API\n\n### Fixed\n\n* exceptions when NetworkRequestListen and/or. NetworkRequestConnect are handled and proper handling of multiple (erroneous) requests presents.\n* A problem with InterpolatedTick, going back and not recovering correctly in presence of large application, either the server or the client, stalls (i.e after loading)."
      },
      "upmCi": {
        "footprint": "01c68054b283a8d97e7a446804d29d9a29e8ec72"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "464acdc5351df3c5deeb425d7aa31f4c7b20c0cf"
      },
      "dist": {
        "shasum": "bfa9f1721444309f7fc963a7e39ade488c0f95b2",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.10.tgz"
      }
    },
    "1.0.8": {
      "name": "com.unity.netcode",
      "version": "1.0.8",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.1",
        "com.unity.entities": "1.0.8",
        "com.unity.logging": "1.0.8",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.2",
      "unityRelease": "15f1",
      "_upm": {
        "changelog": "### Changed\n\n* Reduced the amount of memory allocated by allocating based on the maximum number of worker threads the running platform requires rather than defaulting to using a theoretical upper-bound of 128 worker threads.\n* Removed the additional entity created for each predicted ghost prefab, that was necessary to support predicted spawning. This has the addition benefit to cut almost in half (in case all ghost prefabs support all modes) the number of required archetypes.\n\n\n### Fixed\n\n* An issue with pre-spawned ghost not working correctly because sub-scene hash is calculated differently for client and server\n* an issue when sub-scene are opened for live-conversion and baking, causing spawned ghosts to contains invalid blob asset references (i.e colliders), introducing potential crashes and other problems (i.e missing collision and mis-prediction)\n* An issue with baking, not using the correct NetCodeClientTarget (either client or client/server) when baking a sub-scene for a client standalone build.\n* An issue with the Entities/Build project settings UI that was not updating the ClientTarget to use is the ProjectSettings window was not closed, or another settings \"tab\" was selected.\n* An issue with HasServerWorld reporting the presence of a server world even though no server was created.if it's not needed.\n* A sporadic InvalidOperationException: GetSingleton<Unity.NetCode.LowLevel.SnapshotDataLookupCache>() thrown when retrieving the Unity.NetCode.LowLevel.SnapshotDataLookupCache.\n* GhostCollectionSystem InvalidOperationException thrown when Ghost prefab validation fails, trying accessing invalidated DynamicBuffer.\n* An issue in the GhostChunkSerializer, that was overwriting the snapshot data with some enable bits masks.\n* An issue in the GhostUpdateSystem, that was reading and applying the wrong enable bits.\n* An issue when restoring enable bits state from the predicted ghost history buffer.\n* Fixed a \"System Creation Order\" bug causing components with `[GhostField]` fields (or the `[GhostEnableBit]` attribute) to silently default to the `DontSerializeVariant`, especially in cases where Ghost Prefabs are created at runtime (via `GhostPrefabCreation.ConvertToGhostPrefab`).\n  * \"Ghost Registration\" and \"Default Variant Registration\" Systems now use `[CreateBefore(typeof(DefaultVariantSystemGroup))]`, so that user-code can add `[CreateAfter(typeof(DefaultVariantSystemGroup))]` when accessing `GhostComponentSerializerCollectionData` data.\n  * We now also guard all of these calls, giving explicit (fatal) errors if used improperly.\n* An issue in `GhostDistancePartitioningSystem`, which caused Netcode to add a shared component ECB entry for every single ghost containing a `LocalTransform`, every single frame, when `GhostDistanceImportance` was enabled in a users project.\n\n\n### Deprecated\n\n* Now that the `GhostAuthoringInspectionComponent` shows all replicated components, you shouldn't have to opt-into prefab overrides. Thus, deprecated the `SupportsPrefabOverrides` attribute."
      },
      "upmCi": {
        "footprint": "906dee69c427dfbb2a9fd4c564a6a8207a25dcb0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "25dfb648cd0fabcf13fed46219e5fbe0fdabe4ac"
      },
      "dist": {
        "shasum": "395b2610c41e036bf7bb7e61dca3ec20358c0d77",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.8.tgz"
      }
    },
    "1.0.0-pre.65": {
      "name": "com.unity.netcode",
      "version": "1.0.0-pre.65",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.0-pre.6",
        "com.unity.entities": "1.0.0-pre.65",
        "com.unity.logging": "1.0.0-pre.37",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.2",
      "unityRelease": "2f1",
      "_upm": {
        "changelog": "### Added\n\n* validate and sanitise connect and listen addresses when using IPCNetworkInterface. That was causing some nasty crash in the Transport without users understanding the actual problem.\n\n### Changed\n\n* the following components has been renamed: | Original Name | New Name        | | ---------------| ---------------| |NetworkSnapshotAckComponent| NetworkSnapshotAck | |IncomingSnapshotDataStreamBufferComponent| IncomingSnapshotDataStreamBuffer | |IncomingRpcDataStreamBufferComponent| IncomingRpcDataStreamBuffer | |OutgoingRpcDataStreamBufferComponent| OutgoingRpcDataStreamBuffer  | |IncomingCommandDataStreamBufferComponent| IncomingCommandDataStreamBuffer | |OutgoingCommandDataStreamBufferComponent|OutgoingCommandDataStreamBuffer| |NetworkIdComponent|NetworkId| |CommandTargetComponent|CommandTarget| |GhostComponent|GhostInstance| |GhostChildEntityComponent|GhostChildEntity| |GhostOwnerComponent|GhostOwner| |PredictedGhostComponent|PredictedGhost| |GhostTypeComponent|GhostType| |SharedGhostTypeComponent|GhostTypePartition| |GhostCleanupComponent|GhostCleanup| |GhostPrefabMetaDataComponent|GhostPrefabMetaData| |PredictedGhostSpawnRequestComponent|PredictedGhostSpawnRequest| |PendingSpawnPlaceholderComponent|PendingSpawnPlaceholder| |ReceiveRpcCommandRequestComponent|ReceiveRpcCommandRequest| |SendRpcCommandRequestComponent|SendRpcCommandRequest| |MetricsMonitorComponent|MetricsMonitor|\n\n### Removed\n\n* internal ListenAsync/ConnectAsync methods (no visible API changes for the users)\n\n### Fixed\n\n* a very unfrequent exception thrown in presence of a ghost with a replicated component that does not present any prediction errors names (i.e an Entity reference).\n* source generator crash when logging missing assembly dependency.\n* source generator requiring Unity.Transport package dependency for generating serialization code.\n* Snapshot history buffer not restore correctly, causing entities component to be stomped with random data.\n* Fixed an issue when ClientServerBootstrap.AutoConnectPort is 0 indicating autoconnecting should be disabled and you will connect manually via the driver connect API, but the playmode tools ip/port fields would still triggering (so you get two connections set up and errors). We also now prevent attempts to make a connection while one is already established.\n* an issue with source generator, validating incorrectly custom templates that uses overrides.\n* removed warning for old temp allocation when converting sub-scene with pre-spawned ghosts.\n* Forced all `ICommandData`'s `InternalBufferCapacity` to be zero, because we were constantly wasting hundreds of bytes per entity to store data that we know for certain will not fit into the internal capacity (as the dynamic buffer required length is hardcoded to 64, for netcode input buffers).\n* Fixed potential crash in players when send queue is full\n* Fixed exceptions when trying to use invalid interpolation ticks (could happen during snapshot updates or in predicted spawning system on disconnection)"
      },
      "upmCi": {
        "footprint": "2db64c497755f69af8f6c9cd2365a8e6c67f4cb0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "85530c484ef7afedc5b128081152ec5e1f6f30e2"
      },
      "dist": {
        "shasum": "2d3df90baa848dd012bd969699d4342fbc2fd8ea",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.0-pre.65.tgz"
      }
    },
    "1.0.0-pre.47": {
      "name": "com.unity.netcode",
      "version": "1.0.0-pre.47",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.0-pre.6",
        "com.unity.entities": "1.0.0-pre.47",
        "com.unity.logging": "1.0.0-pre.21",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.2",
      "unityRelease": "2f1",
      "_upm": {
        "changelog": "### Fixed\n\n* Snapshot history buffer not restore correctly, causing entities component to be stomped with random data."
      },
      "upmCi": {
        "footprint": "16e299560c2d5c37fd60a28c7213f86861f199a2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "36551e18e8f4a1b29a42b997554369e56ce8875a"
      },
      "dist": {
        "shasum": "ce8e1f1bfcefa84eb72dcccc799929403d3c0c66",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.0-pre.47.tgz"
      }
    },
    "1.0.0-pre.44": {
      "name": "com.unity.netcode",
      "version": "1.0.0-pre.44",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.0-pre.6",
        "com.unity.entities": "1.0.0-pre.44",
        "com.unity.logging": "1.0.0-pre.21",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.2",
      "unityRelease": "2f1",
      "_upm": {
        "changelog": "### Added\n\n* Validation checks to the `GhostDistanceData` `TileSize` to prevent invalid tile assignment or DivideByZeroException.\n* Added a HelpURL (linking to docs) for `DisableAutomaticPrespawnSectionReportingAuthoring`, `GhostAuthoringComponent`, `GhostAuthoringInspectionComponent`, `DefaultSmoothingActionUserParamsAuthoring`, `GhostPresentationGameObjectAuthoring`, `NetCodeDebugConfigAuthoring`, `GhostAnimationController`, `GhostPresentationGameObjectEntityOwner`, and `NetCodePhysicsConfig`.\n* New GetLocalEndPoint API to NetworkStreamDriver\n\n### Changed\n\n* Make EnablePacketLogging component public to allow for per connection debug information.\n* Updated `com.unity.transport` dependency to version 2.0.0-pre.6.\n\n### Fixed\n\n* An issue with the `NetworkEmulator` in the editor when enabling domain reload (while switching play-mode) that was causing the game to forcibly immediately exit the the play state.\n* An issue with pre-spawned ghost baking when the baked entity has not LocalTransform (position/rotation for transform v1) component.\n* \"Ghost Distance Importance Scaling\" is now working again. Ensure you read the updated documentation.\n* Missing field write in `NetworkStreamListenSystem.OnCreate`, fixing Relay servers.\n* Code-Generated Burst-compiled Serializer methods will now only compile inside worlds with `WorldFlag.GameClient` and `WorldFlag.GameServer` WorldFlags. This improves exit play-mode speeds (when Domain Reload is enabled), baking (in all cases), and recompilation speeds.\n* Fixed an issue where multiple ghost types with the same archetype but difference data could sometime trigger errors about ghosts changing type.\n* Fix a mistake where the relay sample will create a client driver rather than a server driver\n* Fix logic for relay set up on the client. Making sure when calling DefaultDriverConstructor.RegisterClientDriver with relay settings that we skip this unless, requested playtype is client or clientandserver (if no server is found), the simulator is enabled, or on a client only build.\n* Fixed `ArgumentException: ArchetypeChunk.GetDynamicComponentDataArrayReinterpret<System.Byte> cannot be called on zero-sized IComponentData` in `GhostPredictionHistorySystem.PredictionBackupJob`. Added comprehensive test coverage for the `GhostPredictionHistorySystem` (via adding a predicted ghost version of the `GhostSerializationTestsForEnableableBits` tests).\n* Fixed serialization of components on child entities in the case where `SentForChildEntities = true`. This fix may introduce a small performance regression in baking and netcode world initialization. Contact us with all performance related issues.\n* `GhostUpdateSystem` now supports Change Filtering, so components on the client will now only be marked as changed _when they actually are changed_. We strongly recommend implementing change filtering when reading components containing `[GhostField]`s and `[GhostEnabledBit]`s on the client.\n* Fixed input component codegen issue when the type is nested in a parent class\n* Exposed NetworkTick value to Entity Inspector"
      },
      "upmCi": {
        "footprint": "77cc2b4a0e71647fc7665922048577949a3878c2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "0e572178431e16c09c6c434c873bf0c60e52a5e9"
      },
      "dist": {
        "shasum": "4c9a919bc578817320e760c80da3b8190296c32e",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.0-pre.44.tgz"
      }
    },
    "1.0.0-pre.15": {
      "name": "com.unity.netcode",
      "version": "1.0.0-pre.15",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.0-pre.2",
        "com.unity.entities": "1.0.0-pre.15",
        "com.unity.logging": "1.0.0-pre.11",
        "com.unity.modules.animation": "1.0.0"
      },
      "unity": "2022.2",
      "unityRelease": "0f1",
      "upmCi": {
        "footprint": "6949a45917c3cdc0f14c0a56025b2a032c793bb5"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "82387d7cb4bc4aee07e94656ef8103860ef6ec55"
      },
      "dist": {
        "shasum": "12c61f8f11a1f3f8ab1afc3b40cc0a335f74677a",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.0-pre.15.tgz"
      }
    },
    "1.0.0-exp.13": {
      "name": "com.unity.netcode",
      "version": "1.0.0-exp.13",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.0-exp.6",
        "com.unity.entities": "1.0.0-exp.12",
        "com.unity.logging": "1.0.0-exp.7"
      },
      "unity": "2022.2",
      "unityRelease": "0b5",
      "upmCi": {
        "footprint": "13592f569f5c2ba8c63aa6a77a3e13fd9942f6bf"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "bde89ab29c5e7b9e2491079103f23ad23d8dc81f"
      },
      "dist": {
        "shasum": "68a0d98c56567cd92ef0ed70c4ba039d1bbed16a",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.0-exp.13.tgz"
      }
    },
    "1.0.0-exp.8": {
      "name": "com.unity.netcode",
      "version": "1.0.0-exp.8",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "2.0.0-exp.6",
        "com.unity.entities": "1.0.0-exp.8",
        "com.unity.logging": "1.0.0-exp.6"
      },
      "unity": "2022.2",
      "unityRelease": "0b5",
      "upmCi": {
        "footprint": "c46eeca94df456f0416ead636fda178b4f95760b"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "7f4180a58b7e1c75f6375bd73fb80bd99d195d4e"
      },
      "dist": {
        "shasum": "1d6628ec2626b38a24c8e7756860d10131102df8",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-1.0.0-exp.8.tgz"
      }
    },
    "0.51.1-preview.21": {
      "name": "com.unity.netcode",
      "version": "0.51.1-preview.21",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "1.0.0",
        "com.unity.entities": "0.51.1-preview.21"
      },
      "unity": "2020.3",
      "unityRelease": "30f1",
      "upm": {
        "changelog": "### Changed\n\n* Package Dependencies\n    * `com.unity.entities` to version `0.51.1`"
      },
      "upmCi": {
        "footprint": "4560f3164b740722da7230491329b59e4fdc473d"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "063a98897b40805f53b859bb426ce664229d0c00"
      },
      "dist": {
        "shasum": "9dbb38adf200a33c162c5b07a6270025cbe0bccd",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.51.1-preview.21.tgz"
      }
    },
    "0.51.0-preview.32": {
      "name": "com.unity.netcode",
      "version": "0.51.0-preview.32",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "1.0.0",
        "com.unity.entities": "0.51.0-preview.32"
      },
      "unity": "2020.3",
      "unityRelease": "0f1",
      "upm": {
        "changelog": "### Changed\n\n* Package Dependencies\n    * `com.unity.entities` to version `0.51.0`\n* Updated transport dependency to 1.0.0."
      },
      "upmCi": {
        "footprint": "165c77c2407541000019d5a6a04db076d1ceae17"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "469d2b30300a7ff2c2b15f72ee8613e374c37b63"
      },
      "_id": "com.unity.netcode@0.51.0-preview.32",
      "_integrity": "sha512-aLBWepO3z66uH6Dc6zAgqQyy28FtcibZN1WXzwUNY/bJQQ2ncztVLR7zld6ZIFna8ViWJxUy7R+I0hQ0TkN7aA==",
      "_resolved": "/tmp/com.unity.netcode@0.51.0-preview.32-opdqc1qa.tgz",
      "_from": "file:/tmp/com.unity.netcode@0.51.0-preview.32-opdqc1qa.tgz",
      "dist": {
        "shasum": "3441f3b6b4aa2aac55ae7343fb11a37606c5c939",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.51.0-preview.32.tgz"
      }
    },
    "0.50.1-preview.19": {
      "name": "com.unity.netcode",
      "version": "0.50.1-preview.19",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "1.0.0-pre.15",
        "com.unity.entities": "0.50.1-preview.2"
      },
      "unity": "2020.3",
      "unityRelease": "0f1",
      "upm": {
        "changelog": "### Added\n\n* Hybrid assemblies will not be included in DOTS Runtime builds.\n\n### Changed\n\n* Changed: Tick systems (Initialization, Simulation, Presentation) are not created as part of the default client-server bootstrap for Hybrid and the Client and Server worlds are updated by the PlayerLoop instead.\n\n### Fixed\n\n* Fixed an exception in `PhysicsWorldHistory` when enabling lag compensation.\n* Fixed a rare compile error when source generators found invalid data in the package cache.\n* Fixed issue that prevent systems been shown in System Hierarchy window.\n* Fixed an issue where RPCs could be lost in rare cases when sending too many of them.\n* Fix an incorrect overflow exception when pre-spawned or predicted spawned ghost serialize a subset of the fields."
      },
      "upmCi": {
        "footprint": "ebb579f0e70cd21376c67031ff6ad11a2e7c7d65"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "f510d2cf044b48696ac6e43c591f2fb031f46fca"
      },
      "_id": "com.unity.netcode@0.50.1-preview.19",
      "_integrity": "sha512-e/IXLFMb42Ent0sUsl7bvdn0761QzKnz5nDNTVe1/uUM2qYUlGtpJ/04gZ+0jBb3fNjM3O5b+KIGAWuJOxOdSw==",
      "_resolved": "/tmp/com.unity.netcode@0.50.1-preview.19-edwcrjjf.tgz",
      "_from": "file:/tmp/com.unity.netcode@0.50.1-preview.19-edwcrjjf.tgz",
      "dist": {
        "shasum": "26d2fc1184a248a1feef59b0704d4ff34b97b97c",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.50.1-preview.19.tgz"
      }
    },
    "0.50.0-preview.29": {
      "name": "com.unity.netcode",
      "version": "0.50.0-preview.29",
      "displayName": "Netcode for Entities",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "1.0.0-pre.15",
        "com.unity.entities": "0.50.0-preview.24"
      },
      "unity": "2020.3",
      "unityRelease": "0f1",
      "upmCi": {
        "footprint": "e7e68419b4fe0660d0879dc2e6e7f7eac0c38e62"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
        "type": "git",
        "revision": "8327688fcdee91448c8d4aa1ebbd5a4c1e665bef"
      },
      "_id": "com.unity.netcode@0.50.0-preview.29",
      "_integrity": "sha512-EVjC/nvF2M9Jc3Rt5dgh3emEtlyKXuMQwAklRNYmOjguBGh1aOTKnzvp8wAiUU8eNxASQAeEMG4Vt0/zaMjLcA==",
      "_resolved": "/tmp/com.unity.netcode@0.50.0-preview.29-06jv3swe.tgz",
      "_from": "file:/tmp/com.unity.netcode@0.50.0-preview.29-06jv3swe.tgz",
      "dist": {
        "shasum": "fc873ce55f34aade73819a062d6dd1e8407d225e",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.50.0-preview.29.tgz"
      }
    },
    "0.6.0-preview.7": {
      "name": "com.unity.netcode",
      "version": "0.6.0-preview.7",
      "displayName": "Unity NetCode",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foudation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.ext.nunit": "1.0.6",
        "com.unity.transport": "0.6.0-preview.7",
        "com.unity.burst": "1.4.1",
        "com.unity.entities": "0.17.0-preview.41"
      },
      "unity": "2020.1",
      "unityRelease": "9f1",
      "upmCi": {
        "footprint": "d706b3fd68c19ce04fc8e887f63d67c047671b70"
      },
      "repository": {
        "url": "git+https://github.com/Unity-Technologies/netcode.git",
        "type": "git",
        "revision": "f5463f493744a4b8b62680e2ed23a5687b8aabfd"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.netcode-0.6.0-preview.7.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/netcode/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/netcode#readme",
      "_id": "com.unity.netcode@0.6.0-preview.7",
      "dist": {
        "shasum": "9f26edbcff9fe211373eff0986285d1fca4e6216",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.6.0-preview.7.tgz"
      }
    },
    "0.5.0-preview.5": {
      "name": "com.unity.netcode",
      "version": "0.5.0-preview.5",
      "displayName": "Unity NetCode",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foudation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "0.5.0-preview.5",
        "com.unity.burst": "1.3.7",
        "com.unity.entities": "0.16.0-preview.21"
      },
      "unity": "2020.1",
      "unityRelease": "2f1",
      "upmCi": {
        "footprint": "72296c2cf30c65e98fb36c2126af342908b9b609"
      },
      "repository": {
        "url": "git+https://github.com/Unity-Technologies/netcode.git",
        "type": "git",
        "revision": "c552d8192df620055f641922198b0b4a247a808a"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.netcode-0.5.0-preview.5.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/netcode/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/netcode#readme",
      "_id": "com.unity.netcode@0.5.0-preview.5",
      "dist": {
        "shasum": "da315da084576e1fba1284f1e476051eaf92b196",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.5.0-preview.5.tgz"
      }
    },
    "0.4.0-preview.1": {
      "name": "com.unity.netcode",
      "version": "0.4.0-preview.1",
      "displayName": "Unity NetCode",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foudation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "0.4.1-preview.1",
        "com.unity.burst": "1.3.0",
        "com.unity.collections": "0.12.0-preview.13",
        "com.unity.entities": "0.14.0-preview.18"
      },
      "unity": "2020.1",
      "unityRelease": "2f1",
      "upmCi": {
        "footprint": "e88c5c51c8bf50d564016a098e5fa187d09bfbcd"
      },
      "repository": {
        "url": "git+https://github.com/Unity-Technologies/netcode.git",
        "type": "git",
        "revision": "8d757f092a828f913aee73fda7a813ff58a7b8b9"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.netcode-0.4.0-preview.1.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/netcode/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/netcode#readme",
      "_id": "com.unity.netcode@0.4.0-preview.1",
      "dist": {
        "shasum": "205de08408dd7aaf3e0dbabe05fc409112033e3e",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.4.0-preview.1.tgz"
      }
    },
    "0.3.0-preview.3": {
      "name": "com.unity.netcode",
      "version": "0.3.0-preview.3",
      "displayName": "Unity NetCode",
      "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foudation for creating networked multiplayer applications within DOTS.",
      "category": "",
      "dependencies": {
        "com.unity.transport": "0.4.0-preview.3",
        "com.unity.burst": "1.3.0",
        "com.unity.collections": "0.12.0-preview.13",
        "com.unity.entities": "0.14.0-preview.18"
      },
      "unity": "2020.1",
      "unityRelease": "2f1",
      "upmCi": {
        "footprint": "b3cb6f3be3c88871ea37aa98beb175fe9b19aeba"
      },
      "repository": {
        "url": "git+https://github.com/Unity-Technologies/netcode.git",
        "type": "git",
        "revision": "0c7a798930d3efad8cf72fb01612efddba074783"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.netcode-0.3.0-preview.3.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/netcode/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/netcode#readme",
      "_id": "com.unity.netcode@0.3.0-preview.3",
      "dist": {
        "shasum": "0d41b472e8dc82b38c0d486639a2cd97bcdd2706",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.3.0-preview.3.tgz"
      }
    },
    "0.2.0-preview.5": {
      "name": "com.unity.netcode",
      "version": "0.2.0-preview.5",
      "displayName": "Unity NetCode",
      "description": "Unity multiplayer netcode layer - a high level netcode system built on entities",
      "category": "",
      "dependencies": {
        "com.unity.transport": "0.3.1-preview.4",
        "com.unity.burst": "1.3.0",
        "com.unity.collections": "0.9.0-preview.5",
        "com.unity.entities": "0.11.0-preview.7"
      },
      "unity": "2019.3",
      "unityRelease": "0b11",
      "upmCi": {
        "footprint": "ce38487c69d6d755173e714d668d877f0461a8e2"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/Unity-Technologies/netcode.git",
        "revision": "2fb0954cceae679b397cea825faf7fc34e258ced"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.netcode-0.2.0-preview.5.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/netcode/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/netcode#readme",
      "_id": "com.unity.netcode@0.2.0-preview.5",
      "dist": {
        "shasum": "094c41019de5a8b90c3bf455d1b407dac473dcc2",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.2.0-preview.5.tgz"
      }
    },
    "0.1.0-preview.6": {
      "name": "com.unity.netcode",
      "version": "0.1.0-preview.6",
      "displayName": "Unity NetCode",
      "description": "Unity multiplayer netcode layer - a high level netcode system built on entities",
      "dependencies": {
        "com.unity.transport": "0.3.0-preview.6",
        "com.unity.entities": "0.6.0-preview.24"
      },
      "unity": "2019.3",
      "unityRelease": "0b11",
      "repository": {
        "footprint": "a204937207b0580846b35f944c9dc8a730a79f87",
        "type": "git",
        "url": "git+https://github.com/Unity-Technologies/netcode.git",
        "revision": "e057ccf4fb0b19bbd5e6ea8615a121abcfc49fbb"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.netcode-0.1.0-preview.6.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/netcode/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/netcode#readme",
      "_id": "com.unity.netcode@0.1.0-preview.6",
      "dist": {
        "shasum": "b4d3368a5ef91663123cdcf0a4949b936bc9e0b9",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.1.0-preview.6.tgz"
      }
    },
    "0.0.4-preview.0": {
      "name": "com.unity.netcode",
      "version": "0.0.4-preview.0",
      "displayName": "Unity NetCode",
      "description": "Unity multiplayer netcode layer - a high level netcode system built on entities",
      "dependencies": {
        "com.unity.transport": "0.2.3-preview.0",
        "com.unity.entities": "0.3.0-preview.4"
      },
      "unity": "2019.3",
      "unityRelease": "0b11",
      "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/Unity-Technologies/netcode.git",
        "revision": "2c437c67f30b8dd7b9a6848a979abded4b5ffd3b"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.netcode-0.0.4-preview.0.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/netcode/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/netcode#readme",
      "_id": "com.unity.netcode@0.0.4-preview.0",
      "dist": {
        "shasum": "420bace64503606baa445ea4e5ae0a491d8e6e96",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.0.4-preview.0.tgz"
      }
    },
    "0.0.3-preview.2": {
      "name": "com.unity.netcode",
      "version": "0.0.3-preview.2",
      "displayName": "Unity NetCode",
      "description": "Unity multiplayer netcode layer - a high level netcode system built on entities",
      "dependencies": {
        "com.unity.transport": "0.2.2-preview.2",
        "com.unity.entities": "0.3.0-preview.4"
      },
      "unity": "2019.3",
      "unityRelease": "0b11",
      "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/Unity-Technologies/netcode.git",
        "revision": "a66f6695feb879621aa4a464939ffb6d92d3be4e"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.netcode-0.0.3-preview.2.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/netcode/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/netcode#readme",
      "_id": "com.unity.netcode@0.0.3-preview.2",
      "dist": {
        "shasum": "004986cc124982072d2db5aa59a4fa463c6f18c0",
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.0.3-preview.2.tgz"
      }
    },
    "0.0.2-preview.1": {
      "name": "com.unity.netcode",
      "version": "0.0.2-preview.1",
      "displayName": "Unity NetCode",
      "description": "Unity multiplayer netcode layer - a high level netcode system built on entities",
      "dependencies": {
        "com.unity.transport": "0.2.1-preview.1",
        "com.unity.entities": "0.2.0-preview.18"
      },
      "repository": {
        "type": "git",
        "url": "git@github.com:Unity-Technologies/netcode.git",
        "revision": "dc6ff1b90bd08de36cbf05fc07d05cc47f6ba114"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.0.2-preview.1.tgz",
        "shasum": "8306dde61bb164df3977da74bd9d2925cab8f56d"
      },
      "scripts": {},
      "_id": "com.unity.netcode@0.0.2-preview.1",
      "unity": "2019.3",
      "unityRelease": "0b11"
    },
    "0.0.1-preview.6": {
      "name": "com.unity.netcode",
      "version": "0.0.1-preview.6",
      "displayName": "Unity NetCode",
      "description": "Unity multiplayer netcode layer - a high level netcode system built on entities",
      "dependencies": {
        "com.unity.transport": "0.2.0-preview.4",
        "com.unity.entities": "0.2.0-preview.18"
      },
      "repository": {
        "type": "git",
        "url": "git@github.com:Unity-Technologies/netcode.git",
        "revision": "2a580c3ed0739a86c9e66aea2eca8b80cb8f118a"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.netcode/-/com.unity.netcode-0.0.1-preview.6.tgz",
        "shasum": "7328eecdac56992f8d3cf81f38c7d19706d3d861"
      },
      "scripts": {},
      "_id": "com.unity.netcode@0.0.1-preview.6",
      "unity": "2019.3",
      "unityRelease": "0b11"
    }
  },
  "etag": "\"9858797d5154dc7621c88fce6b4bc7d2\"",
  "provider": "upm",
  "name": "com.unity.netcode",
  "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
  "_id": "com.unity.netcode",
  "cnTags": [],
  "time": {
    "1.9.0": "2025-09-25T03:13:01Z",
    "1.8.0": "2025-08-20T03:13:01Z",
    "1.7.0": "2025-08-01T03:13:01Z",
    "1.6.2": "2025-07-09T03:13:01Z",
    "1.6.1": "2025-06-02T03:13:01Z",
    "1.4.1": "2025-05-15T03:22:01Z",
    "1.5.1": "2025-05-09T03:13:02Z",
    "1.5.0": "2025-04-24T03:13:01Z",
    "1.5.0-exp.101": "2025-03-14T03:13:01Z",
    "1.5.0-exp.100": "2025-03-13T03:13:01Z",
    "1.5.0-exp.2": "2025-02-12T03:13:02Z",
    "1.5.0-exp.1": "2025-01-31T03:13:01Z",
    "1.4.0": "2024-12-05T09:10:38Z",
    "1.3.6": "2024-10-21T11:28:35Z",
    "1.3.2": "2024-09-17T00:04:36Z",
    "1.2.4": "2024-08-15T11:20:39Z",
    "1.3.0-pre.4": "2024-07-18T11:50:50Z",
    "1.3.0-exp.1": "2024-06-17T09:15:13Z",
    "1.2.3": "2024-06-05T16:16:07Z",
    "1.2.1": "2024-05-02T09:18:13Z",
    "1.2.0": "2024-03-26T13:41:05Z",
    "1.2.0-pre.12": "2024-02-28T10:31:34Z",
    "1.2.0-pre.6": "2023-12-15T14:21:24Z",
    "1.2.0-pre.4": "2023-12-04T14:48:58Z",
    "1.2.0-exp.3": "2023-11-14T17:42:42Z",
    "1.1.0-pre.3": "2023-11-08T19:28:31Z",
    "1.1.0-exp.1": "2023-09-20T14:42:15Z",
    "1.0.17": "2023-09-13T11:26:37Z",
    "1.0.15": "2023-08-10T08:45:02Z",
    "1.0.12": "2023-06-21T08:41:17Z",
    "1.0.11": "2023-06-05T15:37:23Z",
    "1.0.10": "2023-05-25T14:09:04Z",
    "1.0.8": "2023-05-11T16:08:56Z",
    "1.0.0-pre.65": "2023-03-22T17:32:17Z",
    "1.0.0-pre.47": "2023-03-01T11:20:34Z",
    "1.0.0-pre.44": "2023-02-16T16:52:43Z",
    "1.0.0-pre.15": "2022-11-23T17:30:42Z",
    "1.0.0-exp.13": "2022-10-26T16:31:15Z",
    "1.0.0-exp.8": "2022-09-27T16:35:00Z",
    "0.51.1-preview.21": "2022-08-02T15:11:01Z",
    "0.51.0-preview.32": "2022-06-15T17:53:52Z",
    "0.50.1-preview.19": "2022-04-26T12:16:43Z",
    "0.50.0-preview.29": "2022-03-16T10:13:13Z",
    "0.6.0-preview.7": "2021-01-22T16:59:30Z",
    "0.5.0-preview.5": "2020-10-29T22:44:32Z",
    "0.4.0-preview.1": "2020-09-17T00:51:22Z",
    "0.3.0-preview.3": "2020-08-21T13:14:07Z",
    "0.2.0-preview.5": "2020-06-05T08:22:06Z",
    "0.1.0-preview.6": "2020-02-24T15:10:37Z",
    "0.0.4-preview.0": "2019-12-12T12:31:44Z",
    "0.0.3-preview.2": "2019-12-05T11:00:55Z",
    "0.0.2-preview.1": "2019-11-28T11:03:50Z",
    "0.0.1-preview.6": "2019-11-26T20:03:43Z"
  }
}
