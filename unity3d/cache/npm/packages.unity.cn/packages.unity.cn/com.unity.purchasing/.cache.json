{
  "dist-tags": {
    "latest": "4.13.1"
  },
  "versions": {
    "4.13.1": {
      "name": "com.unity.purchasing",
      "version": "4.13.1",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.services.core": "1.12.5",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.13/manual/index.html",
      "unity": "2020.3",
      "dist": {
        "shasum": "a88dd6304152d54a52fbdc67a2b86bc7f36b3103",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.13.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/01 BuyingConsumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "displayName": "01 Buying Consumables"
        },
        {
          "path": "Samples~/02 BuyingSubscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "displayName": "02 Buying Subscription"
        },
        {
          "path": "Samples~/03 FetchingAdditionalProducts",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "displayName": "03 Fetching Additional Products"
        },
        {
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation"
        },
        {
          "path": "Samples~/05 LocalReceiptValidation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "displayName": "05 Local Receipt Validation"
        },
        {
          "path": "Samples~/06 InitializeGamingServices",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "displayName": "06 Initialize Unity Gaming Services"
        },
        {
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "displayName": "Apple App Store - 01 Refreshing App Receipts"
        },
        {
          "path": "Samples~/Apple App Store - 02 RestoringTransactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "displayName": "Apple App Store - 02 Restoring Transactions"
        },
        {
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "displayName": "Apple App Store - 03 Handling Deferred Purchases"
        },
        {
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "displayName": "Apple App Store - 04 Retrieving Product Receipt"
        },
        {
          "path": "Samples~/Apple App Store - 05 FraudDetection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "displayName": "Apple App Store - 05 Fraud Detection"
        },
        {
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices"
        },
        {
          "path": "Samples~/Apple App Store - 07 gettingProductDetails",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "displayName": "Apple App Store - 07 Getting Product Details"
        },
        {
          "path": "Samples~/Apple App Store - 08 PromptingProducts",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "displayName": "Apple App Store - 08 Promoting Products"
        },
        {
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet"
        },
        {
          "path": "Samples~/Apple App Store - 10 CanMakePayments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "displayName": "Apple App Store - 10 Can Make Payments"
        },
        {
          "path": "Samples~/Apple App Store - 11 FamilySharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "displayName": "Apple App Store - 11 Family Sharing"
        },
        {
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions"
        },
        {
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions"
        },
        {
          "path": "Samples~/Google Play Store - 02 RestoringTransactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "displayName": "Google Play Store - 02 Restoring Transactions"
        },
        {
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "displayName": "Google Play Store - 04 Handling Deferred Purchases"
        },
        {
          "path": "Samples~/Google Play Store - 05 FraudDetection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "displayName": "Google Play Store - 05 Fraud Detection"
        }
      ],
      "_upm": {
        "changelog": "### Changed\n- Package auto-bumped via PETS for editor manifest distribution",
        "gameService": {
          "groupName": "Monetize",
          "groupIndex": 4,
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        }
      }
    },
    "5.0.1": {
      "name": "com.unity.purchasing",
      "version": "5.0.1",
      "displayName": "In-App Purchasing",
      "description": "Unity In-App Purchasing (IAP) allows you to sell digital content within your application. This package provides a unified API for handling in-app purchases across multiple platforms, including the Apple App Store and Google Play Store. Unity IAP simplifies implementing and managing purchases for different stores.\n\nFeatures:\n\n ▪ A single API to access all supported stores, making it easier to manage your in-game economy.\n ▪ Automatic integration with Unity Analytics for monitoring revenue and purchase data across platforms.\n ▪ Supports iOS, Mac, tvOS, and Google Play.\n ▪ Client-side receipt validation for Apple Store and Google Play.\n\nTo enable In-App Purchasing, install the package and open the Services window (Window > General > Services).\n\nUpgrade notes:\nThis release is a major update to the IAP package. Review the included sample for a complete example of how to use the new version. Upgrading is recommended to take advantage of the latest improvements and features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.services.core": "1.14.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@5.0/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "821fd0bcef6f2bf367100b4263df9fb4c1b213b1",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-5.0.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/01 BuyingConsumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "displayName": "01 Buying Consumables"
        },
        {
          "path": "Samples~/02 BuyingSubscription",
          "description": "This sample demonstrates the basics of handling subscription purchases using the entitlement system to check and manage subscription status.",
          "displayName": "02 Buying Subscription"
        },
        {
          "path": "Samples~/03 FetchingAdditionalProducts",
          "description": "Demonstrates how to dynamically fetch and display additional in-app products using the Store Controller in Unity IAP. Includes best practices for event subscription management.",
          "displayName": "03 Fetching Additional Products"
        },
        {
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation"
        },
        {
          "path": "Samples~/06 InitializeGamingServices",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "displayName": "06 Initialize Unity Gaming Services"
        },
        {
          "path": "Samples~/07 Catalog Provider",
          "description": "Demonstrates how to declare in-app products using a CatalogProvider in Unity IAP. Shows how to generate and use a product catalog JSON file.",
          "displayName": "07 Catalog Provider"
        },
        {
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "displayName": "Apple App Store - 01 Refreshing App Receipts"
        },
        {
          "path": "Samples~/Apple App Store - 02 HandlingDeferredPurchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "displayName": "Apple App Store - 02 Handling Deferred Purchases"
        },
        {
          "path": "Samples~/Apple App Store - 03 RetrievingJWSRepresentation",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "displayName": "Apple App Store - 03 Retrieving Product Receipt"
        },
        {
          "path": "Samples~/Apple App Store - 04 FraudDetection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "displayName": "Apple App Store - 04 Fraud Detection"
        },
        {
          "path": "Samples~/Apple App Store - 05 GettingIntroductoryPrices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "displayName": "Apple App Store - 05 Getting Introductory Subscription Prices"
        },
        {
          "path": "Samples~/Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to use Coded IAP in 5.0.0. ",
          "displayName": "Coded IAP 5.0.0 Sample"
        },
        {
          "path": "Samples~/Google Play Store - 05 FraudDetection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "displayName": "Google Play Store - 05 Fraud Detection"
        },
        {
          "path": "Samples~/Google Play Store - 06 Local Receipt Validation",
          "description": "This sample showcases how to do local receipt validation with the Google Play Store.",
          "displayName": "Google Play Store - 06 Local Receipt Validation"
        },
        {
          "path": "Samples~/Minimal Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to do a minimal implementation of Coded IAP in 5.0.0.",
          "displayName": "Minimal Coded IAP 5.0.0 Sample"
        }
      ],
      "_upm": {
        "changelog": "### Changed\n- Updated `com.unity.services.core` dependency to 1.14.0\n\n### Fixed\n- Coded IAP backwards compatibility fixes:\n  - `ProcessPurchase` will be invoked for restored purchases on their first encounter. This brings back the behaviour from IAP 4.13.0.\n  - Apple - Fixed `Product.hasReceipt` and `Product.receipt` falsely returning a receipt for products that were not purchased.",
        "gameService": {
          "groupName": "Monetize",
          "groupIndex": 4,
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        }
      }
    },
    "5.0.0": {
      "name": "com.unity.purchasing",
      "version": "5.0.0",
      "displayName": "In-App Purchasing",
      "description": "Unity In-App Purchasing (IAP) allows you to sell digital content within your application. This package provides a unified API for handling in-app purchases across multiple platforms, including the Apple App Store and Google Play Store. Unity IAP simplifies implementing and managing purchases for different stores.\n\nFeatures:\n\n ▪ A single API to access all supported stores, making it easier to manage your in-game economy.\n ▪ Automatic integration with Unity Analytics for monitoring revenue and purchase data across platforms.\n ▪ Supports iOS, Mac, tvOS, and Google Play.\n ▪ Client-side receipt validation for Apple Store and Google Play.\n\nTo enable In-App Purchasing, install the package and open the Services window (Window > General > Services).\n\nUpgrade notes:\nThis release is a major update to the IAP package. Review the included sample for a complete example of how to use the new version. Upgrading is recommended to take advantage of the latest improvements and features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.services.core": "1.12.5",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@5.0/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "2d186de38414f652564edd8e099c170cbbde19db",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-5.0.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/01 BuyingConsumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "displayName": "01 Buying Consumables"
        },
        {
          "path": "Samples~/02 BuyingSubscription",
          "description": "This sample demonstrates the basics of handling subscription purchases using the entitlement system to check and manage subscription status.",
          "displayName": "02 Buying Subscription"
        },
        {
          "path": "Samples~/03 FetchingAdditionalProducts",
          "description": "Demonstrates how to dynamically fetch and display additional in-app products using the Store Controller in Unity IAP. Includes best practices for event subscription management.",
          "displayName": "03 Fetching Additional Products"
        },
        {
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation"
        },
        {
          "path": "Samples~/06 InitializeGamingServices",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "displayName": "06 Initialize Unity Gaming Services"
        },
        {
          "path": "Samples~/07 Catalog Provider",
          "description": "Demonstrates how to declare in-app products using a CatalogProvider in Unity IAP. Shows how to generate and use a product catalog JSON file.",
          "displayName": "07 Catalog Provider"
        },
        {
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "displayName": "Apple App Store - 01 Refreshing App Receipts"
        },
        {
          "path": "Samples~/Apple App Store - 02 HandlingDeferredPurchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "displayName": "Apple App Store - 02 Handling Deferred Purchases"
        },
        {
          "path": "Samples~/Apple App Store - 03 RetrievingJWSRepresentation",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "displayName": "Apple App Store - 03 Retrieving Product Receipt"
        },
        {
          "path": "Samples~/Apple App Store - 04 FraudDetection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "displayName": "Apple App Store - 04 Fraud Detection"
        },
        {
          "path": "Samples~/Apple App Store - 05 GettingIntroductoryPrices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "displayName": "Apple App Store - 05 Getting Introductory Subscription Prices"
        },
        {
          "path": "Samples~/Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to use Coded IAP in 5.0.0. ",
          "displayName": "Coded IAP 5.0.0 Sample"
        },
        {
          "path": "Samples~/Google Play Store - 05 FraudDetection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "displayName": "Google Play Store - 05 Fraud Detection"
        },
        {
          "path": "Samples~/Google Play Store - 06 Local Receipt Validation",
          "description": "This sample showcases how to do local receipt validation with the Google Play Store.",
          "displayName": "Google Play Store - 06 Local Receipt Validation"
        },
        {
          "path": "Samples~/Minimal Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to do a minimal implementation of Coded IAP in 5.0.0.",
          "displayName": "Minimal Coded IAP 5.0.0 Sample"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Samples - Added updated samples:\n  - Added `01 Buying Consumables`\n  - Added `02 Buying Subscriptions`\n  - Added `03 Fetching Additional Products`\n  - Added `04 Integrating Self-Provided Backend Receipt Validation`\n  - Added `06 Initialize Unity Gaming Services`\n  - Added `07 Catalog Provider`\n  - Added `Apple App Store - 01 Refreshing App Receipts`\n  - Added `Apple App Store - 02 Handling Deferred Purchases`\n  - Added `Apple App Store - 03 Retrieving Product Receipt`\n  - Added `Apple App Store - 04 Fraud Detection`\n  - Added `Apple App Store - 05 Getting Introductory Subscription Prices`\n  - Added `Google Play Store - 05 Fraud Detection`\n  - Added `Google Play Store - 06 Local Receipt Validation`\n\n### Fixed\n- Apple - Purchase restoration fix - product ID field was incorrectly populated with transaction ID\n- Google Play - Added handling for duplicate product IDs in store responses by skipping duplicates and logging warnings instead of failing with dictionary key error.\n- Google Play - Fixed ProGuard minification issue preventing IAP from working in release builds\n\n### Changed\n- GooglePlay - Billing Library updated to 8.0.0 (was previously 7.1.1). No new feature support was added.\n- Improved transaction fetching performance through parallel processing optimization",
        "gameService": {
          "groupName": "Monetize",
          "groupIndex": 4,
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        }
      }
    },
    "5.0.0-pre.8": {
      "name": "com.unity.purchasing",
      "version": "5.0.0-pre.8",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nThis is a major overhaul of the IAP package. Consult the included sample for a complete example on how to use this new version.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS and Google Play.\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.services.core": "1.12.5",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@5.0/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "d8d3484fe2f2445485a1723725388b6a511451d8",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-5.0.0-pre.8.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to use Coded IAP in 5.0.0. ",
          "displayName": "Coded IAP 5.0.0 Sample"
        },
        {
          "path": "Samples~/Minimal Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to do a minimal implementation of Coded IAP in 5.0.0.",
          "displayName": "Minimal Coded IAP 5.0.0 Sample"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added `UnityIAPServies.StoreController` as a wrapper around the other services obtained through UnityIAPServices.\n  - Added `StoreController.PurchaseProduct(string productId)` to initiate a purchase using only the productId.\n- Added messages to `[Obsolete]` attributes on deprecated APIs, test methods, and internal classes.\n- Samples - Added Minimal Coded IAP 5.0.0 Sample to demonstrate a very basic implementation of Coded IAP.\n- Added documentation note in `UpgradeV5.md` clarifying the singleton behavior of `ConfigurationBuilder.Instance` and the use of its constructor as a workaround for scenarios requiring multiple initializations.\n- Added backwards compatibility support for `IAPListener` and `CodelessIAPButton` callbacks. When updating from an older IAP version, your scripts will continue to work without modification.\n- Apple - Added `IAppleStoreExtendedPurchaseService.SetRefreshAppReceipt` to refresh the receipt when a purchase succeeds (true by default). This is useful if are using a backwards compatible implementation or if you use `IOrderInfo.PurchasedProductInfo.subscriptionInfo`.\n- Added `IOrderInfo.Google` to provide access to information specific to orders coming from the Google Play Store.\n- Added `Orders.DeferredOrders` to provide access to deferred orders fetched from the store.\n- Added back `useFakeStoreUIMode` and `useFakeStoreAlways` variables to `StandardPurchasingModule` for backwards compatibility.\n  - Important: neither setting is respected by the FakeStore. Functionality has not been reimplemented.\n- Added back `Instance(AppStore androidStore)` call to `StandardPurchasingModule` for backwards compatibility. Calling `Instance(AppStore androidStore)` will return the same results as `Instance()` regardless of the provided AppStore.\n\n### Changed\n- IAP Catalog - Renamed `Automatically initialize UnityPurchasing (recommended)` to `Automatically initialize UnityIAPServices (recommended)`.\n  - Brought back `Apple Configuration`, `Google Configuration` and `Catalog Export` in IAP Catalog.\n  - Updated translation locales for Google Play Store and Apple App Store\n- Renamed APIs introduced since 5.0.0-pre.1 to improve consistency:\n  - `IStoreService.ConnectAsync` to `IStoreService.Connect`\n  - `IPurchaseService.ConfirmOrder` to `IPurchaseService.ConfirmPurchase`\n  - `IPurchaseService.IsProductEntitled` to `IPurchaseService.CheckEntitlement`\n  - `Entitlement.ProductChecked` to `Entitlement.Product`\n  - `Entitlement.EntitlementOrder` to `Entitlement.Order`\n  - `ConfirmOrderException` to `ConfirmPurchaseException`\n  - `INativeStore.RetrieveProducts` to `INativeStore.FetchProducts`\n- Callbacks introduced since 5.0.0-pre.1 were changed to events:\n  - `IProductService.AddProductsUpdatedAction` and `IProductService.RemoveProductsUpdatedAction` were replaced with `IProductService.OnProductsUpdated`\n  - `IProductService.AddProductsFetchFailedAction` and `IProductService.RemoveProductsFetchFailedAction` were replaced with `IProductService.OnProductsFetchFailed`\n  - `IPurchaseService.AddPendingOrderUpdatedAction` and `IPurchaseService.RemovePendingOrderUpdatedAction` were replaced with `IPurchaseService.OnPurchasePending`\n  - `IPurchaseService.AddConfirmedOrderUpdatedAction` and `IPurchaseService.RemoveConfirmedOrderUpdatedAction` were replaced with `IPurchaseService.OnPurchaseConfirmed`\n  - `IPurchaseService.AddPurchaseFailedAction` and `IPurchaseService.RemovePurchaseFailedAction` were replaced with `IPurchaseService.OnPurchaseFailed`\n  - `IPurchaseService.AddPurchaseDeferredAction` and `IPurchaseService.RemovePurchaseDeferredAction` were replaced with `IPurchaseService.OnPurchaseDeferred`\n  - `IPurchaseService.AddFetchedPurchasesAction` and `IPurchaseService.RemoveFetchedPurchasesAction` were replaced with `IPurchaseService.OnPurchasesFetched`\n  - `IPurchaseService.AddFetchPurchasesFailedAction` and `IPurchaseService.RemoveFetchPurchasesFailedAction` were replaced with `IPurchaseService.OnPurchasesFetchFailed`\n  - `IPurchaseService.AddCheckEntitlementAction` and `IPurchaseService.RemoveCheckEntitlementActio",
        "gameService": {
          "groupName": "Monetize",
          "groupIndex": 4,
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        }
      }
    },
    "4.13.0": {
      "name": "com.unity.purchasing",
      "version": "4.13.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.services.core": "1.12.5",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.13/manual/index.html",
      "unity": "2020.3",
      "dist": {
        "shasum": "f0b6c9dee9b94c70a36061f31deeb29d834cf092",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.13.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/01 BuyingConsumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "displayName": "01 Buying Consumables"
        },
        {
          "path": "Samples~/02 BuyingSubscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "displayName": "02 Buying Subscription"
        },
        {
          "path": "Samples~/03 FetchingAdditionalProducts",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "displayName": "03 Fetching Additional Products"
        },
        {
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation"
        },
        {
          "path": "Samples~/05 LocalReceiptValidation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "displayName": "05 Local Receipt Validation"
        },
        {
          "path": "Samples~/06 InitializeGamingServices",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "displayName": "06 Initialize Unity Gaming Services"
        },
        {
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "displayName": "Apple App Store - 01 Refreshing App Receipts"
        },
        {
          "path": "Samples~/Apple App Store - 02 RestoringTransactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "displayName": "Apple App Store - 02 Restoring Transactions"
        },
        {
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "displayName": "Apple App Store - 03 Handling Deferred Purchases"
        },
        {
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "displayName": "Apple App Store - 04 Retrieving Product Receipt"
        },
        {
          "path": "Samples~/Apple App Store - 05 FraudDetection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "displayName": "Apple App Store - 05 Fraud Detection"
        },
        {
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices"
        },
        {
          "path": "Samples~/Apple App Store - 07 gettingProductDetails",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "displayName": "Apple App Store - 07 Getting Product Details"
        },
        {
          "path": "Samples~/Apple App Store - 08 PromptingProducts",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "displayName": "Apple App Store - 08 Promoting Products"
        },
        {
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet"
        },
        {
          "path": "Samples~/Apple App Store - 10 CanMakePayments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "displayName": "Apple App Store - 10 Can Make Payments"
        },
        {
          "path": "Samples~/Apple App Store - 11 FamilySharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "displayName": "Apple App Store - 11 Family Sharing"
        },
        {
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions"
        },
        {
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions"
        },
        {
          "path": "Samples~/Google Play Store - 02 RestoringTransactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "displayName": "Google Play Store - 02 Restoring Transactions"
        },
        {
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "displayName": "Google Play Store - 04 Handling Deferred Purchases"
        },
        {
          "path": "Samples~/Google Play Store - 05 FraudDetection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "displayName": "Google Play Store - 05 Fraud Detection"
        }
      ],
      "_upm": {
        "changelog": "### Changed\n- GooglePlay - Billing Library updated to 7.1.1 (was previously 6.2.1). No new feature support was added.\n- GooglePlay - `GooglePlayProrationMode` has been replaced with `GooglePlayReplacementMode` to match the Google Play Billing Library.\n  - `GooglePlayProrationMode` has been marked `[Obsolete]`",
        "gameService": {
          "groupName": "Monetize",
          "groupIndex": 4,
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        }
      }
    },
    "5.0.0-pre.7": {
      "name": "com.unity.purchasing",
      "version": "5.0.0-pre.7",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nThis is a major overhaul of the IAP package. Consult the included sample for a complete example on how to use this new version.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS and Google Play.\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.services.core": "1.12.5",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@5.0/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "ee910341612ea1561470f93a1e43f9b46e6993e7",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-5.0.0-pre.7.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to use Coded IAP in 5.0.0. ",
          "displayName": "Coded IAP 5.0.0 Sample"
        },
        {
          "path": "Samples~/Minimal Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to do a minimal implementation of Coded IAP in 5.0.0.",
          "displayName": "Minimal Coded IAP 5.0.0 Sample"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added `UnityIAPServies.StoreController` as a wrapper around the other services obtained through UnityIAPServices.\n  - Added `StoreController.PurchaseProduct(string productId)` to initiate a purchase using only the productId.\n- Added messages to `[Obsolete]` attributes on deprecated APIs, test methods, and internal classes.\n- Samples - Added Minimal Coded IAP 5.0.0 Sample to demonstrate a very basic implementation of Coded IAP.\n- Added documentation note in `UpgradeV5.md` clarifying the singleton behavior of `ConfigurationBuilder.Instance` and the use of its constructor as a workaround for scenarios requiring multiple initializations.\n- Added backwards compatibility support for `IAPListener` and `CodelessIAPButton` callbacks. When updating from an older IAP version, your scripts will continue to work without modification.\n- Apple - Added `IAppleStoreExtendedPurchaseService.SetRefreshAppReceipt` to refresh the receipt when a purchase succeeds (true by default). This is useful if are using a backwards compatible implementation or if you use `IOrderInfo.PurchasedProductInfo.subscriptionInfo`.\n- Added `IOrderInfo.Google` to provide access to information specific to orders coming from the Google Play Store.\n- Added `Orders.DeferredOrders` to provide access to deferred orders fetched from the store.\n- Added back `useFakeStoreUIMode` and `useFakeStoreAlways` variables to `StandardPurchasingModule` for backwards compatibility.\n  - Important: neither setting is respected by the FakeStore. Functionality has not been reimplemented.\n- Added back `Instance(AppStore androidStore)` call to `StandardPurchasingModule` for backwards compatibility. Calling `Instance(AppStore androidStore)` will return the same results as `Instance()` regardless of the provided AppStore.\n\n### Changed\n- IAP Catalog - Renamed `Automatically initialize UnityPurchasing (recommended)` to `Automatically initialize UnityIAPServices (recommended)`.\n  - Brought back `Apple Configuration`, `Google Configuration` and `Catalog Export` in IAP Catalog.\n  - Updated translation locales for Google Play Store and Apple App Store\n- Renamed APIs introduced since 5.0.0-pre.1 to improve consistency:\n  - `IStoreService.ConnectAsync` to `IStoreService.Connect`\n  - `IPurchaseService.ConfirmOrder` to `IPurchaseService.ConfirmPurchase`\n  - `IPurchaseService.IsProductEntitled` to `IPurchaseService.CheckEntitlement`\n  - `Entitlement.ProductChecked` to `Entitlement.Product`\n  - `Entitlement.EntitlementOrder` to `Entitlement.Order`\n  - `ConfirmOrderException` to `ConfirmPurchaseException`\n  - `INativeStore.RetrieveProducts` to `INativeStore.FetchProducts`\n- Callbacks introduced since 5.0.0-pre.1 were changed to events:\n  - `IProductService.AddProductsUpdatedAction` and `IProductService.RemoveProductsUpdatedAction` were replaced with `IProductService.OnProductsUpdated`\n  - `IProductService.AddProductsFetchFailedAction` and `IProductService.RemoveProductsFetchFailedAction` were replaced with `IProductService.OnProductsFetchFailed`\n  - `IPurchaseService.AddPendingOrderUpdatedAction` and `IPurchaseService.RemovePendingOrderUpdatedAction` were replaced with `IPurchaseService.OnPurchasePending`\n  - `IPurchaseService.AddConfirmedOrderUpdatedAction` and `IPurchaseService.RemoveConfirmedOrderUpdatedAction` were replaced with `IPurchaseService.OnPurchaseConfirmed`\n  - `IPurchaseService.AddPurchaseFailedAction` and `IPurchaseService.RemovePurchaseFailedAction` were replaced with `IPurchaseService.OnPurchaseFailed`\n  - `IPurchaseService.AddPurchaseDeferredAction` and `IPurchaseService.RemovePurchaseDeferredAction` were replaced with `IPurchaseService.OnPurchaseDeferred`\n  - `IPurchaseService.AddFetchedPurchasesAction` and `IPurchaseService.RemoveFetchedPurchasesAction` were replaced with `IPurchaseService.OnPurchasesFetched`\n  - `IPurchaseService.AddFetchPurchasesFailedAction` and `IPurchaseService.RemoveFetchPurchasesFailedAction` were replaced with `IPurchaseService.OnPurchasesFetchFailed`\n  - `IPurchaseService.AddCheckEntitlementAction` and `IPurchaseService.RemoveCheckEntitlementActio",
        "gameService": {
          "groupName": "Monetize",
          "groupIndex": 4,
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        }
      }
    },
    "5.0.0-pre.6": {
      "name": "com.unity.purchasing",
      "version": "5.0.0-pre.6",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nThis is a major overhaul of the IAP package. Consult the included sample for a complete example on how to use this new version.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS and Google Play.\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.services.core": "1.12.5",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@5.0/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "afa6029b0d5df32751f531d4f688cf4e19021952",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-5.0.0-pre.6.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to use Coded IAP in 5.0.0. ",
          "displayName": "Coded IAP 5.0.0 Sample"
        },
        {
          "path": "Samples~/Minimal Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to do a minimal implementation of Coded IAP in 5.0.0.",
          "displayName": "Minimal Coded IAP 5.0.0 Sample"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added `UnityIAPServies.StoreController` as a wrapper around the other services obtained through UnityIAPServices.\n  - Added `StoreController.PurchaseProduct(string productId)` to initiate a purchase using only the productId.\n- Added messages to `[Obsolete]` attributes on deprecated APIs, test methods, and internal classes.\n- Samples - Added Minimal Coded IAP 5.0.0 Sample to demonstrate a very basic implementation of Coded IAP.\n- Added documentation note in `UpgradeV5.md` clarifying the singleton behavior of `ConfigurationBuilder.Instance` and the use of its constructor as a workaround for scenarios requiring multiple initializations.\n- Added backwards compatibility support for `IAPListener` and `CodelessIAPButton` callbacks. When updating from an older IAP version, your scripts will continue to work without modification.\n- Apple - Added `IAppleStoreExtendedPurchaseService.SetRefreshAppReceipt` to refresh the receipt when a purchase succeeds (true by default). This is useful if are using a backwards compatible implementation or if you use `IOrderInfo.PurchasedProductInfo.subscriptionInfo`.\n- Added `IOrderInfo.Google` to provide access to information specific to orders coming from the Google Play Store.\n- Added `Orders.DeferredOrders` to provide access to deferred orders fetched from the store.\n- Added back `useFakeStoreUIMode` and `useFakeStoreAlways` variables to `StandardPurchasingModule` for backwards compatibility.\n  - Important: neither setting is respected by the FakeStore. Functionality has not been reimplemented.\n- Added back `Instance(AppStore androidStore)` call to `StandardPurchasingModule` for backwards compatibility. Calling `Instance(AppStore androidStore)` will return the same results as `Instance()` regardless of the provided AppStore.\n\n### Changed\n- IAP Catalog - Renamed `Automatically initialize UnityPurchasing (recommended)` to `Automatically initialize UnityIAPServices (recommended)`.\n  - Brought back `Apple Configuration`, `Google Configuration` and `Catalog Export` in IAP Catalog.\n  - Updated translation locales for Google Play Store and Apple App Store\n- Renamed APIs introduced since 5.0.0-pre.1 to improve consistency:\n  - `IStoreService.ConnectAsync` to `IStoreService.Connect`\n  - `IPurchaseService.ConfirmOrder` to `IPurchaseService.ConfirmPurchase`\n  - `IPurchaseService.IsProductEntitled` to `IPurchaseService.CheckEntitlement`\n  - `Entitlement.ProductChecked` to `Entitlement.Product`\n  - `Entitlement.EntitlementOrder` to `Entitlement.Order`\n  - `ConfirmOrderException` to `ConfirmPurchaseException`\n  - `INativeStore.RetrieveProducts` to `INativeStore.FetchProducts`\n- Callbacks introduced since 5.0.0-pre.1 were changed to events:\n  - `IProductService.AddProductsUpdatedAction` and `IProductService.RemoveProductsUpdatedAction` were replaced with `IProductService.OnProductsUpdated`\n  - `IProductService.AddProductsFetchFailedAction` and `IProductService.RemoveProductsFetchFailedAction` were replaced with `IProductService.OnProductsFetchFailed`\n  - `IPurchaseService.AddPendingOrderUpdatedAction` and `IPurchaseService.RemovePendingOrderUpdatedAction` were replaced with `IPurchaseService.OnPurchasePending`\n  - `IPurchaseService.AddConfirmedOrderUpdatedAction` and `IPurchaseService.RemoveConfirmedOrderUpdatedAction` were replaced with `IPurchaseService.OnPurchaseConfirmed`\n  - `IPurchaseService.AddPurchaseFailedAction` and `IPurchaseService.RemovePurchaseFailedAction` were replaced with `IPurchaseService.OnPurchaseFailed`\n  - `IPurchaseService.AddPurchaseDeferredAction` and `IPurchaseService.RemovePurchaseDeferredAction` were replaced with `IPurchaseService.OnPurchaseDeferred`\n  - `IPurchaseService.AddFetchedPurchasesAction` and `IPurchaseService.RemoveFetchedPurchasesAction` were replaced with `IPurchaseService.OnPurchasesFetched`\n  - `IPurchaseService.AddFetchPurchasesFailedAction` and `IPurchaseService.RemoveFetchPurchasesFailedAction` were replaced with `IPurchaseService.OnPurchasesFetchFailed`\n  - `IPurchaseService.AddCheckEntitlementAction` and `IPurchaseService.RemoveCheckEntitlementActio",
        "gameService": {
          "groupName": "Monetize",
          "groupIndex": 4,
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        }
      }
    },
    "5.0.0-pre.5": {
      "name": "com.unity.purchasing",
      "version": "5.0.0-pre.5",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nThis is a major overhaul of the IAP package. Consult the included sample for a complete example on how to use this new version.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS and Google Play.\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.services.core": "1.12.5",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@5.0/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "d9fd2a929577a534cb42d7ed8d669d4f875bd42b",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-5.0.0-pre.5.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to use Coded IAP in 5.0.0. ",
          "displayName": "Coded IAP 5.0.0 Sample"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n- Apple - Fixed an issue where transactions involving a consumable already purchased in the same session would result in them being finished without invoking the callback set with `IPurchaseServive.AddPendingOrderUpdatedAction`.\n- Fixed an issue where some versions of the Unity Editor compiler were stripping `EmptyAnalyticsAdapter` when Analytics wasn't used.\n- Implemented `jwsRepresentation` in `AppleOrderInfo` to support JWS representation handling. See [Apple StoreKit Documentation](https://developer.apple.com/documentation/storekit/verificationresult/jwsrepresentation-21vgo) for more details.",
        "gameService": {
          "groupName": "Monetize",
          "groupIndex": 4,
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        }
      }
    },
    "5.0.0-pre.4": {
      "name": "com.unity.purchasing",
      "version": "5.0.0-pre.4",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nThis is a major overhaul of the IAP package. Consult the included sample for a complete example on how to use this new version.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS and Google Play.\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.services.core": "1.12.5",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@5.0/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "8ad3d6eb6f80554a8e73780227ea9cbebcd1baf5",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-5.0.0-pre.4.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to use Coded IAP in 5.0.0. ",
          "displayName": "Coded IAP 5.0.0 Sample"
        }
      ],
      "_upm": {
        "changelog": "### Changed\n- GooglePlay - Billing Library updated to 7.1.1 (was previously 6.2.1). No new feature support was added.\n- GooglePlay - `GooglePlayProrationMode` has been replaced with `GooglePlayReplacementMode` to match the Google Play Billing Library.\n  - `GooglePlayReplacementMode.Deferred` has been changed from `4` to `6` to match the Google Play Billing Library. This change was also applied to `GooglePlayProrationMode.Deferred`.\n  - `GooglePlayProrationMode` has been marked `[Obsolete]`\n\n### Fixed\n- Apple - Added missing callbacks for StoreKit 2.\n- Codeless - Fixed an issue where `PayoutDefinition` defined in the IAP Catalog was not being used.\n- IAP Catalog - Fixed an issue where `CatalogPopupProductType` was on the wrong namespace (`Editor` instead of `UnityEditor.Purchasing`).\n- IAP Catalog - Fixed an issue where the `Unknown` product type was available in the catalog.",
        "gameService": {
          "groupName": "Monetize",
          "groupIndex": 4,
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        }
      }
    },
    "5.0.0-pre.3": {
      "name": "com.unity.purchasing",
      "version": "5.0.0-pre.3",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nThis is a major overhaul of the IAP package. Consult the included sample for a complete example on how to use this new version.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS and Google Play.\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.services.core": "1.12.5",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@5.0/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "cd53c079c922c1a7482b88d1899902136a7edf34",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-5.0.0-pre.3.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to use Coded IAP in 5.0.0. ",
          "displayName": "Coded IAP 5.0.0 Sample"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Apple - Updated to [StoreKit 2](https://developer.apple.com/storekit/).\n  - All features previously in StoreKit 1 are still supported.\n  - New features from StoreKit 2 will be supported in a later release.\n  - StoreKit 1 is no longer supported and iOS devices will require iOS 15.0 or later.\n  - Added support for AppAccountToken, allowing associating purchases with an app-specific account identifier. It can be set using `SetAppAccountToken(Guid token)` on the StoreExtendedService (e.g., `IAppleStoreExtendedService.SetAppAccountToken`), and it is also exposed in the IAppleOrderInfo interface for better integration with order details. For more details, see [AppAccountToken documentation](https://developer.apple.com/documentation/storekit/transaction/appaccounttoken).\n- Apple - Updated PrivacyInfo.xcprivacy to reflect that IAP no longer uses required reason API.\n\n### Changed\n- Apple - CrossPlatformValidator is no longer used for receipt validation for Apple since StoreKit2 does it.\n- Apple - Receipt obfuscation for Apple has been removed.\n- Apple - `Product.appleProductIsRestored` is now obsolete since it's no longer used with StoreKit2.\n\n### Fixed\n- Fixed Non-Consumables being treated as Consumables (introduced by Unity IAP 5.0.0-pre.1)",
        "gameService": {
          "groupName": "Monetize",
          "groupIndex": 4,
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        }
      }
    },
    "5.0.0-pre.1": {
      "name": "com.unity.purchasing",
      "version": "5.0.0-pre.1",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nThis is a major overhaul of the IAP package. Consult the included sample for a complete example on how to use this new version.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS and Google Play.\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.12.5"
      },
      "unity": "2021.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "In-app purchasing 5.0.0 is a major overhaul of this package.\nConsult the `Coded IAP 5.0.0 Sample` for a complete example of how to use this new version.\n\n### Added\n- Retry Policies:\n  - Add `StoreService.Connect` method which initiates the connection to the store.\n  - Add `IRetryPolicy` interface that can be implemented to provide a custom retry\n    policy. `IRetryPolicy.ShouldRetry(IRetryPolicyInformation)` determines if the request should retried and can wait\n    before retrying.\n  - Add basic implementations of the `IRetryPolicy` such as `ExponentialRetryPolicy`\n    , `MaximumNumberOfAttemptsRetryPolicy`, `NoRetriesPolicy` and `TimeLimitRetryPolicy`.\n- New callbacks on IAP Button and IAP Listener for all the events\n\n### Fixed:\n- Apple - Fixed `SubscriptionPeriodUnit` to return the correct values: Week = 1, Month = 2 (previously Month = 1, Week = 2)\n- Apple - Fixed isFamilyShareable on tvOS to be only available on supported versions (14.0 and above).\n- Apple - Error codes when a purchase fails now always returns the code from Apple instead of defaulting to `SKErrorUnknown`.\n\n### Changed\n- IAP logs are prefixed with `InAppPurchasing`.\n- IAP Catalog\n  - Removed `Apple Configuration`, `Google Configuration` and `Catalog Export` from IAP Catalog since this is no longer supported by the stores.\n  - Moved the Google Configuration `Price` under `Descriptions` which is displayed when products havn't been retrieved yet or in Fake Store\n- Assemblies starting with `UnityEngine.Purchasing` have been renamed to `Unity.Purchasing`\n\n### Removed\n- Support for Windows Store (Universal Windows Platform)\n- Support for the Unity 2020 Editor and Engine. Please upgrade to Unity 2021.3 or later.\n- Android - Support for the Unity Distribution Portal via the In-App Purchasing package. You may still use the Unity Distribution Portal in older versions of In-App Purchasing, or by writing your own implementation of the Unity Distribution Portal SDK directly, or as a custom store.\n- Support for Legacy Analytics (com.unity.modules.unityanalytics). Please use Unity Game Services Analytics instead (com.unity.services.analytics)."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "5.0.0-pre.1"
      },
      "upmCi": {
        "footprint": "c53eaea36db91b23f2ddb31582039d36a1453dea"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@5.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "373373ea8a4145b9b68c3f0d9edc120e1abb46d3"
      },
      "samples": [
        {
          "displayName": "Coded IAP 5.0.0 Sample",
          "description": "This sample showcases how to use Coded IAP in 5.0.0. ",
          "path": "Samples~/Coded IAP 5.0.0 Sample"
        }
      ],
      "dist": {
        "shasum": "9531986d947c68467b7739aca3e92e3a4dbbf845",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-5.0.0-pre.1.tgz"
      }
    },
    "4.12.2": {
      "name": "com.unity.purchasing",
      "version": "4.12.2",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.12.5"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Fixed\n- GooglePlay - Fixed `Product.receipt`'s `price_amount_micros` returning a string instead of a long."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.12.2"
      },
      "upmCi": {
        "footprint": "544d481608f749e2abc9a1b8553f677e8a38b237"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.12/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "c838a7aeadc3894237ebf677be7d5d7d197e1e4d"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "649c6c7b3b1b6277839041f4987c0a1e66176678",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.12.2.tgz"
      }
    },
    "4.12.1": {
      "name": "com.unity.purchasing",
      "version": "4.12.1",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.12.5"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Changed\n- Apple - The change where `Product.appleProductIsRestored` was no longer sent to `ProcessPurchase` has been reverted.\n\n### Fixed\n- GooglePlay - Fixed an issue where a warning was output in the logs when retrieving purchases."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.12.1"
      },
      "upmCi": {
        "footprint": "e81258f0d37262722e720eb75951735128491391"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.12/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "31338bfad91d15e07a80ab167e571eede965ef0c"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "7f1e587b2095ca55383098c925342e7f6dd51293",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.12.1.tgz"
      }
    },
    "4.12.1-pre.4": {
      "name": "com.unity.purchasing",
      "version": "4.12.1-pre.4",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.12.5"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Fixed\n- GooglePlay - Fixed an issue that happens on Windows when disabling the IAP Dependencies.\n- GooglePlay - Fixed an `InvalidOperationException` that could occur when obtaining purchases. (Since Unity IAP 4.6.0)"
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.12.1-pre.4"
      },
      "upmCi": {
        "footprint": "a63f0cfc5d1a8482eed20ad372d2ce80cf08d644"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.12/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "8cfc70ac213593b914e7396fdd32c5f31bd8b7d4"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "6b624da8d0dd87db9eb98d2a0c69703a329be2f9",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.12.1-pre.4.tgz"
      }
    },
    "4.12.1-pre.3": {
      "name": "com.unity.purchasing",
      "version": "4.12.1-pre.3",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.12.5"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Changed\n- Apple - Retrieved purchases from the store will be considered as `appleProductIsRestored`.\n- Apple - `Product.appleProductIsRestored` will no longer be sent to `ProcessPurchase` since they have already been processed.\n- Apple - The changes above will improve Analytics data by avoiding duplicate purchase events.\n\n### Fixed\n- GooglePlay - Fixed an issue where dependencies were added after dependency resolution happened resulting in an error.\n- GooglePlay - Fixed `Product.receipt`'s `price_amount_micros` returning the price instead of the price in micro-units.\n- GooglePlay - Fixed `NullReferenceException` occurring when retrieving products on Unity Engine 2021.2 and earlier.\n- GooglePlay - Fixed `OnProductReceived` callback not being fired with an invalid ProductID."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.12.1-pre.3"
      },
      "upmCi": {
        "footprint": "2a2e499f77f34c88a8a8967adac96ba1400a0900"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.12/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "e09db56a0b80a1d4c27d61b1408fadc7b1be4234"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "5f42e015ec1cb7a110518ba208a613215f82297f",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.12.1-pre.3.tgz"
      }
    },
    "4.12.1-pre.1": {
      "name": "com.unity.purchasing",
      "version": "4.12.1-pre.1",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.12.5"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Fixed\n- GooglePlay - Fixed errors related to `CloneReference` on Unity Engine 2021.1.\n\n### Removed\n- Removed unnecessary Android dependency, `androidx.activity:activity-compose:1.3.1`, which could cause conflicts with other plugins."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.12.1-pre.1"
      },
      "upmCi": {
        "footprint": "8e7c3e1f483ff409f9d6e9a422a61958a1fc729d"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.12/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "ed4505208f3bcbcf72a12da60e5d7eec5af8e9e5"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "ca7fdcf61d1d5c463f1b93be36a18ad04492eda1",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.12.1-pre.1.tgz"
      }
    },
    "4.12.0": {
      "name": "com.unity.purchasing",
      "version": "4.12.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.12.5"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- GooglePlay - `IGooglePlayStoreExtensions.GetObfuscatedAccountId(Product product)` has been added to obtain the obfuscated account ID of the purchase set with `IGooglePlayConfiguration.SetObfuscatedAccountId`.\n- GooglePlay - `IGooglePlayStoreExtensions.GetObfuscatedProfileId(Product product)` has been added to obtain the obfuscated profile ID of the purchase set with `IGooglePlayConfiguration.SetObfuscatedProfileId`.\n- Apple - Added visionOS support\n\n### Changed\n- Upgraded `com.unity.services.core` from 1.8.2 to 1.12.5 to include their Apple privacy manifest.\n- GooglePlay - Dependencies are now injected in the gradle files. The Billing aar is no longer included.\n- GooglePlay - Billing Library updated to 6.2.1 (was previously 5.2.1). No new feature support was added. Subscriptions must still have only 1 base plan.\n- GooglePlay - Updated the internal implementation to use `productDetails` instead of `skuDetails` to solve the `setOfferToken` warning issued by Google.\n- GooglePlay - `IGooglePlayStoreExtensions.GetPurchaseState(Product product)` has been updated to use the [getPurchaseState() instead of getOriginalJson()](https://developer.android.com/google/play/billing/integrate#pending). This change will make the purchase state more reliable.\n- GooglePlay - `IGooglePlayStoreExtensions.ConfirmSubscriptionPriceChange` has been marked `[Obsolete]` as it is no longer supported since Google Play Billing Library 6.0.0. For alternatives, see the [price changes guide](https://developer.android.com/google/play/billing/price-changes).\n- GooglePlay - `IStoreListener.OnInitializeFailed` for `InitializationFailureReason.PurchasingUnavailable` will now return the BillingResponseCode when product retrieval is successful, but an error occured and no products were returned.\n\n### Fixed\n- Fixed `OnPurchaseFailed` - It now returns the `productId` (previously the `transactionId`) in the `PurchaseFailureDescription` when the product isn't available for purchase.\n- Fixed a NullReferenceException when retrieving products on Unity Engine 2020.\n\n### Removed\n- GooglePlay - The `iconUrl` and `skuDetailsToken` sub-entry to the `Product.receipt`'s `\"Payload\"`'s `\"skuDetails\"` will now return an empty string since they are no longer supported."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.12.0"
      },
      "upmCi": {
        "footprint": "75e81fa5f2b97bee3999379f12345c7712162201"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.12/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "8615c80aac558fdbe941fd7401c06c83355507b1"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "c7eadb234fb39fe7c5ee5283270ec4d04b3b67c4",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.12.0.tgz"
      }
    },
    "4.11.0": {
      "name": "com.unity.purchasing",
      "version": "4.11.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.8.2"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- GooglePlay - `IGooglePlayConfiguration.SetMaxConnectionAttempts(int maxConnectionAttempts)` has been added to specify the max connection attempts to the Google Play Store.\n- Apple - Added privacy manifest to comply with Apple's new privacy requirements. More details on how the Unity Engine supports this can be found [here](https://forum.unity.com/threads/apple-privacy-manifest-updates-for-unity-engine.1529026/).\n- Added `ConfigurationBuilder.logUnavailableProducts` to specify if unavailable products should be logged.\n\n### Changed\n- GooglePlay - The default max connection attempt to the Google Play Store has been increased from 1 to 3. See `IGooglePlayConfiguration.SetMaxConnectionAttempts` to configure this to a different value.\n- Apple - The log when retrieving products (SKProductsResponse) now also contains the invalid products count.\n- Improved `IStoreListener.OnInitializeFailed` for `InitializationFailureReason.NoProductsAvailable` by adding a message to clarify whether the store returned products or not.\n\n### Fixed\n- GooglePlay - Fixed AndroidJavaObject not being disposed causing a global reference table overflow in an edge case.\n- GooglePlay - Fixed bug causing BillingClient duplication resulting in ANR.\n- Apple - Fixed isFamilyShareable on tvOS to be only available on supported versions (14.0 and above).\n- Apple - Error codes when a purchase fails now always returns the code from Apple instead of defaulting to `SKErrorUnknown`.\n- Fixed Analytics' transactionServer being null."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.11.0"
      },
      "upmCi": {
        "footprint": "72d426a29282f0ac1ae5c00e4a52102f61fe97f4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.11/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "d048512094268963253b336dd8eba44548759d38"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "f859f6d81f2915c6fddfafb5cc276f841939e14b",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.11.0.tgz"
      }
    },
    "4.10.0": {
      "name": "com.unity.purchasing",
      "version": "4.10.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.8.2"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Changed\n- Unity Distribution Portal - IAP will retract support for UDP at some point in the near future (Announcement TBD). Until then, all UDP features will continue to function, but the public interfaces, as well as some private functions are now marked `[Obsolete]`. In the next major update these will all be removed and UDP will cease to function with that version of In-App Purchasing and those that follow.\n- Unity Distribution Portal - If the editor is unable to connect to the UDP backend, the developer can now use some UDP catalog features in offline mode. This allows the developer to continue to enter prices, meaning that prices will need to be synced manually. In this case, we strongly suggest you sync your prices properly once connection is re-established. A warning message will display in the Catalog if the editor is unable to connect to the UDP backend.\n- Analytics - The Legacy Analytics built-in module, com.unity.modules.unityanalytics, is now no longer a dependency. You may not remove it from your project if you don't use it. Make sure it is in your project if you do use it.\n- Project Settings - In the Services Project Settings page of the Editor, we have changed the endpoint from which the Google Play Key is obtained. Also, instead of setting the key directly in the editor, there is now a dashboard link to set it directly on the backend to avoid future errors.\n\n### Fixed\n- Google Play - Some versions of the Unity Editor compiler were stripping `GooglePurchaseUpdatedListener.onPurchasesUpdated`, which was assigned as a callback to the Google Billing module, causing a lack of purchase failure callbacks, and logging `\"No such proxy method:\"`. Also fixed this for `BillingClientStateListener.onBillingServiceDisconnected`, `BillingClientStateListener.onBillingSetupFinished` and `SkuDetailsResponseListener.onSkuDetailsResponse`."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.10.0"
      },
      "upmCi": {
        "footprint": "313e6114563bae2e5578a67d5c5591869ae28a71"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.10/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "c1569b96eee83bd027cadf45a97ec73f6edf6661"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "7e73d9ebd99a8df2cd3cab22c0f61a830d8dcf85",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.10.0.tgz"
      }
    },
    "4.9.4": {
      "name": "com.unity.purchasing",
      "version": "4.9.4",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.8.1"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Changed\n- Google Play - Billing Library updated to 5.2.1 (was previously 5.1.0). No new feature support was added, this is simply to add compatibility with Android 14.\n- Apple - Using the CrossPlatformValidation (or AppleValidator), receipts will now be validated if their certificate chain is encoded in SHA-256 instead of SHA-1. Old receipts encoded in SHA-1 will still be validated. See [Apple Technical Note](https://developer.apple.com/documentation/technotes/tn3138-handling-app-store-receipt-signing-certificate-changes)."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.9.4"
      },
      "upmCi": {
        "footprint": "19e0452c9372b862949f9f812aa23ed31b53a489"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.9/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "68f2d826211743b93100781be51c9209ee1377be"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "403cf0895bc764ad684b4d314dc97a152c0e00c9",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.9.4.tgz"
      }
    },
    "4.9.3": {
      "name": "com.unity.purchasing",
      "version": "4.9.3",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.8.1"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Changed\n- Analytics events are now sent when a purchase has been confirmed (`ConfirmPendingTransaction` or `ProcessPurchase` returning `PurchaseProcessingResult.Complete`). This will improve the accuracy of revenue tracking by no longer considering pending purchases.\n- Updated `Product.transactionID`, `Product.hasReceipt` and `Product.receipt` documentation to include pending transaction use cases.\n- Updated samples to use `IDetailedStoreListener` and its improved `OnPurchaseFailed` callback.\n- Added a new `RefreshAppReceipt(Action<string> successCallback, Action<string> errorCallback)` callback containing more information when the errorCallback is invoked in `IAppleExtensions : IStoreListener`.\n\n### Fixed\n- `OnPurchaseFailed` will no longer log an error when there's only new IAP Buttons with no IAP Listener.\n- Apple - Improved the accuracy of `Product.appleProductIsRestored` when using the restore transaction button. These will now correctly be flagged as true.\n- Codeless - `OnPurchaseFailed(Product, PurchaseFailureDescription)` callback was not invoked in `IAP Listener`"
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.9.3"
      },
      "upmCi": {
        "footprint": "91415d00952a4a457502d551566c21f547eef3d5"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.9/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "42718bbbc4b238be117b2c0c72c843152dffec63"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "93f5f173cccb99d762f96f738f3ab02981f8df05",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.9.3.tgz"
      }
    },
    "4.9.2": {
      "name": "com.unity.purchasing",
      "version": "4.9.2",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.8.1"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Changed\n- Analytics events are now sent when a purchase has been confirmed (`ConfirmPendingTransaction` or `ProcessPurchase` returning `PurchaseProcessingResult.Complete`). This will improve the accuracy of revenue tracking by no longer considering pending purchases.\n- Updated `Product.transactionID`, `Product.hasReceipt` and `Product.receipt` documentation to include pending transaction use cases.\n- Updated samples to use `IDetailedStoreListener` and its improved `OnPurchaseFailed` callback.\n- Added a new `RefreshAppReceipt(Action<string> successCallback, Action<string> errorCallback)` callback containing more information when the errorCallback is invoked in `IAppleExtensions : IStoreListener`.\n\n### Fixed\n- `OnPurchaseFailed` will no longer log an error when there's only new IAP Buttons with no IAP Listener.\n- Apple - Improved the accuracy of `Product.appleProductIsRestored` when using the restore transaction button. These will now correctly be flagged as true.\n- Codeless - `OnPurchaseFailed(Product, PurchaseFailureDescription)` callback was not invoked in `IAP Listener`"
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.9.2"
      },
      "upmCi": {
        "footprint": "0c244d8f75e60206f34c5ba7328d9a5c93566401"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.9/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "e15bdead21c96f6cbb6cf3592b6d2caaf0fa80b0"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "eb0d8b374954c3a113378e5a2d1ce95242812ba3",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.9.2.tgz"
      }
    },
    "4.8.0": {
      "name": "com.unity.purchasing",
      "version": "4.8.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.8.1"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- Added new [IAP Button](https://docs.unity3d.com/Packages/com.unity.purchasing@4.8/manual/CodelessIAPButton.html) in the editor. This new button allows for more UI customization.  The new button will no longer update the button fields by default.\n- Added a new event `OnProductFetched(Product)` to the [IAP Listener](https://docs.unity3d.com/Packages/com.unity.purchasing@4.8/manual/IAPListener.html) and to the [IAP Button](https://docs.unity3d.com/Packages/com.unity.purchasing@4.8/manual/CodelessIAPButton.html) it is called after fetching products from the app stores.\n- Added a new `OnPurchaseFailed(Product, PurchaseFailureDescription)` callback containing more information on the failed purchase in `IDetailedStoreListener : IStoreListener`\n\n### Changed\n- [IAP Button](https://docs.unity3d.com/Packages/com.unity.purchasing@4.8/manual/IAPButton.html) is now obsolete.\n- Google Play - Billing Library update from version 4.0.0 to 5.1.0 [Google Release Notes](https://developer.android.com/google/play/billing/release-notes).\n    New Google Billing features are not supported yet, they will be included in a future major update.\n- Removed the nullable operator `?` from public interfaces and classes.\n- `IStoreListener.OnPurchaseFailed` is now obsolete.\n- When present, Analytics 4.4.0 and above will now use the new interface `IAnalyticsStandardEventComponent` from Services Cores 1.8.1.\n- Upgraded `com.unity.services.core` from 1.5.2 to 1.8.1.\n\n### Fixed\n- Samples - Some samples had IAP 4.6.0 `IStoreListener` changes not completely implemented causing compilation errors."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.8.0"
      },
      "upmCi": {
        "footprint": "39a81f23b11eb69a6d62e7d019d33fcaf7c35c46"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.8/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "764a3bd5b373bbdb7bbd3a87a2b260204d2b1365"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "74ff9a8b836b10b566d4eaecaf1db17bee303ffb",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.8.0.tgz"
      }
    },
    "4.7.0": {
      "name": "com.unity.purchasing",
      "version": "4.7.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.5.2"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- Added `storeSpecificErrorCode` to `PurchaseFailureDescription.message` when available.\n\n### Fixed\n- Unity IAP will consider the call to `UnityPurchasing.initialize` completed before invoking the correct callback `IStoreListener.OnInitialized` or `IStoreListener.OnInitializeFailed`. This prevents these callbacks from being invoked more than once per initialization.\n- GooglePlay - Fixed `No such proxy method` exception in our representation of `BillingClientStateListener.onBillingServiceDisconnected()` introduced by Unity IAP 4.6.0\n- Apple - Fixed a `NullReferenceException` happening when the receipt isn't found.\n\n### Changed\n- Removed `com.unity.services.analytics` from the IAP SDK dependencies"
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.7.0"
      },
      "upmCi": {
        "footprint": "ed2d83ca5c36a9191372ae3683b492f6d069bda0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.7/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "5060daf07dab02e284541921b99c4e01e2673503"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "63a69bf634cfca3bd99cc000e043dcff09eac24c",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.7.0.tgz"
      }
    },
    "4.6.0": {
      "name": "com.unity.purchasing",
      "version": "4.6.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.5.2",
        "com.unity.services.analytics": "4.2.0"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://dashboard.unity3d.com/",
          "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
          "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- Added a new restore transaction callback `RestoreTransactions(Action<bool, string> callback)` to obtain the error string when RestoreTransactions is not successful (`IAppleExtensions` and `IGooglePlayStoreExtensions`).\n- Added a new initialize failed callback `IStoreListener.OnInitializeFailed(InitializationFailureReason, string)` to obtain the error string when OnInitializeFailed is invoked.\n- Added a new setup failed callback `IStoreCallback.OnSetupFailed(InitializationFailureReason, string)` to obtain the error string when OnSetupFailed is invoked.\n- Added a new FetchAdditionalProducts. The failCallback contains an error string. `IStoreController.FetchAdditionalProducts(HashSet<ProductDefinition>, Action, Action<InitializationFailureReason, string>)`\n- Apple - `Product.appleOriginalTransactionId` : Returns the original transaction ID. This field is only available when the purchase was made in the active session.\n- Apple - `Product.appleProductIsRestored` : Indicates whether the product has been restored.\n- GooglePlay - `IGooglePlayConfiguration.SetFetchPurchasesExcludeDeferred(bool exclude)` has been added to revert to the previous behaviour. This is not recommended and should only be used if `Deferred` purchases are handled in your `IStoreListener.ProcessPurchase`.\n- GooglePlay - `IGooglePlayStoreExtensions.GetPurchaseState(Product product)` has been added to obtain the `GooglePurchaseState` of a product.\n- GooglePlay - Added missing values to `GoogleBillingResponseCode` in order to output it in `PurchaseFailureDescription`'s message when available.\n- Codeless - Added to the [IAP Button](https://docs.unity3d.com/Packages/com.unity.purchasing@4.6/manual/IAPButton.html) the option to add a script for the On Transactions Restored: `void OnTransactionsRestored(bool success, string? error)`\n\n### Changed\n- Upgraded `com.unity.services.core` from 1.3.1 to 1.5.2\n- Upgraded `com.unity.services.analytics` from 4.0.1 to 4.2.0\n- The old OnInitializeFailed `OnInitializeFailed(InitializationFailureReason error)` was marked `Obsolete`\n- The old OnSetupFailed `OnSetupFailed(InitializationFailureReason reason)` was marked `Obsolete`\n- The old FetchAdditionalProducts `FetchAdditionalProducts(HashSet<ProductDefinition> additionalProducts, Action successCallback, Action<InitializationFailureReason> failCallback)` was marked `Obsolete`\n- The old restore transaction callback `RestoreTransactions(Action<bool> callback)` was marked `Obsolete` (`IAppleExtensions` and `IGooglePlayStoreExtensions`).\n- Apple - Transactions received from Apple that are invalid (where the product is not entitled) will no longer output the `Finishing transaction` log. This only affects transactions that never reached the `ProcessPurchase`.\n- GooglePlay - The enum `GooglePurchaseState` now recognizes `4` as `Deferred`.\n\n### Fixed\n- Analytics - A ServicesInitializationException introduced in Analytics 4.3.0 is now handled properly.\n- Analytics - Fixed an issue where transactions events were invalidated when there was no localization data for a product.\n- GooglePlay - Fixed a `NullReferenceException` when querying sku details while the BillingClient is not ready.\n- GooglePlay - Fixed [Application Not Responding (ANR)](https://developer.android.com/topic/performance/vitals/anr) when foregrounding the application while disconnected from the Google Play Store.\n- GooglePlay - Limited the occurence of `PurchasingUnavailable` errors when retrieving products while in a disconnected state to once per connection.\n- GooglePlay - `Deferred` purchases are, by default, no longer sent to `IStoreListener.ProcessPurchase` when fetching purchases. This avoids the possibility of granting products that were not paid for. These purchases will only be processed once they become `Purchased`. This can be reverted with `IGooglePlayConfiguration.SetFetchPurchasesExcludeDeferred(bool exclude)` to not exclude them, but `Deferred` purchases will need to be handled in `IStoreListener.ProcessPurchase`."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.6.0"
      },
      "upmCi": {
        "footprint": "ef0834f685faf8a4eee2aee17bdf896d10990621"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.6/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "42927a3b866999421b2df26e836f720feb67a743"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "6b59f05f7b6e3b0d00b7ca5248bf966399a80304",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.6.0.tgz"
      }
    },
    "4.5.2": {
      "name": "com.unity.purchasing",
      "version": "4.5.2",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.5.2"
      },
      "upmCi": {
        "footprint": "8d7fcd58912dafc667eb886e77d0c64cb61f2cdb"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@4.5/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "2e002e868803fadde53e54c4029e776932314588"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "a94bc4ac57830976d8782b5f5da01ce45f517f2b",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.5.2.tgz"
      }
    },
    "4.5.1": {
      "name": "com.unity.purchasing",
      "version": "4.5.1",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.5.1"
      },
      "upmCi": {
        "footprint": "bfa3c3fe856a3713d41034c9eb9b81a8ac896f44"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "0e6a0e037cbfe72c55e5eff3c186ef29484f6636"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "f1d12a6c12403ebc726e870fec0b0eecee2c69cd",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.5.1.tgz"
      }
    },
    "4.5.0": {
      "name": "com.unity.purchasing",
      "version": "4.5.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.5.0"
      },
      "upmCi": {
        "footprint": "ef72f04760c486d0d36b36a54497a5213b12e03a"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "fd22d9cd3bd08b92a9b38e4fbfc1391c45b5e538"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 11 Family Sharing",
          "description": "This sample showcases how to use Unity IAP to manage family shared purchases.",
          "path": "Samples~/Apple App Store - 11 FamilySharing"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "17d22453009609be06a949894ccacaa06e62bd56",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.5.0.tgz"
      }
    },
    "4.4.1": {
      "name": "com.unity.purchasing",
      "version": "4.4.1",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.4.1"
      },
      "upmCi": {
        "footprint": "a69c6d1780588a2c6705495db80ad434c9e1f04e"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "9dba5d5eda45d5841b3bcb9fadeba1b2ed5ef45b"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "dist": {
        "shasum": "4ffc6c2ed11cbda34b8442b9e4321ac7166954bf",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.4.1.tgz"
      }
    },
    "4.4.0": {
      "name": "com.unity.purchasing",
      "version": "4.4.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.4.0.tgz",
        "shasum": "e4603c417e7722d8db0b35e3c1b3e74fe851d48a"
      },
      "upmCi": {
        "footprint": "96eed2b3c93a18c9512177b87bbc7c736957dec9"
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "94c5a447a90fc84222a89d4cffe216b3cfba7ef6"
      },
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap",
          "configurePath": "Project/Services/In-App Purchasing",
          "groupName": "Monetize"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- GooglePlay - Google Play Billing Library version 4.0.0.\n  - The Multi-quantity feature is not yet supported by the IAP package and will come in a future update. **Do not enable `Multi-quantity` in the Google Play Console.**\n  - Add support for\n      the [IMMEDIATE_AND_CHARGE_FULL_PRICE](https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.ProrationMode#IMMEDIATE_AND_CHARGE_FULL_PRICE)\n      proration mode. Use `GooglePlayProrationMode.ImmediateAndChargeFullPrice` for easy access.\n\n### Fixed\n- GooglePlay - Fix `IGooglePlayConfiguration.SetDeferredPurchaseListener`\n  and `IGooglePlayConfiguration.SetDeferredProrationUpgradeDowngradeSubscriptionListener` callbacks sometimes not being\n  called from the main thread.\n- GooglePlay - When configuring `IGooglePlayConfiguration.SetQueryProductDetailsFailedListener(Action<int> retryCount)`, the action will be invoked with retryCount starting at 1 instead of 0.\n- GooglePlay - Added a validation when upgrading/downgrading a subscription that calls `IStoreListener.OnPurchaseFailed` with `PurchaseFailureReason.ProductUnavailable` when the old transaction id is empty or null. This can occur when attempting to upgrade/downgrade a subscription that the user doesn't own."
      },
      "unity": "2020.3",
      "samples": [
        {
          "path": "Samples~/01 BuyingConsumables",
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase."
        },
        {
          "path": "Samples~/02 BuyingSubscription",
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription."
        },
        {
          "path": "Samples~/03 FetchingAdditionalProducts",
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller."
        },
        {
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation",
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP."
        },
        {
          "path": "Samples~/05 LocalReceiptValidation",
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store."
        },
        {
          "path": "Samples~/06 InitializeGamingServices",
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API"
        },
        {
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt",
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts."
        },
        {
          "path": "Samples~/Apple App Store - 02 RestoringTransactions",
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application."
        },
        {
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases",
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations."
        },
        {
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt",
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases."
        },
        {
          "path": "Samples~/Apple App Store - 05 FraudDetection",
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud."
        },
        {
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices",
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information."
        },
        {
          "path": "Samples~/Apple App Store - 07 gettingProductDetails",
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details."
        },
        {
          "path": "Samples~/Apple App Store - 08 PromptingProducts",
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store."
        },
        {
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet",
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes."
        },
        {
          "path": "Samples~/Apple App Store - 10 CanMakePayments",
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device."
        },
        {
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription",
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service."
        },
        {
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription",
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service."
        },
        {
          "path": "Samples~/Google Play Store - 02 RestoringTransactions",
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application."
        },
        {
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange",
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes."
        },
        {
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases",
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations."
        },
        {
          "path": "Samples~/Google Play Store - 05 FraudDetection",
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud."
        }
      ],
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.4.0"
      }
    },
    "4.3.0": {
      "name": "com.unity.purchasing",
      "version": "4.3.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ],
        "changelog": "### Added\n- GooglePlay - API `IGooglePlayConfiguration.SetQueryProductDetailsFailedListener(Action<int>)` called when Unity IAP fails to query product details. The `Action` will be called on each query product details failure with the retry count. See documentation \"Store Guides\" > \"Google Play\" for a sample usage."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.3.0"
      },
      "upmCi": {
        "footprint": "0ce80874c9229d35d310a72c5334ca2ee6617c75"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "22afb8218d24e44d7eaa04f57aed2bebe79b82e8"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.3.0",
      "_integrity": "sha512-u8wDxLUMTkLg3i49rJaAX0645J04KKChxGs3SWXq1EiC3Uzw59v3s224N1j1/NEaFfBc1CKjJRjOfd7uSv2Otw==",
      "_resolved": "/tmp/com.unity.purchasing@4.3.0-r4htmuzd.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.3.0-r4htmuzd.tgz",
      "dist": {
        "shasum": "c65999ca24df78eea62c5ad5d12d9c0d7ebb585f",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.3.0.tgz"
      }
    },
    "4.2.1": {
      "name": "com.unity.purchasing",
      "version": "4.2.1",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.1"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Fixed\n- Downgrade `com.unity.services.core` from 1.4.1 to 1.3.1 due to a new bug found in 1.4.1"
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.2.1"
      },
      "upmCi": {
        "footprint": "5d77653888c5b36e3c4caa909124141ea75b1c19"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "258ef39fae29e6ea64d6813cd615b9424e3a9955"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "06 Initialize Unity Gaming Services",
          "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
          "path": "Samples~/06 InitializeGamingServices"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.2.1",
      "_integrity": "sha512-vxcTKglAYHspn+5LMPZpWhFmv/q+BBJ3ak5wqk+mkbNRgAPDDOU4BWm/MIngfUy30LNkhAqoKqT3B1eNtKri7A==",
      "_resolved": "/tmp/com.unity.purchasing@4.2.1-90lcv64_.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.2.1-90lcv64_.tgz",
      "dist": {
        "shasum": "ec768894c0d685f8eee8ff3a37e0377b85616ac4",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.2.1.tgz"
      }
    },
    "4.1.5": {
      "name": "com.unity.purchasing",
      "version": "4.1.5",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      },
      "unity": "2019.4",
      "_upm": {
        "changelog": "### Fixed\n- GooglePlay - Fixed a null reference exception introduced in Unity IAP 4.1.4 that could happen when cancelling an in-app purchase."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.5"
      },
      "upmCi": {
        "footprint": "4522553ac350509286a56df3b19e3e6ef28c8e2e"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "e85a08b1c40e0237d1455cd2032430b72b82d183"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.5",
      "_integrity": "sha512-28Af8xbg57WVngWfOz8BBXNMBPAlcwos0/jEeUruj3ROqu7qr+1c284dTyKPq3Nbbz6lg3N6uY4NLp6ixLPO1A==",
      "_resolved": "/tmp/com.unity.purchasing@4.1.5-tmdej03i.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.1.5-tmdej03i.tgz",
      "dist": {
        "shasum": "ec2a2ec4e647e988e6cc8c7cdb00da6f7ebdaa74",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.1.5.tgz"
      }
    },
    "4.2.0-pre.2": {
      "name": "com.unity.purchasing",
      "version": "4.2.0-pre.2",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.0-pre.2"
      },
      "unity": "2020.3",
      "_upm": {
        "changelog": "### Added\n- Support for Unity Analytics TransactionFailed event.\n- Sample showcasing how to initialize [Unity Gaming Services](https://unity.com/solutions/gaming-services) using the [Services Core API](https://docs.unity.com/ugs-overview/services-core-api.html)\n\n### Changed\n- The Analytics notice in the In-App Purchasing service window has been removed for Unity Editors 2022 and up."
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.2.0-pre.2"
      },
      "upmCi": {
        "footprint": "e5c58b5ba0a54e9b6ab4dc8e4ce89ef8cd8c7680"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "64dd87f37c44581d6f8ba38181a7e3661b01999b"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.2.0-pre.2",
      "_integrity": "sha512-0pfcm7x7vYlIbR94xglSzgXnsa2xWpAEfh2eUTHcRRY9LqR3VmtTGY7QvpcnnRUM866UB9g1erWaHNI9Maw8Hg==",
      "_resolved": "/tmp/com.unity.purchasing@4.2.0-pre.2-78blylhp.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.2.0-pre.2-78blylhp.tgz",
      "dist": {
        "shasum": "6bc4a164ffa83b373084d3a1d4c5cfe08f875ce7",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.2.0-pre.2.tgz"
      }
    },
    "4.2.0-pre.1": {
      "name": "com.unity.purchasing",
      "version": "4.2.0-pre.1",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.3.1",
        "com.unity.services.analytics": "4.0.0-pre.1"
      },
      "unity": "2020.3",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "upm": {
        "changelog": "### Added\n- Support for the [new Unity Analytics](https://unity.com/products/unity-analytics) [transaction event](https://docs.unity.com/analytics/AnalyticsSDKAPI.html#Transaction).\n- The package will now send telemetry diagnostic and metric events to help improve the long-term reliability and performance of the package.\n\n### Changed\n- The minimum Unity Editor version supported is 2020.3.\n- The In-App Purchasing service window now links to the [new Unity Dashboard](https://dashboard.unity3d.com/) for Unity Editors 2022 and up.\n\n### Fixed\n- GooglePlay - Fixed OnInitializeFailed never called if GooglePlay BillingClient is not ready during initialization.\n- GooglePlay - GoogleBilling is allowed to initialize correctly even if the user's Google account is logged out, so long as it is linked. The user will need to log in to their account to continue making purchases.\n- Fixed a build error `DirectoryNotFoundException` that occurred when the build platform was iOS or tvOS and the build target was another platform."
      },
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.2.0-pre.1"
      },
      "upmCi": {
        "footprint": "45c6cd469210712b24e54a933882ed9f294cee0f"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "e75af968366fd36fded712b3cb4f41e83df8f5a7"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.2.0-pre.1",
      "_integrity": "sha512-a9vWtcrXEh9dk4Q3H8oKDHdW2szuw4GwVEWRovATfZXm9HAkx0mKqfNin8dRuJKeUXPdNtOo8QxU+mvGwvJMsQ==",
      "_resolved": "/tmp/com.unity.purchasing@4.2.0-pre.1-z475y7ny.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.2.0-pre.1-z475y7ny.tgz",
      "dist": {
        "shasum": "61c65250a5eff1dd5d9d770f4e01d0d61cc0ad67",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.2.0-pre.1.tgz"
      }
    },
    "4.1.4": {
      "name": "com.unity.purchasing",
      "version": "4.1.4",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      },
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "upm": {
        "changelog": "### Fixed\n- GooglePlay - Fixed issue where if an app is backgrounded while a purchase is being processed, \nan `OnPurchaseFailed` would be called with the purchase failure reason `UserCancelled`, even if the purchase was successful."
      },
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.4"
      },
      "upmCi": {
        "footprint": "ac1e0aec8721b92c8930e070637d8ef9b1f34811"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "25048fc7bf20fd8f0a1a548fc73d024ffa7b25fe"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.4",
      "_integrity": "sha512-0POojiFiElgU11jgSlSqRuByH0wY8Ky0rcrw9Svx91F8eWdmqgJnIqnphQoWtkk1VRnheXNEA45JqglE/+itHA==",
      "_resolved": "/tmp/com.unity.purchasing@4.1.4-wp_1vbme.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.1.4-wp_1vbme.tgz",
      "dist": {
        "shasum": "de29ca230fe685508fc13b2cb1e02df76a3db976",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.1.4.tgz"
      }
    },
    "4.1.3": {
      "name": "com.unity.purchasing",
      "version": "4.1.3",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      },
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.3"
      },
      "upmCi": {
        "footprint": "fa8647791a2c58a50fb03a512adde2fb201c31ad"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "8207d5de2cd24c44f9756fa5c4332ee2298ef83c"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.3",
      "_integrity": "sha512-deGYiprIOE7KTIh4K+jkvWVxRR1nseuGRvQ0s5+glZjyp6FkLac4Ul7v3Pjc0+WNFlzD/SO8Ow/HZQv276iitQ==",
      "_resolved": "/tmp/com.unity.purchasing@4.1.3-162rq6ja.tgz",
      "_from": "file:/tmp/com.unity.purchasing@4.1.3-162rq6ja.tgz",
      "dist": {
        "shasum": "7d9b419098e4967f29dccef25b18c59b84e8b77d",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.1.3.tgz"
      }
    },
    "4.1.2": {
      "name": "com.unity.purchasing",
      "version": "4.1.2",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      },
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.2"
      },
      "upmCi": {
        "footprint": "14114633bfbea462e56753c8d262560ce47c6d5d"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "c73a3b5ce4e0a8eb429214ad6702ceb8ece5fabe"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.2",
      "_integrity": "sha512-rJEWxkZxzMHWSi5cozl4Q6zSlwqM3/zkO/IB3w/nOmGKXl0vHjhddYkqvf6+2RdEyEVrPMYaR+YNCDTGYE50pg==",
      "_resolved": "/pkgprom/com.unity.purchasing-4.1.2.tgz",
      "_from": "file:com.unity.purchasing-4.1.2.tgz",
      "dist": {
        "shasum": "fed3762eab4ff10fa5e6e222e57da813a20603f6",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.1.2.tgz"
      }
    },
    "4.1.1": {
      "name": "com.unity.purchasing",
      "version": "4.1.1",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      },
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.1"
      },
      "upmCi": {
        "footprint": "a5a3d3d37c9518a93f2929b2e6c8333086ca888d"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "3234a0fb16eb34ac949491c4855256bba159c59c"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.1",
      "_integrity": "sha512-tY5P2rBGefihKwiYU41vmypXJsxAigAhKNwmluFPTc1alMRVt7pkLHcPU0RVDh6j4c94fC7tIyloUf68lsK2xA==",
      "_resolved": "/pkgprom/com.unity.purchasing-4.1.1.tgz",
      "_from": "file:com.unity.purchasing-4.1.1.tgz",
      "dist": {
        "shasum": "c41d0e4ef6c399f0a7f93592d2af11ac30e4b794",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.1.1.tgz"
      }
    },
    "4.1.0": {
      "name": "com.unity.purchasing",
      "version": "4.1.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      },
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.1.0"
      },
      "upmCi": {
        "footprint": "3d8d63f0da01e5e95202a800a931897e64085113"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "bc618e163eb5028b2c8a98380239563f5206b5e0"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "Apple App Store - 04 Retrieving Product Receipt",
          "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
          "path": "Samples~/Apple App Store - 04 RetrievingProductReceipt"
        },
        {
          "displayName": "Apple App Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Apple App Store - 05 FraudDetection"
        },
        {
          "displayName": "Apple App Store - 06 Getting Introductory Subscription Prices",
          "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
          "path": "Samples~/Apple App Store - 06 GettingIntroductoryPrices"
        },
        {
          "displayName": "Apple App Store - 07 Getting Product Details",
          "description": "This sample showcases how to use Apple extensions to get additional product details.",
          "path": "Samples~/Apple App Store - 07 gettingProductDetails"
        },
        {
          "displayName": "Apple App Store - 08 Promoting Products",
          "description": "This sample shows how to Promote Products in the Apple App Store.",
          "path": "Samples~/Apple App Store - 08 PromptingProducts"
        },
        {
          "displayName": "Apple App Store - 09 Present Code Redemption Sheet",
          "description": "This sample shows how to use the Apple App Store extensions to display a sheet for users to redeem subscription offer codes.",
          "path": "Samples~/Apple App Store - 09 PresentCodeRedemptionSheet"
        },
        {
          "displayName": "Apple App Store - 10 Can Make Payments",
          "description": "This sample shows how to check whether the logged-in player is permitted to purchase from the Apple App Store on this device.",
          "path": "Samples~/Apple App Store - 10 CanMakePayments"
        },
        {
          "displayName": "Apple App Store - 12 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Unity IAP to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Apple App Store - 12 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_id": "com.unity.purchasing@4.1.0",
      "_integrity": "sha512-dlU6NWWQstlofReHctbq7Aofoll1o2fd9vNv9SRayyFFrtjHIE7I2a52XFz43jtVtu2c75+ZpGDg941sxQGdlw==",
      "_resolved": "/pkgprom/com.unity.purchasing-4.1.0.tgz",
      "_from": "file:com.unity.purchasing-4.1.0.tgz",
      "dist": {
        "shasum": "b06e5e80c0c1f65153af26b454549fbeb5ef96de",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.1.0.tgz"
      }
    },
    "4.0.3": {
      "name": "com.unity.purchasing",
      "version": "4.0.3",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      },
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.0.3"
      },
      "upmCi": {
        "footprint": "53f8240fcc408eddb86317bf54a6e6ad32be1157"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "4dccbbbbdb61c481d208d59a92c0c058ccad4e32"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "Apple App Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use Apple extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Apple App Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Apple App Store - 03 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
          "path": "Samples~/Apple App Store - 03 HandlingDeferredPurchases"
        },
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-4.0.3.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@4.0.3",
      "dist": {
        "shasum": "c7959a9b519b93c40c6922efdd761c62fa649a4f",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.0.3.tgz"
      }
    },
    "4.0.0": {
      "name": "com.unity.purchasing",
      "version": "4.0.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0",
        "com.unity.services.core": "1.0.1"
      },
      "unity": "2019.4",
      "_upm": {
        "gameService": {
          "groupIndex": 4,
          "groupName": "Monetize",
          "configurePath": "Project/Services/In-App Purchasing",
          "genericDashboardUrl": "https://unity3d.com/unity/features/iap"
        },
        "supportedPlatforms": [
          "Android",
          "iOS"
        ]
      },
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "4.0.0"
      },
      "upmCi": {
        "footprint": "81be9f887b655d3a81fc1cae2038086b57defb77"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "a20b4d1c1d35b36da80ef223bcc1e73b4c21a590"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "02 Buying Subscription",
          "description": "This sample showcases the basics of how to handle subscription purchases and the usage of SubscriptionManager to retrieve information about a subscription.",
          "path": "Samples~/02 BuyingSubscription"
        },
        {
          "displayName": "03 Fetching Additional Products",
          "description": "This sample showcases how to fetch additional products using the Store Controller.",
          "path": "Samples~/03 FetchingAdditionalProducts"
        },
        {
          "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
          "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
          "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
        },
        {
          "displayName": "05 Local Receipt Validation",
          "description": "This sample showcases how to use the cross-platform validator to do local receipt validation with the Google Play Store and Apple App Store.",
          "path": "Samples~/05 LocalReceiptValidation"
        },
        {
          "displayName": "Apple App Store - 01 Refreshing App Receipts",
          "description": "This sample shows how to refresh Apple App Store receipts.",
          "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
        },
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        },
        {
          "displayName": "Google Play Store - 01 Upgrading and Downgrading Subscriptions",
          "description": "This sample showcases how to use the Google Play Store extensions to upgrade and downgrade subscriptions. This allows players to change their subscription, and pay a different amount of money for a different level of service.",
          "path": "Samples~/Google Play Store - 01 UpgradeDowngradeSubscription"
        },
        {
          "displayName": "Google Play Store - 02 Restoring Transactions",
          "description": "This sample showcases how to use the Google Play Store extensions to restore transactions. This allows users to be granted Non-Consumable and Subscription products they already own after reinstalling the application.",
          "path": "Samples~/Google Play Store - 02 RestoringTransactions"
        },
        {
          "displayName": "Google Play Store - 03 Confirming Subscription Price Change",
          "description": "This sample showcases how to use the Google Play Store extensions to confirm subscription price changes.",
          "path": "Samples~/Google Play Store - 03 ConfirmingSubscriptionPriceChange"
        },
        {
          "displayName": "Google Play Store - 04 Handling Deferred Purchases",
          "description": "This sample showcases how to handle deferred purchases using the Google Play Store extensions and configurations.",
          "path": "Samples~/Google Play Store - 04 HandlingDeferredPurchases"
        },
        {
          "displayName": "Google Play Store - 05 Fraud Detection",
          "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
          "path": "Samples~/Google Play Store - 05 FraudDetection"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-4.0.0.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@4.0.0",
      "dist": {
        "shasum": "8f9661f4784368650e7ee5b13e9dc9ce198a4ec0",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-4.0.0.tgz"
      }
    },
    "3.2.3": {
      "name": "com.unity.purchasing",
      "version": "3.2.3",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores(*). (*) NOTE Samsung Galaxy is obsolete and will be removed in v4. Please use Unity Distribution Platform for Samsung Galaxy Apps support.\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      },
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.2.3"
      },
      "upmCi": {
        "footprint": "4e4a85926086c51c18a39e5303711f3c80294410"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "118d0cf33fe3071fea1b29143e914f3ee0b1c8e0"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.2.3.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.2.3",
      "dist": {
        "shasum": "82e4ea005ad8581b01d720a60ace2d48fb25b2cd",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-3.2.3.tgz"
      }
    },
    "3.2.2": {
      "name": "com.unity.purchasing",
      "version": "3.2.2",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores(*). (*) NOTE Samsung Galaxy is obsolete and will be removed in v4. Please use Unity Distribution Platform for Samsung Galaxy Apps support.\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      },
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.2.2"
      },
      "upmCi": {
        "footprint": "602378ccee1decd21b2cecfdac70ef38bee7dcc4"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "6ad60ad670b28d3a131388481318ce0d0ca2bc0d"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.2.2.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.2.2",
      "dist": {
        "shasum": "6cd70d42d971151d6ba3c0aaa66076eb614bb111",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-3.2.2.tgz"
      }
    },
    "3.2.1": {
      "name": "com.unity.purchasing",
      "version": "3.2.1",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores(*). (*) NOTE Samsung Galaxy is obsolete and will be removed in v4. Please use Unity Distribution Platform for Samsung Galaxy Apps support.\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      },
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.2.1"
      },
      "upmCi": {
        "footprint": "4b20a068747ccdc0fdbb55b1d2d4b466df4899ac"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "6e71b2659d2f21928de1f34d82964edeab391788"
      },
      "samples": [
        {
          "displayName": "01 Buying Consumables",
          "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
          "path": "Samples~/01 BuyingConsumables"
        },
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.2.1.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.2.1",
      "dist": {
        "shasum": "0af9a4a2446fa6ce536bf4f3837d946b2acba7af",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-3.2.1.tgz"
      }
    },
    "3.1.0": {
      "name": "com.unity.purchasing",
      "version": "3.1.0",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      },
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.1.0"
      },
      "upmCi": {
        "footprint": "b4c63377d26d99d960f1cde3a28338088869f989"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "0fda3405fb97bcc9ca72bf03834fcfee6061bacc"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.1.0.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.1.0",
      "dist": {
        "shasum": "36118bd589117343d6257dcdb6e491db1fecb84c",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-3.1.0.tgz"
      }
    },
    "3.0.2": {
      "name": "com.unity.purchasing",
      "version": "3.0.2",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      },
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.2"
      },
      "upmCi": {
        "footprint": "5346a222b80ccabc199078867e235b983df19f7f"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "ec841c2f6c39ccd5c0138306f24db7ad69ece916"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.2",
      "dist": {
        "shasum": "1b488f7728e2806d5a8dab43e587f5b4141aec7e",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-3.0.2.tgz"
      }
    },
    "3.0.1": {
      "name": "com.unity.purchasing",
      "version": "3.0.1",
      "displayName": "In App Purchasing",
      "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.unityanalytics": "1.0.0",
        "com.unity.modules.unitywebrequest": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.androidjni": "1.0.0"
      },
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.1"
      },
      "upmCi": {
        "footprint": "c38876eeff1bd9e649231f4074a92d097222db04"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "6085954d3b18522633eb64da34545a88092f85b4"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.1",
      "dist": {
        "shasum": "b2479d67766e497fc7bd1c550727462d38b29a28",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-3.0.1.tgz"
      }
    },
    "3.0.0-pre.6": {
      "name": "com.unity.purchasing",
      "version": "3.0.0-pre.6",
      "displayName": "In App Purchasing",
      "description": "*** PRE RELEASE ***\n\nNote: This In-App-Purchasing 3.0 package is a pre-release version and is not yet intended for use with existing projects.\n\nIMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.0-pre.6"
      },
      "upmCi": {
        "footprint": "84da447610b535d811781efaf84f7c76deb1edd1"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "8ba7482e36030bcf06019e3d0be37c3a72e5920c"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.0.0-pre.6.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.0-pre.6",
      "dist": {
        "shasum": "9dc1b28c73aef7948485236c7abf2863fcb13745",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-3.0.0-pre.6.tgz"
      }
    },
    "3.0.0-pre.5": {
      "name": "com.unity.purchasing",
      "version": "3.0.0-pre.5",
      "displayName": "In App Purchasing",
      "description": "*** PRE RELEASE ***\n\nNote: This In-App-Purchasing 3.0 package is a pre-release version and is not yet intended for use with existing projects.\n\nIMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, Amazon, and Samsung Galaxy app stores\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.0-pre.5"
      },
      "upmCi": {
        "footprint": "ec6e8563be7922d374545a1599e5a8b1f73eaad9"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "a9123c98c11f486a2db5c60c738c42939c36fbe6"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.purchasing-3.0.0-pre.5.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.0-pre.5",
      "dist": {
        "shasum": "745eec7d23b290398e387a2f5761a9b3623efcac",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-3.0.0-pre.5.tgz"
      }
    },
    "2.2.2": {
      "name": "com.unity.purchasing",
      "version": "2.2.2",
      "displayName": "In App Purchasing",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features. In the In-App Purchasing settings, please make sure to import the Asset Store plugin if you have not already done so. This is necessary to include all of the features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "unity": "2018.4",
      "unityRelease": "18f1",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "ee61dd3b9b07a5b3c6d54795306661ce1d0718ad"
      },
      "license": "Unity Companion Package License v1.0",
      "upmCi": {
        "footprint": "b61346fdaebb6970197c08161507384464e4fc08"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@2.2.2",
      "dist": {
        "shasum": "a2fcf1a4008a60d23c612a484d8ad93e844a17e3",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-2.2.2.tgz"
      }
    },
    "2.2.1": {
      "name": "com.unity.purchasing",
      "version": "2.2.1",
      "displayName": "In App Purchasing",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features. In the In-App Purchasing settings, please make sure to import the Asset Store plugin if you have not already done so. This is necessary to include all of the features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "unity": "2018.4",
      "unityRelease": "18f1",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "f07d4c5151eb13fff9661b62816f29772a916fe8"
      },
      "license": "Unity Companion Package License v1.0",
      "upmCi": {
        "footprint": "4dd280f1c3109962b050ef4c47c2d0613c46258a"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@2.2.1",
      "dist": {
        "shasum": "6b8f110c363bf9e7b3e7601d217002a4d798885c",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-2.2.1.tgz"
      }
    },
    "2.2.0": {
      "name": "com.unity.purchasing",
      "version": "2.2.0",
      "displayName": "In App Purchasing",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features. In the In-App Purchasing settings, please make sure to import the Asset Store plugin if you have not already done so. This is necessary to include all of the features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "unity": "2018.4",
      "unityRelease": "18f1",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "1dfbe2b8a8744293dd0deef05e90fb159c28a854"
      },
      "license": "Unity Companion Package License v1.0",
      "upmCi": {
        "footprint": "9235933a13c29fcf514c2e3c9d44f240397d42ce"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@2.2.0",
      "dist": {
        "shasum": "4d61e485801b2c746ad0a26d173a3be675b6f1bc",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-2.2.0.tgz"
      }
    },
    "3.0.0-pre.4": {
      "name": "com.unity.purchasing",
      "version": "3.0.0-pre.4",
      "displayName": "In App Purchasing",
      "description": "*** PREVIEW RELEASE ***\n\n*** Not intended for use with existing projects!\n\n*** PREVIEW RELEASE ***\n\n\nUnity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.0-pre.4"
      },
      "upmCi": {
        "footprint": "ea31692b85463aabdaadcf01f1cc49d7a80da861"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "421b0189e535cf53aaabe59ff2cde8db759be3f6"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.0-pre.4",
      "dist": {
        "shasum": "50b27339af08a0c12930f281e460326275a6afc5",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-3.0.0-pre.4.tgz"
      }
    },
    "3.0.0-pre.3": {
      "name": "com.unity.purchasing",
      "version": "3.0.0-pre.3",
      "displayName": "In App Purchasing",
      "description": "*** PREVIEW RELEASE ***\n\n*** Not intended for use with existing projects!\n\n*** PREVIEW RELEASE ***\n\n\nUnity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "unity": "2019.4",
      "license": "Unity Companion Package License v1.0",
      "hideInEditor": false,
      "relatedPackages": {
        "com.unity.purchasing.tests": "3.0.0-pre.3"
      },
      "upmCi": {
        "footprint": "aa72ff9cbb68918ba39593bbc307e623c34f070f"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "1b885452215a17c49f708fd1166b89136eea15d4"
      },
      "samples": [
        {
          "displayName": "In App Purchasing Sample",
          "description": "Sample Implementation of In App Purchasing.",
          "path": "Samples~/Example"
        }
      ],
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@3.0.0-pre.3",
      "dist": {
        "shasum": "c2e0d9a4988f8eda8f482db9c451af22afc834d2",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-3.0.0-pre.3.tgz"
      }
    },
    "2.1.1": {
      "name": "com.unity.purchasing",
      "version": "2.1.1",
      "displayName": "In App Purchasing",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features. In the In-App Purchasing settings, please make sure to import the Asset Store plugin if you have not already done so. This is necessary to include all of the features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "unity": "2018.4",
      "unityRelease": "18f1",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "ab79b0c58006f61970a2136b4cba9ca76fde0edc"
      },
      "license": "Unity Companion Package License v1.0",
      "upmCi": {
        "footprint": "d5cc580dc415ee75cae47a1ac41a1cad0118c408"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@2.1.1",
      "dist": {
        "shasum": "ec9602d9af54c98a2a7202d96d85a7c874378f2c",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-2.1.1.tgz"
      }
    },
    "2.1.0": {
      "name": "com.unity.purchasing",
      "version": "2.1.0",
      "displayName": "In App Purchasing",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, and Samsung Galaxy app stores. Additionally, it can work in tandem with the Unity Distribution Portal in order to synchronize catalogs and transactions with even more stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple App Store and Google Play.\n\nAfter installing this package, please make sure to open the Services Window and enable In-App Purchasing to use its features. In the In-App Purchasing settings, please make sure to import the Asset Store plugin if you have not already done so. This is necessary to include all of the features.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "unity": "2018.4",
      "unityRelease": "18f1",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
        "type": "git",
        "revision": "22c4e2f34edf6ab42c6514f44809a046bf184c50"
      },
      "license": "Unity Companion Package License v1.0",
      "upmCi": {
        "footprint": "ce1628fd82b7c3627c8de4ab64223cac2e6b564b"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.purchasing@2.1.0",
      "dist": {
        "shasum": "c0e438b9ecd7c30e48b5e74e2257aa8839a03f2f",
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-2.1.0.tgz"
      }
    },
    "2.0.6": {
      "name": "com.unity.purchasing",
      "version": "2.0.6",
      "displayName": "In App Purchasing",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, Samsung Galaxy, Tizen, Cloud Moolah MOO, Xiaomi Mi Game Pay App Stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple, Google Play, and Xiaomi Mi Game Pay.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "repository": {
        "url": "https://gitlab.cds.internal.unity3d.com/upm-packages/purchasing/com.unity.purchasing",
        "revision": "37674e38ef7548642e33bc97797a71b5eadbecac",
        "type": "git"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-2.0.6.tgz",
        "shasum": "5d1eb9889e23dad9f0b110fb06138347e196a210"
      },
      "license": "Unity Companion Package License v1.0",
      "scripts": {},
      "_id": "com.unity.purchasing@2.0.6",
      "unity": "2018.1"
    },
    "2.0.5": {
      "name": "com.unity.purchasing",
      "version": "2.0.5",
      "displayName": "In App Purchasing",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, Samsung Galaxy, Tizen, Cloud Moolah MOO, Xiaomi Mi Game Pay App Stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple, Google Play, and Xiaomi Mi Game Pay.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "repository": {
        "url": "https://gitlab.cds.internal.unity3d.com/upm-packages/purchasing/com.unity.purchasing",
        "revision": "37674e38ef7548642e33bc97797a71b5eadbecac",
        "type": "git"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-2.0.5.tgz",
        "shasum": "0c280e5200475a673d9c161e46bbfd35a1b42ff6"
      },
      "license": "Unity Companion Package License v1.0",
      "scripts": {},
      "_id": "com.unity.purchasing@2.0.5",
      "unity": "2018.1"
    },
    "2.0.3": {
      "name": "com.unity.purchasing",
      "version": "2.0.3",
      "displayName": "In App Purchasing",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, Samsung Galaxy, Tizen, Cloud Moolah MOO, Xiaomi Mi Game Pay App Stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple, Google Play, and Xiaomi Mi Game Pay.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-2.0.3.tgz",
        "shasum": "760d7807b5abf8fe90aa2af559d48a249850b1be"
      },
      "license": "Unity Companion Package License v1.0",
      "_id": "com.unity.purchasing@2.0.3",
      "unity": "2018.1"
    },
    "2.0.1": {
      "name": "com.unity.purchasing",
      "version": "2.0.1",
      "displayName": "In App Purchasing",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, Samsung Galaxy, Tizen, Cloud Moolah MOO, Xiaomi Mi Game Pay App Stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple, Google Play, and Xiaomi Mi Game Pay.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-2.0.1.tgz",
        "shasum": "821cbd40dc6fb44ce5fd6d20ee6d4376685d0629"
      },
      "license": "Unity Companion Package License v1.0",
      "_id": "com.unity.purchasing@2.0.1",
      "unity": "2018.1"
    },
    "2.0.0": {
      "name": "com.unity.purchasing",
      "version": "2.0.0",
      "displayName": "In App Purchasing",
      "description": "Unity IAP supports the iOS, Mac, tvOS, Google Play, Facebook Gameroom, Windows, Amazon, Samsung Galaxy, Tizen, Cloud Moolah MOO, Xiaomi Mi Game Pay App Stores.\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nUse one common API to access all stores for free. With just a few lines of code, you can fully understand and optimize your in-game economy.\n\nUnity IAP automatically couples with Unity Analytics enabling you to monitor and act on trends in your revenue and purchase data across multiple platforms.\n\nIncludes client-side receipt validation for Apple, Google Play, and Xiaomi Mi Game Pay.",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-2.0.0.tgz",
        "shasum": "e7b0e24f5889f6780b7c964abdac187cc9ff8bae"
      },
      "license": "Unity Companion Package License v1.0",
      "_id": "com.unity.purchasing@2.0.0",
      "unity": "2018.1"
    },
    "0.0.19": {
      "name": "com.unity.purchasing",
      "version": "0.0.19",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {},
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.19.tgz",
        "shasum": "abde5c6409b60f1ad2282018a931094eb7dc986a"
      },
      "_id": "com.unity.purchasing@0.0.19",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.18": {
      "name": "com.unity.purchasing",
      "version": "0.0.18",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {},
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.18.tgz",
        "shasum": "72967f00eb1bc9bf636e90087a83d7758f7e04ee"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.18",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.17": {
      "name": "com.unity.purchasing",
      "version": "0.0.17",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {},
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.17.tgz",
        "shasum": "528d6dc75efbdac4f1b2268512be013666b24057"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.17",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.16": {
      "name": "com.unity.purchasing",
      "version": "0.0.16",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {},
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.16.tgz",
        "shasum": "ece18364625774fcea4ba0611fd0316c996a6b25"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.16",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.15": {
      "name": "com.unity.purchasing",
      "version": "0.0.15",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {},
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.15.tgz",
        "shasum": "36430d4eb2a7de54c1950f3108ad0467b8e11cd7"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.15",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.14": {
      "name": "com.unity.purchasing",
      "version": "0.0.14",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {},
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.14.tgz",
        "shasum": "bbc336a66f8c88dacc9fbc9c046e169c6c3d4ccc"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.14",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.13": {
      "name": "com.unity.purchasing",
      "version": "0.0.13",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {},
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.13.tgz",
        "shasum": "53eb2a82f7377f3be616fe19fa1c54d62881f159"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.13",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.12": {
      "name": "com.unity.purchasing",
      "version": "0.0.12",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {},
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.12.tgz",
        "shasum": "27ccab792f6141604a52754c2ad5fd81a795ea6c"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.12",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.11": {
      "name": "com.unity.purchasing",
      "version": "0.0.11",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {},
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.11.tgz",
        "shasum": "75c08fc93979aed27e78b7a91815187d9ee254a3"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.11",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.10": {
      "name": "com.unity.purchasing",
      "version": "0.0.10",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "*"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.10.tgz",
        "shasum": "4e63720848aca1f5f2a9be1ca972d2babeb3a81c"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.10",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.9": {
      "name": "com.unity.purchasing",
      "version": "0.0.9",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.9"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.9.tgz",
        "shasum": "d6d83b382815279615bd627047fcfa4961d1530f"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.9",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.8": {
      "name": "com.unity.purchasing",
      "version": "0.0.8",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.8"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.8.tgz",
        "shasum": "d4ad34fdd61e7c9fae9e8e898e4076e24d3a6135"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.8",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.7": {
      "name": "com.unity.purchasing",
      "version": "0.0.7",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.7"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.7.tgz",
        "shasum": "ff5ed41432162cdba1ba90c086a820c161547d60"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.7",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.6": {
      "name": "com.unity.purchasing",
      "version": "0.0.6",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.5"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.6.tgz",
        "shasum": "ba8421b30c41cf766541287e94063909dcd5a65c"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.6",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.5": {
      "name": "com.unity.purchasing",
      "version": "0.0.5",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.4"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.5.tgz",
        "shasum": "571718288f427cb84af4d3d89b9c25aa779e26eb"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.5",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.4": {
      "name": "com.unity.purchasing",
      "version": "0.0.4",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "com.unity.analytics": "0.0.3"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.4.tgz",
        "shasum": "00b83b99b0166f5f75a02b18047bd8ad148fa2d4"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.4",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    },
    "0.0.3": {
      "name": "com.unity.purchasing",
      "version": "0.0.3",
      "description": "Unity Purchasing",
      "keywords": [
        "purchasing",
        "iap",
        "unity"
      ],
      "dependencies": {
        "UnityAnalytics": "0.0.2"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.purchasing/-/com.unity.purchasing-0.0.3.tgz",
        "shasum": "8bd77b7df6f003a1600e2c55f25f9de94da2e15e"
      },
      "publishConfig": {},
      "_id": "com.unity.purchasing@0.0.3",
      "unity": "2017.1",
      "category": "AssetStore/Unity"
    }
  },
  "etag": "\"91df83c7c641d145e495c57b51a279cf\"",
  "provider": "upm",
  "name": "com.unity.purchasing",
  "description": "IMPORTANT UPGRADE NOTES:\n\nIf updating from Unity IAP (com.unity.purchasing + the Asset Store plugin) versions 2.x to version 3.x, complete the following actions in order to resolve compilation errors:\n 1. Move IAPProductCatalog.json and BillingMode.json\n\tFROM: Assets/Plugins/UnityPurchasing/Resources/\n\tTO: Assets/Resources/.\n 2. Move AppleTangle.cs and GooglePlayTangle.cs\n\tFROM: Assets/Plugins/UnityPurchasing/generated\n\tTO: Assets/Scripts/UnityPurchasing/generated.\n 3. Remove all remaining Asset Store plugin folders and files in Assets/Plugins/UnityPurchasing from your project.\n\nPACKAGE DESCRIPTION:\n\nWith Unity IAP, setting up in-app purchases for your game across multiple app stores has never been easier.\n\nThis package provides:\n\n ▪ One common API to access all stores for free so you can fully understand and optimize your in-game economy\n ▪ Automatic coupling with Unity Analytics to enable monitoring and decision-making based on trends in your revenue and purchase data across multiple platforms\n ▪ Support for iOS, Mac, tvOS, Google Play, Windows, and Amazon app stores(*).\n ▪ Support to work with the Unity Distribution Portal to synchronize catalogs and transactions with other app stores\n ▪ Client-side receipt validation for Apple App Store and Google Play\n\nAfter installing this package, open the Services Window to enable In-App Purchasing to use these features.",
  "_id": "com.unity.purchasing",
  "cnTags": [],
  "time": {
    "4.13.1": "2025-10-04T03:16:01Z",
    "5.0.1": "2025-08-23T03:16:01Z",
    "5.0.0": "2025-08-09T03:16:01Z",
    "5.0.0-pre.8": "2025-07-26T03:16:01Z",
    "4.13.0": "2025-07-12T03:16:01Z",
    "5.0.0-pre.7": "2025-06-17T03:16:01Z",
    "5.0.0-pre.6": "2025-06-12T03:16:01Z",
    "5.0.0-pre.5": "2025-03-13T03:16:01Z",
    "5.0.0-pre.4": "2025-02-08T03:16:01Z",
    "5.0.0-pre.3": "2024-12-30T03:23:12Z",
    "5.0.0-pre.1": "2024-08-14T15:54:09Z",
    "4.12.2": "2024-07-18T11:46:38Z",
    "4.12.1": "2024-07-16T08:43:28Z",
    "4.12.1-pre.4": "2024-07-02T22:52:40Z",
    "4.12.1-pre.3": "2024-06-26T22:03:54Z",
    "4.12.1-pre.1": "2024-06-12T09:41:52Z",
    "4.12.0": "2024-06-05T16:10:38Z",
    "4.11.0": "2024-03-11T15:21:02Z",
    "4.10.0": "2023-10-13T09:12:37Z",
    "4.9.4": "2023-08-11T20:53:04Z",
    "4.9.3": "2023-06-14T11:29:13Z",
    "4.9.2": "2023-06-07T08:49:12Z",
    "4.8.0": "2023-04-14T10:27:28Z",
    "4.7.0": "2023-03-10T15:32:07Z",
    "4.6.0": "2023-02-13T08:05:14Z",
    "4.5.2": "2022-12-10T14:36:14Z",
    "4.5.1": "2022-10-27T08:49:39Z",
    "4.5.0": "2022-10-03T13:09:42Z",
    "4.4.1": "2022-08-22T09:12:30Z",
    "4.4.0": "2022-07-28T14:26:29Z",
    "4.3.0": "2022-07-18T14:59:06Z",
    "4.2.1": "2022-06-22T17:45:45Z",
    "4.1.5": "2022-05-23T10:50:47Z",
    "4.2.0-pre.2": "2022-05-06T15:45:55Z",
    "4.2.0-pre.1": "2022-05-02T18:03:08Z",
    "4.1.4": "2022-04-12T22:32:11Z",
    "4.1.3": "2022-02-08T15:17:49Z",
    "4.1.2": "2021-11-29T18:14:36Z",
    "4.1.1": "2021-11-02T10:57:34Z",
    "4.1.0": "2021-10-15T16:12:36Z",
    "4.0.3": "2021-08-24T15:42:23Z",
    "4.0.0": "2021-07-28T11:37:38Z",
    "3.2.3": "2021-07-14T13:28:08Z",
    "3.2.2": "2021-06-04T17:06:14Z",
    "3.2.1": "2021-05-19T18:43:27Z",
    "3.1.0": "2021-04-19T21:50:08Z",
    "3.0.2": "2021-04-01T15:37:26Z",
    "3.0.1": "2021-03-09T01:41:13Z",
    "3.0.0-pre.6": "2021-02-16T00:06:14Z",
    "3.0.0-pre.5": "2021-02-12T16:44:26Z",
    "2.2.2": "2021-01-22T19:50:44Z",
    "2.2.1": "2020-11-20T18:54:34Z",
    "2.2.0": "2020-11-19T15:50:29Z",
    "3.0.0-pre.4": "2020-11-18T02:00:48Z",
    "3.0.0-pre.3": "2020-11-14T00:54:07Z",
    "2.1.1": "2020-09-15T14:41:21Z",
    "2.1.0": "2020-08-18T19:55:57Z",
    "2.0.6": "2019-04-03T12:13:03Z",
    "2.0.5": "2019-04-03T12:13:01Z",
    "2.0.3": "2019-04-03T12:12:59Z",
    "2.0.1": "2019-04-03T12:12:56Z",
    "2.0.0": "2019-04-03T12:12:54Z",
    "0.0.19": "2019-04-03T12:12:51Z",
    "0.0.18": "2019-04-03T12:12:49Z",
    "0.0.17": "2019-04-03T12:12:46Z",
    "0.0.16": "2019-04-03T12:12:44Z",
    "0.0.15": "2019-04-03T12:12:41Z",
    "0.0.14": "2019-04-03T12:12:38Z",
    "0.0.13": "2019-04-03T12:12:36Z",
    "0.0.12": "2019-04-03T12:12:34Z",
    "0.0.11": "2019-04-03T12:12:31Z",
    "0.0.10": "2019-04-03T12:12:28Z",
    "0.0.9": "2019-04-03T12:12:26Z",
    "0.0.8": "2019-04-03T12:12:23Z",
    "0.0.7": "2019-04-03T12:12:21Z",
    "0.0.6": "2019-04-03T12:12:18Z",
    "0.0.5": "2019-04-03T12:12:16Z",
    "0.0.4": "2019-04-03T12:12:14Z",
    "0.0.3": "2019-04-03T12:12:11Z"
  }
}
