{
  "dist-tags": {
    "latest": "1.9.8"
  },
  "versions": {
    "1.9.8": {
      "name": "com.unity.visualscripting",
      "version": "1.9.8",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.3",
      "dist": {
        "shasum": "b4d700247d4b84b3360e1afeb054b0bdb201fbc7",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.9.8.tgz"
      },
      "_upm": {
        "changelog": "### Fixed\n- Fixed broken links to example codes in API documentation.\n\n### Changed\n- Adds alt texts to images in documentation to increase accessibility for screen readers."
      }
    },
    "1.9.7": {
      "name": "com.unity.visualscripting",
      "version": "1.9.7",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.3",
      "dist": {
        "shasum": "6279e2b7c4858e56cca7f367cd38c49ef66778c9",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.9.7.tgz"
      },
      "_upm": {
        "changelog": "### Fixed\n- Fixed a warning \"Unable to load Unity.Android.Gradle's referenced assembly NiceIO\" when scanning assemblies. [UVSB-2594](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2594)\n- Fixed error when trying to load fuzzy finder on multi screen setup on Mac. [UVSB-2419](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2419)\n- Fixed the `AOTSafeMode` project setting appearing in the Editor Preferences window. It is now shown in the Project Settings tab for Visual Scripting. [UVSB-2590](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2590)\n- Fixed possible crash on VisionOS. [UVSB-2565](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2565)\n\n### Changed\n- The `AOTSafeMode` project setting has been marked as not visible, it will no longer be included when calling `ConfigurationPanel.GetSearchKeywords`. [UVSB-2590](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2590)"
      }
    },
    "1.9.6": {
      "name": "com.unity.visualscripting",
      "version": "1.9.6",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.3",
      "dist": {
        "shasum": "7dcdc439b230145cec4202cd6ebad135736e0c14",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.9.6.tgz"
      },
      "_upm": {
        "changelog": "### Fixed\n- Fixed the output path for Property Providers generated from User Editor code. [UVSB-2550](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2550)\n- Fixed a minor spelling issue in the Project Settings section [UVSB-2523](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2523)\n- Fixed an unexpected MissingComponentException thrown when using GetOrAddComponent [UVSB-2575](https://jira.unity3d.com/browse/UVSB-2575)\n- Fixed scenes not reopening after a Build when more than one Scene was opened and Visual Scripting with variables is used. [UVSB-2561](https://jira.unity3d.com/browse/UVSB-2561)\n- Fixed values of LocalizedAudioClip type being shown as None after selecting another game object and returning back [UVSB-2528](https://jira.unity3d.com/browse/UVSB-2528)\n- Fixed a compilation issue that happened when a project had another version of NCalc already installed. [UVSB-2583](https://jira.unity3d.com/browse/UVSB-2583)\n- Fixed an 'AudioMixerController' is inaccessible due to its protection level' error thrown when generating the AotStubs. [UVSB-2577](https://jira.unity3d.com/browse/UVSB-2577)\n- Fixed compilation error when AotStubs references Unity.NetworkManager.__rpc_func_table and Unity.NetworkManager.__rpc_name_table fields [UVSB-2563](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2563)\n\n### Changed\n- Improved the warning message when a library fails to load while scanning for Editor assemblies."
      }
    },
    "1.9.5": {
      "name": "com.unity.visualscripting",
      "version": "1.9.5",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.3",
      "dist": {
        "shasum": "1b53f46e931bea668e53f1feb0ac9138170c9455",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.9.5.tgz"
      },
      "_upm": {
        "changelog": "### Fixed\n- Fixed \"NullReferenceException\" error when returning to the State Graph from the Script Graph. [UVSB-1905](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-1905)\n- Fixed compilation error when a graph contains a reference to a method with an \"in\" parameter. [UVSB-2544](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2487)\n- Added missing truncate function to Formula node [UVSB-2526](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2525)\n- Fixed an error when creating a Script Graph asset in an empty project\n\n### Changed\n- Updated deprecated EditorAnalytics APIs to new ones"
      }
    },
    "1.9.4": {
      "name": "com.unity.visualscripting",
      "version": "1.9.4",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.3",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.9.4"
      },
      "_upm": {
        "changelog": "### Fixed\n- Fixed sqlite dll changes not being recognized correctly by the 2022.3 Unity Editor"
      },
      "upmCi": {
        "footprint": "d93282af6b30b34282f3ab806bff6bba3ab6dfbc"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "41aac2b7038c2b1259c546329890d3736ce2394e"
      },
      "dist": {
        "shasum": "0920df93f9574f857a55af27bd38fdd9230a3f51",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.9.4.tgz"
      }
    },
    "1.9.2": {
      "name": "com.unity.visualscripting",
      "version": "1.9.2",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.3",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.9.2"
      },
      "_upm": {
        "changelog": "### Fixed\n- Fixed a bug where the second player input device controlled all objects when using InputSystem event nodes [UVSB-2499](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2499)\n- Documentation links have been fixed for Visual Scripting MonoBehaviours [UVSB-2475](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2475) [UVSB-2496](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2496)\n\n### Changed\n- AnimationEvent and NamedAnimationEvent Nodes icon changed in favor of the AnimationClip icon instead of the Animation Component icon."
      },
      "upmCi": {
        "footprint": "ffb2f2b5cb9e5230e6bf259a925303790c600eba"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "0dd874ef58a75ee4b4df6a81e65230e2602096a3"
      },
      "dist": {
        "shasum": "eee7e13fb6ccc0cc01143b3a16f1b817ea1c7b79",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.9.2.tgz"
      }
    },
    "1.9.1": {
      "name": "com.unity.visualscripting",
      "version": "1.9.1",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.3",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.9.1"
      },
      "_upm": {
        "changelog": "### Fixed\n- Reverted a breaking change where `LudiqScriptableObject._data` was marked as `private`\n- Reverted a breaking change related to `IGraphEventListener`"
      },
      "upmCi": {
        "footprint": "7e57f6ab0cd56d1a906e2795808595b11626d89f"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "5e78e9c354ed1567dbcea08e2bd9992e4a473cfb"
      },
      "dist": {
        "shasum": "80ee0eef820c92e33e98301a68793ba7cf8f7b48",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.9.1.tgz"
      }
    },
    "1.9.0": {
      "name": "com.unity.visualscripting",
      "version": "1.9.0",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.3",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.9.0"
      },
      "_upm": {
        "changelog": "### Fixed\n- Fixed code for custom nodes being stripped in AOT builds when Managed Stripping Level is set to High [UVSB-2439](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2437)\n- Fixed OnInputSystemEvent doesn't trigger until Input Vector variates from 0.5 [UVSB-2435](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2435)\n- Fixed assembly disappearing from Node Library after domain reload. [UVSB-2459](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2459)\n- Fixed custom inspectors not being generated [UVSB-2466](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2466)\n- Fixed error when trying to load exceptions for TryCatch node dropdown [2463] (https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2463)\n- Fixed infinite amount of GameObjects created in Prefab mode when performing a null check of a scene variable in editor with an \"OnDrawGizmos\" event [UVSB-2453](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2453)\n- Removed corrupt mdb which caused the ScriptUpdater to fail [UVSB-2360](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2360)\n- Fixed Gradient graph variables resetting when entering PlayMode [UVSB-2334](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2334)\n- Fixed Memory leak after destroying object [UVSB-2427] (https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2427)\n- Fixed migration deserialization bug introduced in 1.8.0 [UVSB-2492](https://issuetracker.unity3d.com/issues/deserialization-error-when-upgrading-to-1-dot-8-0)\n\n### Added\n- Added a warning icon next to assemblies in Project Settings that reference Editor assemblies [UVSB-2382](https://issuetracker.unity3d.com/issues/nodes-from-runtime-assemblies-that-reference-unity-editor-are-not-visible-in-the-fuzzy-finder)\n\n### Changed\n- Script Graph Asset string data is unloaded after deserialization [UVSB-2367](https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2366)\n- AOT Prebuild should take less memory and be faster (Added an optimization to AssetUtility.GetAllAssetsOfType<T>)"
      },
      "upmCi": {
        "footprint": "88cb0aea7e2efb665a6d11dc00f735e80c2a89b3"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "21b38599b7fcf9bdccd964bdb90710e6a1094810"
      },
      "dist": {
        "shasum": "a9e3af5ec88d9b3190fc46c144ef694a75d8031e",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.9.0.tgz"
      }
    },
    "1.8.0": {
      "name": "com.unity.visualscripting",
      "version": "1.8.0",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.3",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.8.0"
      },
      "upmCi": {
        "footprint": "216653b9b8371e118cd255206201ec635c66d806"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "0de66378b19e990494d98f39ecc2b6aa5ac65351"
      },
      "dist": {
        "shasum": "86b4439fb241d245101cd5320de3d4b30263f43f",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.8.0.tgz"
      }
    },
    "1.7.8": {
      "name": "com.unity.visualscripting",
      "version": "1.7.8",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.1",
      "_upm": {
        "changelog": "### Fixed\n- Handle ReflectionTypeLoadException for TypeUtility to remove warning [BOLT-1900](https://issuetracker.unity3d.com/product/unity/issues/guid/BOLT-1900)\n- Fixed drag inconsistency in Graph Variables [BOLT-2113](https://issuetracker.unity3d.com/product/unity/issues/guid/BOLT-2113)\n- Fixed exception after creating a graph from the Welcome Window on Linux [BOLT-1828](https://issuetracker.unity3d.com/product/unity/issues/guid/BOLT-1828)\n- Fixed the Cooldown node not becoming \"Ready\" when the \"Reset\" port is triggered\n- Fixed exception thrown after changing Hierarchy selection after removing Saved variable [BOLT-1919](https://issuetracker.unity3d.com/product/unity/issues/guid/BOLT-1919)\n- Fixed old Bolt saved variables not loading when using a build created using a newer version of Visual Scripting [BOLT-2052](https://issuetracker.unity3d.com/product/unity/issues/guid/BOLT-2052)\n- Fixed a performance issue when using lots of Get/Set Scene variable nodes in an open graph\n- Fixed zooming out in the Graph to be relative to the mouse cursor [BOLT-1667](https://issuetracker.unity3d.com/product/unity/issues/guid/BOLT-1667)\n- Fixed a compilation error when migrating from Visual Scripting 1.7.6 to 1.7.7 with InputSystem-1.1.1 or below installed.\n- Fixed a performance issue when using lots of Get/Set Scene variable nodes in an open graph\n- Fixed default inspectors for nodes not appearing in the correct position after a connected node is deleted [BOLT-1457](https://issuetracker.unity3d.com/product/unity/issues/guid/BOLT-1457)\n- Fixed Scene variables drag and drop in graph having wrong scope [BOLT-2247](https://issuetracker.unity3d.com/product/unity/issues/guid/BOLT-2247)\n\n### Changed\n- Small optimization of load times involving generic types.\n- Renamed ContinuousNumberDrawer.cs.cs to ContinuousNumberDrawer.cs [BOLT-2288](https://issuetracker.unity3d.com/product/unity/issues/guid/BOLT-2288)\n\n### Added\n- TextMeshPro assembly is now added by default in Project Settings/Visual Scripting/Node Library\n- Added highlight to new VS graph drop down items [BOLT-2205](https://issuetracker.unity3d.com/product/unity/issues/guid/BOLT-2205)\n- Added margins to the UI for project settings and editor preferences"
      },
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.7.8"
      },
      "upmCi": {
        "footprint": "14d348290ec68d5b734e317f0d02a864d3213564"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "775a560e6602f51ff05aca02264f8bed4d415fd3"
      },
      "_id": "com.unity.visualscripting@1.7.8",
      "_integrity": "sha512-0vVa4mXBVQEJLy68aq7OI1itp4+AsftY5XxQS4Wl/EudzjJHjvGJ5QgBVbcVSx/XvydEuVTvs6LWcf49/9m+uw==",
      "_resolved": "/tmp/com.unity.visualscripting@1.7.8-rtzyta9x.tgz",
      "_from": "file:/tmp/com.unity.visualscripting@1.7.8-rtzyta9x.tgz",
      "dist": {
        "shasum": "b0b3dc17a39f60d23b532c94b085b3bf1987b2b8",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.7.8.tgz"
      }
    },
    "1.7.7": {
      "name": "com.unity.visualscripting",
      "version": "1.7.7",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.7.7"
      },
      "upmCi": {
        "footprint": "4b516efc2d2a763088db2f71d6c7c9b5da6c13de"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "21e90c37a6500e62ae5a293cadf995e74d5f6905"
      },
      "_id": "com.unity.visualscripting@1.7.7",
      "_integrity": "sha512-XcDEE1Qo+O1MUp9FSLHjkdlM/DzM4GrjjS7LmrNdefBeUhs7DU63zQryEGC6xQMVufPyw6TLXV1TFY9a7RrAQg==",
      "_resolved": "/tmp/com.unity.visualscripting@1.7.7-edoyx_r0.tgz",
      "_from": "file:/tmp/com.unity.visualscripting@1.7.7-edoyx_r0.tgz",
      "dist": {
        "shasum": "4dfcfa323ba959bb10ec4096e9d1259d8d83ef48",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.7.7.tgz"
      }
    },
    "1.7.6": {
      "name": "com.unity.visualscripting",
      "version": "1.7.6",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.7.6"
      },
      "upmCi": {
        "footprint": "8b4cec728a5287fd9bfcc5fe3df22ab7ced748c7"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "64599611822e37717efdd2fa1a0576e1984155fc"
      },
      "_id": "com.unity.visualscripting@1.7.6",
      "_integrity": "sha512-uWPz9LZeFZ1i2kfuqmFA8eUVg6kCxT1iUfnC4odkuq1Z33aQGANhDN6iNsrRLo2t7FY5octO2fI8Zon29FIlrw==",
      "_resolved": "/pkgprom/com.unity.visualscripting-1.7.6.tgz",
      "_from": "file:com.unity.visualscripting-1.7.6.tgz",
      "dist": {
        "shasum": "a0b007d59eeab505263eac998b1e1b64f0a820bd",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.7.6.tgz"
      }
    },
    "1.8.0-pre.1": {
      "name": "com.unity.visualscripting",
      "version": "1.8.0-pre.1",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "deprecated": "1.8.0-pre.1 abandoned due to feature scope rethink",
      "unity": "2022.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.8.0-pre.1"
      },
      "upmCi": {
        "footprint": "c4c36516fc11648cc11afdd0b380838b851ab21a"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "d78d9e90b242433914abd320a4d6d1ba7f213b5d"
      },
      "_id": "com.unity.visualscripting@1.8.0-pre.1",
      "_integrity": "sha512-IEhOljsOGM2x01Z+Tx28vo3f6cKf5ZdmlDym+XQUp1hNlhHtYXB9AwU3Pe2f6KTnCu7Fxu1PB6J5wULddI+iMg==",
      "_resolved": "/pkgprom/com.unity.visualscripting-1.8.0-pre.1.tgz",
      "_from": "file:com.unity.visualscripting-1.8.0-pre.1.tgz",
      "dist": {
        "shasum": "affb3a7168cb78019a965f46c499ca0cebe67aa7",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.8.0-pre.1.tgz"
      }
    },
    "1.7.5": {
      "name": "com.unity.visualscripting",
      "version": "1.7.5",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.7.5"
      },
      "upmCi": {
        "footprint": "397ed15575aa3d8e59a4c30bd097fb0341ee763e"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "92f3faf93c43d4d12ab8258dedff1ec23db47872"
      },
      "_id": "com.unity.visualscripting@1.7.5",
      "_integrity": "sha512-F9/+lrcOI3WxDg1M1gXD6iTkBX618e9uv+RBmCWVvTrhepsFuhB5MeQqvvNB64gGo7sexea2BDM3QnFenAveaw==",
      "_resolved": "/pkgprom/com.unity.visualscripting-1.7.5.tgz",
      "_from": "file:com.unity.visualscripting-1.7.5.tgz",
      "dist": {
        "shasum": "59f0b4d4c0d751486fe0e699d76ac932fa09a221",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.7.5.tgz"
      }
    },
    "1.7.3": {
      "name": "com.unity.visualscripting",
      "version": "1.7.3",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.7.3"
      },
      "upmCi": {
        "footprint": "08781188254b130b643a17a68023c03b57a17a99"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "ab274e2a784936c03f9189e25be6b644b7d320cb"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.visualscripting-1.7.3.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.visualscripting@1.7.3",
      "dist": {
        "shasum": "f53fa6563a5215d77eb6e495065fc4e54db7f33a",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.7.3.tgz"
      }
    },
    "1.7.2": {
      "name": "com.unity.visualscripting",
      "version": "1.7.2",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.7.2"
      },
      "upmCi": {
        "footprint": "a4b30ec8a5934c9e5fef137f3e961808f90f38bd"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "50ad819715a5bcbfd1131cc47e51dc8c3cea57e2"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.visualscripting-1.7.2.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.visualscripting@1.7.2",
      "dist": {
        "shasum": "44cc5d6b5edf41602b0f3e1c42938c9a4f6dfa6f",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.7.2.tgz"
      }
    },
    "1.7.1": {
      "name": "com.unity.visualscripting",
      "version": "1.7.1",
      "displayName": "Visual Scripting",
      "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.7.1"
      },
      "upmCi": {
        "footprint": "04c56305d0d1a98591ec0a0cf63cf0f6ceed2972"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "a992468af97ec2c78eb5a5455e1ef584a2f75d27"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.visualscripting-1.7.1.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.visualscripting@1.7.1",
      "dist": {
        "shasum": "f2ebf50bf78b8dfb19df5cfba6ab019dc68ccd17",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.7.1.tgz"
      }
    },
    "1.6.1": {
      "name": "com.unity.visualscripting",
      "version": "1.6.1",
      "displayName": "Visual Scripting",
      "description": "Visual Scripting, previously known as BOLT, is an alternative workflow to design behaviours. Instead of the classic method of writing a C# script, visual scripting offers a way to design behaviours intuitively without code, by connecting events, actions, and data together in a graph. \n\nBoth programmers and non-programmers can use node-based graphs to design final logic or to quickly create prototypes. This package also features an API that programmers can use for more advanced tasks, or to create custom nodes that can be used by other team members.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.ai": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.particlesystem": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.physics2d": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.6.1"
      },
      "upmCi": {
        "footprint": "988554e7bb0f755cb5b95526605f4e65bdc8a933"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "d2dc8205ed231b4fc18289dddb14c0a92c76154f"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.visualscripting@1.6.1",
      "dist": {
        "shasum": "3b84f7d92cfeb58a864d7ae198124054f782e23f",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.6.1.tgz"
      }
    },
    "1.6.0": {
      "name": "com.unity.visualscripting",
      "version": "1.6.0",
      "displayName": "Visual Scripting",
      "description": "Visual Scripting, previously known as BOLT, is an alternative workflow to design behaviours. Instead of the classic method of writing a C# script, visual scripting offers a way to design behaviours intuitively without code, by connecting events, actions, and data together in a graph. \n\nBoth programmers and non-programmers can use node-based graphs to design final logic or to quickly create prototypes. This package also features an API that programmers can use for more advanced tasks, or to create custom nodes that can be used by other team members.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.ai": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.particlesystem": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.physics2d": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.6.0"
      },
      "upmCi": {
        "footprint": "6248610bd95832d7b8ad7f5d74f4b8f603e577c4"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "dec93945ecf3a06c28196d4b2dd92b42d0d54f29"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.visualscripting@1.6.0",
      "dist": {
        "shasum": "d40041a79b2b0fd650471afa2b7e5bc5728f4ad3",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.6.0.tgz"
      }
    },
    "1.6.0-pre.3": {
      "name": "com.unity.visualscripting",
      "version": "1.6.0-pre.3",
      "displayName": "Visual Scripting",
      "description": "Visual Scripting, previously known as BOLT, is an alternative workflow to design behaviours. Instead of the classic method of writing a C# script, visual scripting offers a way to design behaviours intuitively without code, by connecting events, actions, and data together in a graph. \n\nBoth programmers and non-programmers can use node-based graphs to design final logic or to quickly create prototypes. This package also features an API that programmers can use for more advanced tasks, or to create custom nodes that can be used by other team members.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.ai": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.particlesystem": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.physics2d": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.6.0-pre.3"
      },
      "upmCi": {
        "footprint": "d642c9187f3d035b66e285bd93f433a54d6aadb4"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "7497ac917364be0eba8a5999cf03f20c18f1d838"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.visualscripting@1.6.0-pre.3",
      "dist": {
        "shasum": "166670d1e6dead98688682bc86aece9c169df19a",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.6.0-pre.3.tgz"
      }
    },
    "1.5.2": {
      "name": "com.unity.visualscripting",
      "version": "1.5.2",
      "displayName": "Visual Scripting",
      "description": "Visual Scripting, previously known as BOLT, is an alternative workflow to design behaviours. Instead of the classic method of writing a C# script, visual scripting offers a way to design behaviours intuitively without code, by connecting events, actions, and data together in a graph. \n\nBoth programmers and non-programmers can use node-based graphs to design final logic or to quickly create prototypes. This package also features an API that programmers can use for more advanced tasks, or to create custom nodes that can be used by other team members.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.ai": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.particlesystem": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.physics2d": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.5.2"
      },
      "upmCi": {
        "footprint": "ccb5a33d8d1b7d7fef8e1d9a8361d69974359f95"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "49dd7fc937ed1aff82fd8e8a624ba671cc83f6e5"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.visualscripting@1.5.2",
      "dist": {
        "shasum": "85fe77d171b602fc175da0c4512ef2a4428bd95f",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.5.2.tgz"
      }
    },
    "1.5.1": {
      "name": "com.unity.visualscripting",
      "version": "1.5.1",
      "displayName": "Visual Scripting",
      "description": "Visual Scripting, previously known as BOLT, is an alternative workflow to design behaviours. Instead of the classic method of writing a C# script, visual scripting offers a way to design behaviours intuitively without code, by connecting events, actions, and data together in a graph. \n\nBoth programmers and non-programmers can use node-based graphs to design final logic or to quickly create prototypes. This package also features an API that programmers can use for more advanced tasks, or to create custom nodes that can be used by other team members.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.ai": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.particlesystem": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.physics2d": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.5.1"
      },
      "upmCi": {
        "footprint": "140522567af3cd605d501116f4b7cdf4f612ec88"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "172aa3d6ce1d6e66e3bd3a7b03b25fd93262d4ef"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.visualscripting@1.5.1",
      "dist": {
        "shasum": "fc1eafd2ec5f5d7008944e63358ef1e1d4a86555",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.5.1.tgz"
      }
    },
    "1.5.1-pre.5": {
      "name": "com.unity.visualscripting",
      "version": "1.5.1-pre.5",
      "displayName": "Visual Scripting",
      "description": "Visual Scripting, previously known as BOLT, is an alternative workflow to design behaviours. Instead of the classic method of writing a C# script, visual scripting offers a way to design behaviours intuitively without code, by connecting events, actions, and data together in a graph. \n\nBoth programmers and non-programmers can use node-based graphs to design final logic or to quickly create prototypes. This package also features an API that programmers can use for more advanced tasks, or to create custom nodes that can be used by other team members.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.ai": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.particlesystem": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.physics2d": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.5.1-pre.5"
      },
      "upmCi": {
        "footprint": "e477db10c3e430d993168c9a7207694e46cc45ce"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "bc7c8cd12e55d85dbc6aeec7397600cf4de2f24f"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.visualscripting-1.5.1-pre.5.tgz",
      "readmeFilename": "README.md",
      "_id": "com.unity.visualscripting@1.5.1-pre.5",
      "dist": {
        "shasum": "62aa4ab7d1e14886608f7ac4b9b7c02ed1c8677d",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.5.1-pre.5.tgz"
      }
    },
    "1.5.1-pre.3": {
      "name": "com.unity.visualscripting",
      "version": "1.5.1-pre.3",
      "displayName": "Visual Scripting",
      "description": "Visual Scripting, previously known as BOLT, is an alternative workflow to design behaviours. Instead of the classic method of writing a C# script, visual scripting offers a way to design behaviours intuitively without code, by connecting events, actions, and data together in a graph. \n\nBoth programmers and non-programmers can use node-based graphs to design final logic or to quickly create prototypes. This package also features an API that programmers can use for more advanced tasks, or to create custom nodes that can be used by other team members.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.ai": "1.0.0",
        "com.unity.modules.animation": "1.0.0",
        "com.unity.modules.jsonserialize": "1.0.0",
        "com.unity.modules.particlesystem": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.physics2d": "1.0.0"
      },
      "unity": "2021.1",
      "relatedPackages": {
        "com.unity.visualscripting.tests": "1.5.1-pre.3"
      },
      "upmCi": {
        "footprint": "9d39bc72abdb60f91f4a4164e1b350b7b09a2951"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "067432b3e897912989dc295256d3585d0dc5f88b"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.visualscripting@1.5.1-pre.3",
      "dist": {
        "shasum": "5d22358d0119464fdf59ecc0b73a7a6120e2492e",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.5.1-pre.3.tgz"
      }
    },
    "1.5.0": {
      "name": "com.unity.visualscripting",
      "version": "1.5.0",
      "displayName": "Visual Scripting",
      "description": "Visual Scripting, previously known as BOLT, is an alternative workflow to design behaviours. Instead of the classic method of writing a C# script, visual scripting offers a way to design behaviours intuitively without code, by connecting events, actions, and data together in a graph. \n\nBoth programmers and non-programmers can use node-based graphs to design final logic or to quickly create prototypes. This package also features an API that programmers can use for more advanced tasks, or to create custom nodes that can be used by other team members.",
      "category": "",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "unity": "2021.1",
      "upmCi": {
        "footprint": "ec9a95355dec0a9f9ee6010d06eea3e2d19de2c8"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/com.unity.visualscripting.git",
        "type": "git",
        "revision": "051e6f956626cba9cfc70b09c7a790eb9d1ae550"
      },
      "readmeFilename": "README.md",
      "_id": "com.unity.visualscripting@1.5.0",
      "dist": {
        "shasum": "a0599d5fb47698b2e8d9206678ecb6f9d2928b4f",
        "tarball": "https://download-packages.unity.cn/com.unity.visualscripting/-/com.unity.visualscripting-1.5.0.tgz"
      }
    }
  },
  "etag": "\"779db0ce91a44a484c3703e56e274db2\"",
  "provider": "upm",
  "name": "com.unity.visualscripting",
  "description": "Visual scripting is a workflow that uses visual, node-based graphs to design behaviors rather than write lines of C# script.\n\nEnabling artists, designers and programmers alike, visual scripting can be used to design final logic, quickly create prototypes, iterate on gameplay and create custom nodes to help streamline collaboration.\n\nVisual scripting is compatible with third-party APIs, including most packages, assets and custom libraries.",
  "_id": "com.unity.visualscripting",
  "cnTags": [],
  "time": {
    "1.9.8": "2025-06-12T03:25:01Z",
    "1.9.7": "2025-05-23T03:15:01Z",
    "1.9.6": "2025-03-11T03:14:01Z",
    "1.9.5": "2024-12-05T09:07:54Z",
    "1.9.4": "2024-04-16T09:32:48Z",
    "1.9.2": "2024-03-05T17:06:01Z",
    "1.9.1": "2023-08-24T13:55:51Z",
    "1.9.0": "2023-08-04T14:05:09Z",
    "1.8.0": "2022-12-07T10:07:48Z",
    "1.7.8": "2022-05-10T20:02:13Z",
    "1.7.7": "2022-02-07T12:57:31Z",
    "1.7.6": "2021-11-11T16:47:38Z",
    "1.8.0-pre.1": "2021-10-19T16:22:03Z",
    "1.7.5": "2021-10-19T11:26:35Z",
    "1.7.3": "2021-07-20T16:33:26Z",
    "1.7.2": "2021-06-07T15:53:16Z",
    "1.7.1": "2021-05-18T17:16:18Z",
    "1.6.1": "2021-04-22T21:13:25Z",
    "1.6.0": "2021-04-16T19:23:33Z",
    "1.6.0-pre.3": "2021-03-19T01:57:33Z",
    "1.5.2": "2021-03-10T18:24:03Z",
    "1.5.1": "2021-02-25T16:23:36Z",
    "1.5.1-pre.5": "2021-02-02T00:52:47Z",
    "1.5.1-pre.3": "2020-12-20T17:21:06Z",
    "1.5.0": "2020-12-11T15:37:35Z"
  }
}
