{
  "dist-tags": {
    "latest": "2.6.5"
  },
  "versions": {
    "2.6.5": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.6.5",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.inputsystem": "1.7.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.10"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.6/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "f5db334b53fbd365ae6ede73801832862668e022",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.6.5.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:content/82022\">Oculus Integration Assets</a>",
          "displayName": "Meta Gaze Adapter"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added `ToggleComponentZone` sample script to activate/deactivate the Gaze Interactor GameObjects when entering a trigger collider to prevent unintentional gaze-based selection in the rest of the scene. This component was added to the Starter Assets and implemented in the `DemoScene` at the \"Gaze Interactable Objects\" station.\n\n### Changed\n- Changed `XRRayInteractor.TryGetHitInfo` to return the hit info of the selected interactable or highest scored interactable instead of the nearest raycast hit. ([XRIT-141](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-141)) (Backport from 3.1.0)"
      }
    },
    "3.3.0-pre.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.3.0-pre.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.xr": "1.0.0",
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.4.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.3/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "475d92d5173d2f7293a6215f71d26af2ab36f788",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.3.0-pre.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Interaction Simulator",
          "description": "Assets related to the simulation of XR HMD, controllers and interaction.",
          "displayName": "XR Interaction Simulator"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "(Legacy) Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/World Space UI",
          "description": "This sample provides a demo scene and prefabs demonstrating how to leverage UI Toolkit and UGUI in world space in conjunction with the XR Interaction Toolkit. \n<i>Dependencies:</i>\n • Starter Assets sample\n • Hands Interaction Demo sample\n • Unity 6.2 or newer (minimum 6000.2.0a9)",
          "displayName": "World Space UI"
        },
        {
          "path": "Samples~/Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "displayName": "Legacy XR Input Readers"
        },
        {
          "path": "Samples~/visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample\n • Unity 2022.3 LTS or newer (minimum 2022.3.19f1)",
          "displayName": "visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added ability to control the order that interactables are processed (`IXRInteractable.ProcessInteractable`). See [Processing interactables](xref:xri-architecture#processing-interactables) in the Interaction overview manual page for more information.\n  - Added new methods to [`XRInteractionManager`](xref:UnityEngine.XR.Interaction.Toolkit.XRInteractionManager) to set parent interactable dependencies which determine which interactables must be processed before another interactable. Use `RegisterParentRelationship` to register a parent interactable and `GetParentRelationships` to query the registered parent interactables.\n  - Added Parent Interactable and Auto Find Parent Interactable properties to interactors and interactables to register the component's parent interactable dependency when the component is registered with the XR Interaction Manager. Custom components that do not derive from [`XRBaseInteractor`](xref:UnityEngine.XR.Interaction.Toolkit.Interactors.XRBaseInteractor) and [`XRBaseInteractable`](xref:UnityEngine.XR.Interaction.Toolkit.Interactables.XRBaseInteractable) can implement [`IXRParentInteractableLinker`](xref:UnityEngine.XR.Interaction.Toolkit.IXRParentInteractableLinker) to enable this functionality.\n  - Added Parent Interactable column to the XR Interaction Debugger window to show registered and inherited parent interactables.\n\n### Changed\n- Changed the `public` `SelectEnter`, `HoverEnter`, and `FocusEnter` methods in `XRInteractionManager` to check conditions before allowing the state change and log a warning if it wasn't allowed. Added new `public` methods `SelectEnterUnconditionally`, `HoverEnterUnconditionally`, and `FocusEnterUnconditionally` that replicate the old functionality. ([XRIT-261](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-261))\n  - Conditions include whether the interactor and interactable are registered with that manager, whether the interaction layer masks are compatible, and whether filters allow the operation. See `IsSelectPossible`, `IsHoverPossible`, and `IsFocusPossible` for exact conditions.\n  - This change means that `XRBaseInteractor.StartManualInteraction` and `XRBaseInteractor.startingSelectedInteractable` which use the `public` `XRInteractionManager.SelectEnter` method can cause the select to be prevented.\n  - Users that override those existing `public virtual` methods may need to override the new `-Unconditionally` methods in addition or instead since now only the new methods are invoked during the update loop of the manager.\n- Changed XR Socket Interactor to draw the interactable hover mesh during `LateUpdate` instead of `Update` to allow interactables to process first.\n- Changed the XR Interaction Debugger window to show the interactors and interactables in the order that they are processed instead of alphabetically."
      }
    },
    "3.2.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.2.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.xr": "1.0.0",
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.4.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.2/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "76258c00be3ea4eb64bfddff79870b92092a74c7",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.2.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Interaction Simulator",
          "description": "Assets related to the simulation of XR HMD, controllers and interaction.",
          "displayName": "XR Interaction Simulator"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "(Legacy) Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/World Space UI",
          "description": "This sample provides a demo scene and prefabs demonstrating how to leverage UI Toolkit and UGUI in world space in conjunction with the XR Interaction Toolkit. \n<i>Dependencies:</i>\n • Starter Assets sample\n • Hands Interaction Demo sample\n • Unity 6.2 or newer (minimum 6000.2.0a9)",
          "displayName": "World Space UI"
        },
        {
          "path": "Samples~/Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "displayName": "Legacy XR Input Readers"
        },
        {
          "path": "Samples~/visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample\n • Unity 2022.3 LTS or newer (minimum 2022.3.19f1)",
          "displayName": "visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added re-validation for the `InputPanelConfiguration` for UI Toolkit support.\n- Added two new prefabs to the Hands Interaction Demo sample for Android XR, based on the `LeftHandAndroidXR` and `RightHandAndroidXR` models that ship as a part of the XR Hands package HandVisualizer sample.\n- Added `PermissionManager` and `PlatformUnderstanding` sample scripts and prefab to help request permissions required for specific OpenXR platforms.\n\n### Changed\n- Changed the minimum version of the XR Hands package required from `1.2.1` to `1.5.1` as well as updated the recommended version to `1.6.1`.\n- Changed the `PinchPointFollow` script in the Hands Interaction Demo sample by making the `OnJointsUpdated` method `public` so that it can be invoked directly by the Joints Updated event in the `XRHandTrackingEvents` component, depending on which hand mesh visuals are active, Quest or Android XR.\n- Changed the `XR Origin Hands (XR Rig)` prefab in the Hands Interaction Demo sample to include the newly added Android XR hand visualizer prefabs. The existing `LeftHandInteractionVisual`/`RightHandInteractionVisual` prefabs were renamed to `LeftHandQuestVisual`/`RightHandQuestVisual` and new `LeftHandAndroidXRVisual`/`RightHandAndroidXRVisual` prefabs were added.\n\n### Fixed\n- Fixed premature `InputPanelConfiguration` warning logged in `UIToolkitHandler` when validation check happened before `InputPanelConfiguration` is set.\n- Fixed an issue with `TryGetCurveEndPoint` in the `NearFarInteractor`, where Snap Volumes are not checked against the list of valid targets, which may be different when using Target Filters.\n- Fixed an issue with `NearFarInteractor` where it would ignore the `canProcess` property on an `IXRTargetFilter`, allowing it to always process the filter.\n- Fixed warnings about use of deprecated `TreeView` classes in debugger window in Unity 6.2.\n- Fixed a regression caused by the addition of the Gravity Provider, where if the component is present, but gravity is disabled, the `inAirVelocityModifier` is applied. This causes issues in scenes where there is no ground or gravity, but locomotion should be applied normally otherwise.\n- Fixed missing Target Priority Mode and Starting Selected Interactable properties in the Near-Far Interactor Inspector window.\n- Fixed `Assertion failed on expression: t.GetParent() == nullptr` when exiting Play mode in some additional cases with the XR Grab Interactable. It no longer sets the parent when exiting Play mode.\n- Fixed so the deprecated AR interactor and interactable components appears in the Add Component menu again and files renamed from `.deprecated.cs` so that they can be added to GameObjects. They can be found under **Component** &gt; **XR** &gt; **AR** &gt; **Deprecated**.\n- Fixed handling of focus with nested XR Interaction Groups so that parent groups are also notified when member groups have an interactor that triggers focus. The `XRInteractionManager` now recursively calls `IXRInteractionGroup.OnFocusEntering` on all parent groups of the focus group, thereby setting `IXRInteractionGroup.focusInteractor` and `IXRInteractionGroup.focusInteractable`.\n- Fixed so only the focus interactor being unregistered causes a focus exit event rather than any member interactor of the XR Interaction Group being unregistered."
      }
    },
    "3.2.0": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.2.0",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.xr": "1.0.0",
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.4.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.2/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "0585a173a10c41e99ab350dd833c7a29f47fc9d5",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.2.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Interaction Simulator",
          "description": "Assets related to the simulation of XR HMD, controllers and interaction.",
          "displayName": "XR Interaction Simulator"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "(Legacy) Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/World Space UI",
          "description": "This sample provides a demo scene and prefabs demonstrating how to leverage UI Toolkit and UGUI in world space in conjunction with the XR Interaction Toolkit. \n<i>Dependencies:</i>\n • Starter Assets sample\n • Hands Interaction Demo sample\n • Unity 6.2 or newer (minimum 6000.2.0a9)",
          "displayName": "World Space UI"
        },
        {
          "path": "Samples~/Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "displayName": "Legacy XR Input Readers"
        },
        {
          "path": "Samples~/visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample\n • Unity 2022.3 LTS or newer (minimum 2022.3.19f1)",
          "displayName": "visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added additional Editor analytics to gather data about locomotion components that helps Unity understand how the package is being used in projects. If you don't want to send data to Unity, please see [Editor analytics documentation](https://docs.unity3d.com/Manual/EditorAnalytics.html) for how to disable analytics in your project.\n- Added configurable functionality to `ARContactSpawnTrigger` in the AR Starter Assets sample to block spawning of objects on AR Planes when the active interactor in the associated `XRInteractionGroup` is either hovering or selecting an interactable object.\n- Added documentation for [World-Space UI Toolkit support](xref:xri-ui-world-space-ui-toolkit-support) and the [World Space UI sample package](xref:xri-samples-world-space-ui).\n\n### Changed\n- Changed the timing of when several locomotion events and methods are called within a frame. The primary motivation of these changes is to allow the `LocomotionProvider.locomotionEnded` event to invoke after a teleport has actually been applied to the XR Origin rather than after the transformation has merely been queued but not yet applied. This restores similar timing to that event as the deprecated `LocomotionProvider.endLocomotion` when the deprecated `LocomotionSystem` was used, fixing a regression introduced with version [3.0.0-pre.1](#300-pre1---2023-12-14). ([XRIT-255](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-255))\n  - Added `LocomotionProvider.locomotionStateChanged` event and `OnLocomotionStateChanging` method to allow users to respond to the changing `locomotionState` before any queued transformations have been applied.\n  - Added `LocomotionProvider.afterStepLocomotion` event which is invoked after a provider's queued transformation has been applied.\n  - Added `XRBodyTransformer.afterApplyTransformations` event which is invoked after all transformations have been applied in a frame.\n  - Changed `XRBodyTransformer.beforeApplyTransformations` so it is only invoked during a frame when a transformation is about to be applied rather than always being invoked every frame even if nothing had been queued.\n  - Changed `LocomotionProvider.locomotionEnded` event and `OnLocomotionEnding` method so it is invoked after any of the provider's queued transformations have been applied rather than immediately after changing `locomotionState` to `LocomotionState.Ended`.\n  - Changed `LocomotionProvider` so the `OnLocomotionEnding` method is invoked before the `locomotionEnded` event, matching the pattern elsewhere in the package of the `protected virtual` method being invoked before the `public` event.\n  - Fixed `LocomotionProvider.beforeStepLocomotion` so it is invoked as expected when a locomotion component (such as Snap Turn Provider) has a Delay Time.\n  - Fixed XR Grab Interactable being thrown at very high velocities after a teleportation due to the change in `LocomotionProvider.locomotionEnded` event timing.\n- Changed the Transformation Priority value on some Locomotion Provider components in the XR Origin (XR Rig) prefab in the Starter Assets sample to improve the default ordering when multiple providers are doing locomotion in the same frame.\n  - Changed Gravity Provider from 0 to 10 to make it more apparent that its transformations are applied after non-teleport locomotion. Due to script execution order, this was already the case.\n  - Changed Teleportation Provider from 0 to 20 so that its transformations are applied last among all the providers in the rig. This is to allow the rig to move and rotate to the exact pose previewed by the teleport reticle. Due to script execution order, it was previously indeterminate if it applied before or after move/turn locomotion.\n- Changed XR Grab Interactable so snap turn and turn around are handled the same as a teleportation when calculating the throw velocity. This fixes the object being thrown at unintentionally high velocity when dropped immediately after a snap turn or turn around.\n- Changed XR Grab Interactable so it also updates the Predicted Visuals Transform scale between phy"
      }
    },
    "3.2.0-pre.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.2.0-pre.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.xr": "1.0.0",
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.4.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.2/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "3d110d22ed9fdae94864ee7f2f55d3a8fea2e774",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.2.0-pre.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Interaction Simulator",
          "description": "Assets related to the simulation of XR HMD, controllers and interaction.",
          "displayName": "XR Interaction Simulator"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "(Legacy) Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/World Space UI",
          "description": "This sample provides a demo scene and prefabs demonstrating how to leverage UI Toolkit and UGUI in world space in conjunction with the XR Interaction Toolkit. \n<i>Dependencies:</i>\n • Starter Assets sample\n • Hands Interaction Demo sample\n • Unity 6.2 or newer (minimum 6000.2.0a9)",
          "displayName": "World Space UI"
        },
        {
          "path": "Samples~/Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "displayName": "Legacy XR Input Readers"
        },
        {
          "path": "Samples~/visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample\n • Unity 2022.3 LTS or newer (minimum 2022.3.19f1)",
          "displayName": "visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added Click UI On Down property to the XR Poke Interactor and added support to trigger UI click event on down instead of release for buttons, toggles, input fields, and dropdowns.\n- Added `ToggleColorToggler` sample script to use on/off color properties when a `Toggle` is pressed instead of toggling graphic elements on and off like the previous `ToggleGraphicToggler`.\n- Added support to the XR Grab Interactable to smooth the appearance of the object in a similar way to Rigidbody Interpolation but without the frame delay. For more information about this feature, see [What's new in 3.2](xref:xri-whats-new-3-2).\n  - Added a new Predicted Visuals Transform property to XR Grab Interactable that allows you to define a separate visual hierarchy of child GameObjects that can be driven at the application's update rate while still only moving the Rigidbody during `FixedUpdate`. This new optional property only applies when the Movement Type is Kinematic or Velocity Tracking.\n- Added support to limit the linear velocity and angular velocity of the XR Grab Interactable when the Movement Type is Velocity Tracking. This can be used to improve stability as the object collides with static geometry as it follows the interactor. These are controlled by four new properties: Limit Linear Velocity, Max Linear Velocity Delta, Limit Angular Velocity, and Max Angular Velocity Delta.\n- Added pre-release support for UI Toolkit interaction for world-space based UI documents. The additions are currently marked as internal while we gain feedback and stabilize the feature. This feature is only supported on Unity 6.2 and higher where world-space support for UI Toolkit was added.\n\n### Changed\n- Changed `Poke Interactor` prefab and components in the Starter Assets and Hand Interaction Demo samples to enable Click UI On Down for poke.\n- Replaced `ToggleGraphicToggler` from Hands Interaction Demo sample with `ToggleColorToggler` in the Starter Assets sample.\n- Changed how XR Grab Interactables are created when using the **GameObject** &gt; **XR** &gt; **Grab Interactable** menu item. When created this way, the Mesh Renderer component is now created on a child GameObject and assigned as the Predicted Visuals Transform. The Box Collider component is also now created on a child GameObject. The Reset operation on XR Grab Interactable will also automatically try to assign the Predicted Visuals Transform to a child GameObject that contains a Mesh Renderer or Skinned Mesh Renderer.\n- Changed `XRPokeFilter` so references can be reconfigured at runtime and to avoid immediately warning when adding the component to a GameObject without the other components added yet.\n- Changed `CurveVisualController` so it updates the `LineRenderer` during the Before Render (`Application.onBeforeRender`) phase instead of `LateUpdate`. This fixes the line origin so it is based on the latest tracking pose, which keeps it connected to the controller model visually.\n- Changed `CurveVisualController` by adding the `OnEnable` and `OnDisable` methods. Users who had already implemented either method in derived classes will need to call the base method.\n- Changed `XRGrabInteractable` by adding the `OnCollisionStay` method. Users who had already implemented this method in derived classes will need to call the base method.\n- Moved the XR Interaction Simulator folder out of the XR Device Simulator samples and into its own sample for greater visibility.\n\n### Deprecated\n- Methods that reference Input Manager Touch in the AR Gesture classes have been marked for deprecation. The recommended way of using those gesture classes is to use `InputSystem.EnhancedTouch.Touch` instead. The scripting define symbol `XRI_LEGACY_INPUT_DISABLED` can be added to Edit &gt; Project Settings &gt; Player to disable all use of `UnityEngine.Touch` in the package.\n\n### Fixed\n- Fixed `TrackedDeviceGraphicRaycaster` to update raycaster to interactor reference based on sorting order.\n- Fixed a version handling routine in the Project Validation Utility for sample version caching. Other Unity sample packages somet"
      }
    },
    "3.1.2": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.1.2",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.xr": "1.0.0",
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.4.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.1/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "42ef3600567b34a1e5aea8aad2362e1e335d4e7c",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.1.2.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "displayName": "Legacy XR Input Readers"
        },
        {
          "path": "Samples~/visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample\n • Unity 2022.3 LTS or newer (minimum 2022.3.19f1)",
          "displayName": "visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added warning messages to the XR Interaction Simulator UI when hands are not set in the `XRInputModalityManager` and when an `XRHandMeshController` is non-existent.\n\n### Changed\n- Changed the XR Interaction Simulator and XR Device Simulator to disallow changing between controllers and hands when the set of GameObjects are not assigned in the `XRInputModalityManager`.\n- Lowered the minimum AR Foundation version to `5.2.0` to allow use with XR Simulation feature on older versions of the Unity Editor.\n- Changed the Hands Interaction Demo, AR Starter Assets, Spatial Keyboard, and visionOS samples to be more permissive about the required version of the imported Starter Assets sample in the Project Validation window. It now only requires a minimum imported version rather than the current package version.\n\n### Fixed\n- Fixed a `NullReferenceException` when using UI Toolkit with the XR Ray Interactor caused by trying to retrieve a `Canvas` component reference from a parent object which does not exist when using UI Toolkit. Note that XRI does not yet have full [support for UI Toolkit](xref:xri-ui-input-module#ui-toolkit-support). ([XRIT-247](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-247))\n- Fixed `Assertion failed on expression: t.GetParent() == nullptr` when exiting Play mode in some cases with the XR Grab Interactable.\n- Fixed so only a single undo operation is needed after creating an XR Grab Interactable using the **GameObject** &gt; **XR** &gt; **Grab Interactable** menu due to an extra \"Modified Permitted Displacement Axes\" instead of a single \"Create Grab Interactable\".\n- Fixed compilation in `BuildHook` analytics code related to `BuildSummary.buildType` and `BuildType` on some Unity 6 Preview versions."
      }
    },
    "3.0.8": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.0.8",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.xr": "1.0.0",
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.physics": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.0/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "7e188ec401eaff99ad6b91aca36b2f657e06be7a",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.0.8.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "displayName": "Legacy XR Input Readers"
        },
        {
          "path": "Samples~/visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample\n • Unity 2022.3 LTS or newer (minimum 2022.3.19f1)",
          "displayName": "visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added a Drag Start Position Input property to the Screen Space Ray Pose Driver component to improve the ability to select a dragged object in AR projects. The ray will be initially cast from the touch start position instead of the current drag position when the drag gesture starts in order to improve the ability to pick small objects. (Backport from 3.1.0)\n- Added a Tap Duration property to the Touchscreen Gesture Input Loader component to configure the threshold that a touch and release must occur within for a tap gesture. (Backport from 3.1.0)\n\n### Changed\n- Changed scripts to improve performance of processing interaction strength (tagged `XRI.ProcessInteractionStrength` in Profiler). (Backport from 3.1.0-pre.1)\n- Changed the tap cancel duration from 0.3 seconds to 0.5 seconds on the `TouchscreenGestureInputController` input device created by the Touchscreen Gesture Input Loader component. This affects the `Screen Space Ray Interactor` prefab in the AR Starter Assets sample. This should make selecting objects more forgiving with a slower tap. ([XRIT-208](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-208)) (Backport from 3.1.0)\n- Changed the Max Tap Duration on the Tap interactions from the default Input System (0.2 seconds) to 0.5 seconds on the mouse bindings in both the Tap Start Position and Spawn Object input actions. This should make selecting and spawning objects more forgiving with a slower tap when using the mouse when simulating in the Unity Editor. ([XRIT-208](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-208)) (Backport from 3.1.0)\n- Changed Spawn Trigger Type from Select Attempt to Input Action on the AR Interactor Spawn Trigger component in the `Screen Space Ray Interactor` prefab in the AR Starter Assets sample. Changed the binding in the Spawn Object input action to use the tap gesture in the `TouchscreenGestureInputController` input device instead of the generic `<Touchscreen>/Press` binding with the Tap interaction so that spawning uses consistent tap cancel logic as selection taps. (Backport from 3.1.0)\n- Changed Min Scale from 0.05 to 0.2 on the AR Transformer component on each of the spawning objects in the `ARDemoScene`. (Backport from 3.1.0)\n- Changed `RigidBody.Interpolate` to `None` for interactables in the `HandsDemoScene` to fix interactable position issues when the table is moved. (Backport from 3.1.0)\n- Changed `XRRayInteractor.TryGetHitInfo` to return the hit info of the selected interactable or highest scored interactable instead of the nearest raycast hit. ([XRIT-141](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-141)) (Backport from 3.1.0)\n\n### Fixed\n- Fixed `BaseAffordanceStateProvider` so it passes the previous `AffordanceStateData` to custom affordance state receivers. (Backport from 3.1.0-pre.1)\n- Fixed an issue with the `XRPokeInteractor` that would attempt to register a valid target for each collider that was poked for a single interactable. ([XRIT-209](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-209)) (Backport from 3.1.0)\n- Fixed the AR Interactor Spawn Trigger component in the AR Starter Assets sample to avoid spawning a new object when tapping to select an existing object caused by the Spawn Object and Select inputs using different binding sources that have a frame delay. (Backport from 3.1.0)\n- Fixed missing tooltip on the Sphere Interaction Caster component for the Physics Trigger Interaction property. Updated all related tooltips and documentation to clarify that Use Global refers to the Queries Hit Triggers setting in Edit &gt; Project Settings &gt; Physics. (Backport from 3.1.0)\n- Fixed compilation issue in `OpenXRHapticImpulseChannel` related to `OpenXRInput.GetActionHandle` when OpenXR Plugin package version 1.6.0 is installed. (Backport from 3.1.0)\n- Fixed issue with input field caret position when using mouse and keyboard input on `XRKeyboardDisplay` input fields. Users will need to reimport the Spatial Keyboard sample to get the updated component script. ([XRIT-230](https://issuetrac"
      }
    },
    "3.1.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.1.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.xr": "1.0.0",
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.4.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.1/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "9b07900cb16350b70554da71cbe8466cfe0a8686",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.1.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "displayName": "Legacy XR Input Readers"
        },
        {
          "path": "Samples~/visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample\n • Unity 2022.3 LTS or newer (minimum 2022.3.19f1)",
          "displayName": "visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Changed\n- Changed the `XRI Default Input Actions` in the Starter Assets sample. The `Select` and `UI Press` actions now include `select` bindings from the [Khronos Simple Controller (OpenXR)](xref:openxr-khronos-simple-controller-profile).\n\n### Fixed\n- Fixed issue with input field caret position when using mouse and keyboard input on `XRKeyboardDisplay` input fields. Users will need to reimport the Spatial Keyboard sample to get the updated component script. ([XRIT-230](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-230))\n- Fixed tooltip in XR Input Modality Manager component.\n- Fixed Editor analytics schema version.\n- Fixed API Updater prompts and use of deprecated method warnings in visionOS sample.\n- Fixed XR UI Input Module so the Submit and Cancel UI actions will now respect configured interactions. This matches the change made to the `InputSystemUIInputModule` in Input System 1.9.0."
      }
    },
    "3.1.0": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.1.0",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.xr": "1.0.0",
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.4.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.1/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "3c2fedf72c796cc5ef73ad86e2886ce0f4b9262f",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.1.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "displayName": "Legacy XR Input Readers"
        },
        {
          "path": "Samples~/visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added code samples for interaction events and interaction manager registration events in interaction events documentation.\n- Added warning help box to `CurveInteractionCaster` and `XRRayInteractor` when using cone casting with multiple segments to inform users about potential computation cost.\n- Added a Drag Start Position Input property to the Screen Space Ray Pose Driver component to improve the ability to select a dragged object in AR projects. The ray will be initially cast from the touch start position instead of the current drag position when the drag gesture starts in order to improve the ability to pick small objects.\n- Added a Tap Duration property to the Touchscreen Gesture Input Loader component to configure the threshold that a touch and release must occur within for a tap gesture. The `GestureRecognizer` classes used in the `TouchscreenGestureInputController` were made `public` to allow the configuration properties to be modified.\n- Added Editor analytics to gather data that helps Unity understand how the package is being used in projects. If you don't want to send data to Unity, please see [Editor analytics documentation](https://docs.unity3d.com/Manual/EditorAnalytics.html) for how to disable analytics in your project.\n\n### Changed\n- Changed the tap cancel duration from 0.3 seconds to 0.5 seconds on the `TouchscreenGestureInputController` input device created by the Touchscreen Gesture Input Loader component. This affects the `Screen Space Ray Interactor` prefab in the AR Starter Assets sample. This should make selecting objects more forgiving with a slower tap. ([XRIT-208](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-208))\n- Changed the Max Tap Duration on the Tap interactions from the default Input System (0.2 seconds) to 0.5 seconds on the mouse bindings in both the Tap Start Position and Spawn Object input actions. This should make selecting and spawning objects more forgiving with a slower tap when using the mouse when simulating in the Unity Editor. ([XRIT-208](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-208))\n- Changed Spawn Trigger Type from Select Attempt to Input Action on the AR Interactor Spawn Trigger component in the `Screen Space Ray Interactor` prefab in the AR Starter Assets sample. Changed the binding in the Spawn Object input action to use the tap gesture in the `TouchscreenGestureInputController` input device instead of the generic `<Touchscreen>/Press` binding with the Tap interaction so that spawning uses consistent tap cancel logic as selection taps.\n- Changed Min Scale from 0.05 to 0.2 on the AR Transformer component on each of the spawning objects in the `ARDemoScene`.\n- Changed `RigidBody.Interpolate` to `None` for interactables in the `HandsDemoScene` to fix interactable position issues when the table is moved.\n- Changed `XRUIInputModule` to now initialize to the Input System when active input handling in Project Settings is set to Input System Package (New) or Both.\n- Changed `XRUIInputModule` to use `enableMouseInput`, `enableTouchInput`, `enableGamepadInput`, and `enableJoystickInput` when using Input System Package (New) as the backend when none of the Input System UI Actions are set, not just when using Input Manager (Old).\n- Changed `XRRayInteractor.TryGetHitInfo` to return the hit info of the selected interactable or highest scored interactable instead of the nearest raycast hit. ([XRIT-141](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-141))\n- Changed `XRDeviceSimulator` and `XRInteractionSimulator` by adding the `OnDestroy` method. Users who had already implemented either method in derived classes will need to call the base method.\n\n### Deprecated\n- Deprecated `XRUIInputModule.activeInputMode` and hide in the Inspector window since the backing serialized field is ignored and instead set in `OnEnable` to Input System Actions when possible.\n\n### Fixed\n- Fixed an issue with the `XRPokeInteractor` that would attempt to register a valid target for each collider that was poked for a single interactable. ([XRI"
      }
    },
    "2.6.4": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.6.4",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.inputsystem": "1.7.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.10"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.6/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "c169023e2c4440f4f459129bec07629b89bf9c0f",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.6.4.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:content/82022\">Oculus Integration Assets</a>",
          "displayName": "Meta Gaze Adapter"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added cone casting support to `XRRayInteractor` for Projectile, Bezier Curve, and lines with multiple segments. (Backport from 3.0.6)\n- Added `Live Cone Cast Debug Visuals` option for `XRRayInteractor` to display a more detailed cone cast debug visual. (Backport from 3.0.6)\n  - Note, this is only displayed in the Editor during Play mode when the GameObject is selected in the hierarchy. (Backport from 3.0.6)\n- Added math caching for `XRRayInteractor` cone cast angle and cone cast radius to improve performance. (Backport from 3.0.6)\n- Added project validation rule to the Starter Assets sample to suggest upgrading Input System to 1.11.0 or newer when project-wide actions are used to avoid potential errors when custom types are used in the asset. ([XRIT-157](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-157)) (Backport from 3.0.6)\n- Added an extra gizmo to the XR Body Transformer to show locomotion collision constraints for the Character Controller. (Backport from 3.0.7)\n- Added an optional bypass for UI Toolkit events that may cause incorrect events to get sent to UI Toolkit elements such as scroll views. For more information see the manual page for [XRUIInputModule](xref:xri-ui-setup). ([XRIT-203](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-203)) (Backport from 3.0.7)\n\n### Changed\n- Changed `TrackedDeviceGraphicRaycaster` and `TrackedDevicePhysicsRaycaster` hit distance calculation to take into account full distance from the cast origin when there are multiple ray points. (Backport from 3.0.6)\n- Changed `TrackedDeviceGraphicRaycaster` and `TrackedDevicePhysicsRaycaster` hit distance comparison in `PerformRaycast` from less than to less than or equal to. (Backport from 3.0.6)\n- Changed `XRRayInteractor` hit distance calculation to take into account full distance from the cast origin when using multiple target curve segments. (Backport from 3.0.6)\n\n### Fixed\n- Fixed an issue where UI sub canvases were getting blocked by parent canvas items and not allowing interaction. ([XRIT-164](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-99)) (Backport from 3.0.6)\n- Fixed `XRRayInteractor` to still process hits in the case where the 2D and 3D hits are the same GameObject. (Backport from 3.0.6)\n- Fixed issue with `XRRayInteractor` hover not working properly when a `TrackedDevicePhysicsRaycaster` is added to the scene. ([XRIT-97](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-97))\n- Fixed an issue where Interactors that were subscribed to hover events were not getting Exit events when the UI object being hovered is disabled or destroyed in the scene. (Backport from 3.0.6)\n- Fixed the pointer ID system in the `XRUIInputModule` to reuse pointer IDs. This fixes an issue with the pointer limit in UI Toolkit. ([XRIT-184](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-184)) (Backport from 3.0.6)"
      }
    },
    "3.1.0-pre.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.1.0-pre.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.xr": "1.0.0",
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.4.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.1/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "2af887886459e50c4cf32b08e53725cb23f2cb17",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.1.0-pre.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "displayName": "Legacy XR Input Readers"
        },
        {
          "path": "Samples~/visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added the ability to trigger a 180° degree snap turn around on the Continuous Turn Provider directly instead of having to use a partially enabled Snap Turn Provider. Added properties to enable or disable left-right turning and turn around in the `ContinuousTurnProvider` to match the `SnapTurnProvider` options.\n- Added support for anchor manipulation from controller thumbstick input to the Near-Far Interactor GameObject. The Interaction Attach Controller now has additional properties when Use Manipulation Input is enabled for allowing rotation (horizontal and vertical) and translation along the selection line.\n- Added custom Inspector window for the Interaction Attach Controller.\n- Added `GravityProvider` to handle gravity instead of being applied with the move and grab providers.\n- Added `JumpProvider` to handle simple jumping functionality. This implements the added `IGravityController` interface.\n- Added ability to control whether gravity begins to apply or stays paused when releasing with the `ClimbProvider`.\n- Added a `SimulatedDeviceLifecycleManager` component that handles all the simulated devices, and works in tandem with simulator classes such as `XRDeviceSimulator`.\n- Added a `SimulatedHandExpressionManager` component that handles the simulated hand expressions, and works in tandem with simulator classes such as `XRDeviceSimulator`.\n- Added the new `XR Interaction Simulator` which provides a simplified interface for simulating XR interaction in the editor.\n- Added public properties that wrap serialized fields in some behaviors and their corresponding Editor classes (`CurveInteractionCaster`, `XRInteractorLineVisual`, `XRRayInteractor`, and `UIInputModule`).\n\n### Changed\n- Changed the `XRI Default Input Actions` in the Starter Assets sample to include a Jump Input Action.\n- Changed the XR Origin (XR Rig) prefab in the Starter Assets sample to include the `JumpProvider` and `GravityProvider` by default.\n- Changed some APIs used by the `XRPokeInteractor` for enabling the ability to poke UGUI canvases from `internal` to `public` to allow for custom interactor implementations. (Forward port from 2.6.0)\n- Changed Snap Turn Provider turn around behavior to only trigger once per turn around action. Repeat turns while the thumbstick is pushed in a direction will thus only apply to left or right.\n- Changed the XR Origin (XR Rig) prefab in the Starter Assets sample to enable turn around on the Continuous Turn Provider so that functionality is enabled by default if Smooth Turn Enabled is true on the Controller Input Action Manager.\n- Changed the Near-Far Interactor prefab in the Starter Assets sample to enable anchor manipulation (Translate and Horizontal Rotation).\n- Changed `ContinuousMoveProvider` to implement the `IGravityController` interface.\n- Changed `ContinuousMoveProvider` to handle falling movement differently than grounded movement.\n- Changed `ClimbProvider` to implement the `IGravityController` interface.\n- Changed `ClimbProvider` to zero out gravity accumulation while climbing by implementing the added `IGravityController` interface.\n- Changed `ClimbProvider` to no longer force unconstrained movement through collisions (see `forceUnconstrained` in `XROriginMovement`).\n- Changed scripts to improve performance of processing interaction strength (tagged `XRI.ProcessInteractionStrength` in Profiler).\n- Changed some internal methods to be public or protected (`AttachPointVelocityTracker.ResetVelocityTracking`, `CurveInteractionCaster.OnDrawGizmosSelected`, and `XRBodyTransformer.OnDrawGizmosSelected`).\n- Changed `com.unity.xr.core-utils` dependency from 2.2.3 to 2.4.0.\n\n### Deprecated\n- Deprecated `useGravity` from `ContinuousMoveProvider` and the abstract `ConstrainedMoveProvider` (`GrabMoveProvider` and `TwoHandedGrabMoveProvider`). This functionality has been replaced with the Gravity Provider component and its `useGravity` property.\n- Deprecated some nested types in `XRDeviceSimulator` and replaced them with either nested or unnested types within the `UnityEngine.XR.Interaction.Toolkit.Inputs.Simula"
      }
    },
    "3.0.6": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.0.6",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.xr": "1.0.0",
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.physics": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.0/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "e148bc4c1a63bf7bd0c44f3831e3500585f11e8d",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.0.6.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "displayName": "Legacy XR Input Readers"
        },
        {
          "path": "Samples~/visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added cone casting support to `XRRayInteractor` for Projectile, Bezier Curve, and lines with multiple segments.\n- Added `Live Cone Cast Debug Visuals` option for `CurveInteractionCaster` and `XRRayInteractor` to display a more detailed cone cast debug visual.\n  - Note, this is only displayed in the Editor during Play mode when the GameObject is selected in the hierarchy.\n- Added math caching for `CurveInteractionCaster` and `XRRayInteractor` cone cast angle and cone cast radius to improve performance.\n- Added `OnDrawGizmosSelected` debug visuals to `CurveInteractionCaster` for raycast, cone cast, and sphere cast.\n- Added `KeyboardOptimizer` script to the Spatial Keyboard sample. This script will update the keyboard canvas hierarchy to batch the canvas elements properly at runtime.\n- Added `KeyboardBatchFollow` script to the Spatial Keyboard sample to update the position of a list of transforms to a specific transform at runtime.\n- Added project validation rule to the Starter Assets sample to suggest upgrading Input System to 1.11.0 or newer when project-wide actions are used to avoid potential errors when custom types are used in the asset. ([XRIT-157](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-157))\n\n### Changed\n- Changed `TrackedDeviceGraphicRaycaster` and `TrackedDevicePhysicsRaycaster` hit distance calculation to take into account full distance from the cast origin when there are multiple ray points.\n- Changed `TrackedDeviceGraphicRaycaster` and `TrackedDevicePhysicsRaycaster` hit distance comparison in `PerformRaycast` from less than to less than or equal to.\n- Changed `CurveInteractionCaster` and `XRRayInteractor` hit distance calculation to take into account full distance from the cast origin when using multiple target curve segments.\n- Changed `Teleport Interactor` prefab in the Starter Assets sample to enable Hit Closest Only to improve hitting on overlapping teleportation areas and teleportation anchors.\n- Changed the Poke Interactor prefab by aligning the tip of the poke visual to the poke point.\n- Changed the `XRPokeFollowAffordance` script to only affect the local z-axis if a canvas element.\n- Changed the prefabs in the Spatial Keyboard sample to improve performance by supporting batching. Added `KeyboardOptimizer` component to `XRI Keyboard` and `KeyboardBatchFollow` component in `XRI Keyboard Key` prefab.\n- Changed project validation scripts to report a warning instead of error if specific package samples are out of date.\n- Updated many assets in the sample packages to help fit within file name length constraints on some operating systems.\n\n### Fixed\n- Fixed Material Pipeline Handler for the Spatial Keyboard sample materials.\n- Fixed a small issue with `MaterialPipelineHandler` where corrupt assets could lead to a null reference exception.\n- Fixed an issue where UI sub canvases were getting blocked by parent canvas items and not allowing interaction. ([XRIT-99](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-99))\n- Fixed `NearFarInteractor` and `XRRayInteractor` to still process hits in the case where the 2D and 3D hits are the same GameObject.\n- Fixed issue with `XRRayInteractor` hover not working properly when a `TrackedDevicePhysicsRaycaster` is added to the scene. ([XRIT-97](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-97))\n- Fixed `CurveInteractionCaster` not working properly with more than 1 target curve segments.\n- Fixed `SimpleAudioFeedback` and `SimpleHapticFeedback` so it does not replace the serialized `AudioSource` or `HapticImpulsePlayer` component reference during `Awake` when not null.\n- Fixed an issue where Interactors that were subscribed to hover events were not getting Exit events when the UI object being hovered is disabled or destroyed in the scene.\n- Fixed the pointer ID system in the `XRUIInputModule` to reuse pointer IDs. This fixes an issue with the pointer limit in UI Toolkit. ([XRIT-184](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-184))"
      }
    },
    "3.0.7": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.0.7",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.xr": "1.0.0",
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.physics": "1.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.0/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "3c62ab08b942ff4b2fcf3c67d9ec9b00da5079fa",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.0.7.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "displayName": "Starter Assets"
        },
        {
          "path": "Samples~/Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "Hands Interaction Demo"
        },
        {
          "path": "Samples~/AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "displayName": "AR Starter Assets"
        },
        {
          "path": "Samples~/XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "displayName": "XR Device Simulator"
        },
        {
          "path": "Samples~/Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "displayName": "Spatial Keyboard"
        },
        {
          "path": "Samples~/Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "displayName": "Legacy XR Input Readers"
        },
        {
          "path": "Samples~/visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "displayName": "visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added an extra gizmo to the XR Body Transformer to show locomotion collision constraints for the Character Controller. ([XRIT-181](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-181))\n- Added an optional bypass for UI Toolkit events that may cause incorrect events to get sent to UI Toolkit elements such as scroll views. For more information see the manual page for [XRUIInputModule](xref:xri-ui-input-module). ([XRIT-203](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-203))\n\n### Changed\n- Changed scripts to use Transform methods for getting or setting both position and rotation in a single method call to improve performance.\n\n### Fixed\n- Fixed regression introduced with version [3.0.6](#306---2024-10-15) so the XR Transform Stabilizer component allows empty Aim Target Object references. This fixes the Gaze Interactor ray to update correctly in the XR Origin (XR Rig) prefab.\n- Fixed issues with the near far interactor's attach controller where lateral motion would erroneously trigger z-motion, and z-motion would only trigger when moving the control parallel to the ground. ([XRIT-195](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-195))\n- Fixed issue with `CurveInteractionCaster` and `XRRayInteractor` cone casting where trigger colliders would incorrectly block interactables. Conecasting now filters out trigger while it processes targets instead of after the raycast targets were identified."
      }
    },
    "3.0.5": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.0.5",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.xr": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.textmeshpro\">TextMeshPro</a>\n • Starter Assets sample",
          "path": "Samples~/Spatial Keyboard"
        },
        {
          "displayName": "Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "path": "Samples~/Legacy XR Input Readers"
        },
        {
          "displayName": "visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "path": "Samples~/visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added [XRI 3.0 upgrade guide](xref:xri-upgrade-guide-3-0) documentation.\n- Added dependency guards to the [Spatial Keyboard](../manual/samples-spatial-keyboard.html) sample to prevent compile errors if UGUI is missing in Unity 6 or if TextMesh Pro is missing in earlier editor versions.\n- Added project validation rules to the [Spatial Keyboard](../manual/samples-spatial-keyboard.html) sample for TextMesh Pro and UGUI.\n- Added `hideKeyboardOnDisable` property to `XRKeyboardDisplay`, which causes the display's observed keyboard to close when the `XRKeyboardDisplay` GameObject is disabled. This property is enabled by default.\n\n### Fixed\n- Fixed Teleportation Area component so it filters out Sphere Cast overlap hits at the start of the sweep so it no longer teleports to (0, 0, 0). Changed so the selection is blocked so the XR Interactor Line Visual uses its blocked style in that case. ([XRIT-138](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-138))\n- Fixed Sector interaction Editor to draw all properties in the Input Actions Editor window in Unity 2022.3 or newer.\n- Fixed regression with `XRSocketInteractor` and `XRSocketGrabTransformer` where an interactable GameObject does not move to the position of the `XRSocketInteractor` when set as the Starting Selected Interactable. ([XRIT-164](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-164))"
      },
      "upmCi": {
        "footprint": "7566a098e782457a28cd5892be125fe95fdc86c2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "12b3e5030eeaf89050b9ebf69610254d665b9ddb"
      },
      "dist": {
        "shasum": "92ed11146cd25550e6e2ddd3e81a578561dd7ac4",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.0.5.tgz"
      }
    },
    "2.6.3": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.6.3",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.7.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.",
          "path": "Samples~/Spatial Keyboard"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:content/82022\">Oculus Integration Assets</a>",
          "path": "Samples~/Meta Gaze Adapter"
        }
      ],
      "_upm": {
        "changelog": "### Changed\n- Changed `BaseTeleportationInteractable` and `ClimbInteractable` `Awake` logic to limit expensive `FindObjectOfType` search for `TeleportationProvider` and `ClimbProvider` to once per frame if those `LocomotionProviders` are left null in the inspector. (Backport from 3.0.4)\n\n### Fixed\n- Fixed Teleportation Area component so it filters out Sphere Cast overlap hits at the start of the sweep so it no longer teleports to (0, 0, 0). Changed so the selection is blocked so the XR Interactor Line Visual uses its blocked style in that case. ([XRIT-138](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-138)) (Backport from 3.0.5)\n- Fixed Sector interaction Editor to draw all properties in the Input Actions Editor window in Unity 2022.3 or newer. (Backport from 3.0.5)\n- Fixed regression with `XRSocketInteractor` and `XRSocketGrabTransformer` where an interactable GameObject does not move to the position of the `XRSocketInteractor` when set as the Starting Selected Interactable. ([XRIT-164](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-164)) (Backport from 3.0.5)"
      },
      "upmCi": {
        "footprint": "df19c825b999f6a19afd7c063cafdd69e820ef7b"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.6/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "aa4c569bb6cb95da73b164b065533379e4e45301"
      },
      "dist": {
        "shasum": "617795318a89030003d2a76d2350a4f94c7ccea2",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.6.3.tgz"
      }
    },
    "3.0.4": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.0.4",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.xr": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System. Also contains a demo scene.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Demo scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and a demo scene to get you started.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • Starter Assets sample",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.",
          "path": "Samples~/Spatial Keyboard"
        },
        {
          "displayName": "Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "path": "Samples~/Legacy XR Input Readers"
        },
        {
          "displayName": "visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>\n • Starter Assets sample",
          "path": "Samples~/visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added support for [Hand Interaction Profile (OpenXR)](https://docs.unity3d.com/Packages/com.unity.xr.openxr@latest/index.html?subfolder=/manual/features/handinteractionprofile.html) to the XR Input Modality Manager component and added bindings to the `XRI Default Input Actions` asset in the Starter Assets sample.\n- Added interaction layer configuration to `XRInteractorLineVisual` to allow specification of which interactables cause a straight line ray cast to bend to the attach transform on select.\n\n### Changed\n- Changed logic in the XR Input Modality Manager component to accept `Position | Rotation` tracking state flags as sufficient conditions to enable the input modality to work around devices that do not set `isTracked`, such as some Windows Mixed Reality controllers.\n- Changed `XR Origin Hands (XR Rig)` by updating both Near-Far Interactor GameObjects in the hands hierarchy to use different input actions for UI Press and Select inputs.\n  - This was needed since the bindings are now different for those two input actions. The Value Derived Button Reader component was moved from the Near-Far Interactor GameObject to two child GameObjects for better readability to distinguish between Select Input and UI Press Input. It was also replaced with a new Release Threshold Button Reader component to also use the bool actions in the logic for being performed.\n- Changed default value of Press Threshold in `ValueDerivedButtonReader` from 0.85 to 0.8.\n- Changed the Pinch Point Follow component to use the Pinch Pose from the `XRHandSubsystem` (instead of computing the average of the index finger and thumb tip) when the pose is available from the subsystem. Requires XR Hands 1.5.0 or newer.\n- XRPokeFollowAffordance script in Starter Assets sample now updates the poke follow transform to match clamping limits, and displays a yellow debug line to visualize limits.\n- Changed `BaseTeleportationInteractable` and `ClimbInteractable` `Awake` logic to limit expensive `FindObjectOfType` search for `TeleportationProvider` and `ClimbProvider` to once per frame if those `LocomotionProviders` are left null in the inspector.\n- Renamed a prefab asset in Starter Assets sample to reduce the total file path length.\n\n### Fixed\n- Fixed AABB errors caused by the Curve Visual Controller component with the Near-Far Interactor when the line length was near zero. The Line Renderer component will now be disabled when the length is under 0.01 to also avoid unstable line rendering.\n- Fixed \"Look rotation viewing vector is zero\" errors caused by Pinch Point Follow component when the ray end point is at the same location as the pinch position.\n- Fixed the Pinch Point Follow component to use the XR Origin's up instead of always using global up when computing the rotation.\n- Fixed the Pinch Point Follow component to not write to the Transform rotation when the optional Target Rotation property is not set.\n- Fixed rotation drift that would occur when doing two handed rotation with the `XRGeneralGrabTransformer`. New measures gradually counter drift as it starts to accumulate.\n- Fixed poke behavior when starting a poke from behind and then moving it back forward to poke in the correct direction.\n- Fixed poke filter not working with interactors that are not explicitly the XRPokeInteractor, despite implementing necessary interfaces.\n- Fixed an issue where the Near-Far Interactor would not be properly blocked by non-interactive 3D obstructions during far interactions. ([XRIT-154](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-154))\n- Fixed deprecated messages to use the correct class names for `XRInputButtonReader` and `XRInputValueReader` (instead of `XRInputButtonProvider` and `XRInputValueProvider`).\n- Fixed issue where screen-space UI was no longer being occluded via the `XRRayInteractor` which caused the delete button to no longer work in the `ARDemoScene`. Update the AR Starter Assets sample in your project or update XR Ray Interactor in your AR project to enable Block Interactions With Screen Space UI. ([XRIT-152](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-152))"
      },
      "upmCi": {
        "footprint": "00950c5d0fdd05ca1aabcc1b6a0c6b13dc1a418a"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "831fe273aed1ea69d97db86517a906fda66a7cdd"
      },
      "dist": {
        "shasum": "07ec8e1205bc81df4af881ebc0607409b5e5adaa",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.0.4.tgz"
      }
    },
    "3.0.3": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.0.3",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.xr": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and demo scenes to get you started. Note: This depends on the Starter Assets sample package.",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Spatial Keyboard",
          "description": "Virtual spatial keyboard to allow for text entry in a world space UI. This interactable keyboard can be used in your app instead of the platform's system keyboard.",
          "path": "Samples~/Spatial Keyboard"
        },
        {
          "displayName": "Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "path": "Samples~/Legacy XR Input Readers"
        },
        {
          "displayName": "visionOS",
          "description": "This sample provides a demo scene and prefabs designed to to help you get started developing on visionOS with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.arfoundation\">AR Foundation</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.visionos\">PolySpatial visionOS</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.polyspatial.xr\">PolySpatial XR</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/visionOS"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n- Fixed missing Scripting API documentation on public enum value."
      },
      "upmCi": {
        "footprint": "e6f0356a597b0d511c1952377e3b3f995cd9dfba"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "a6082ebcc6d8b986a9d2603a2c20b322d26aa5b8"
      },
      "dist": {
        "shasum": "3ae5be75f8e0221ad43d0f3dd988a47ee88da9dc",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.0.3.tgz"
      }
    },
    "2.5.4": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.5.4",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.7.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and demo scenes to get you started. Note: This depends on the Starter Assets sample package.",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:content/82022\">Oculus Integration Assets</a>",
          "path": "Samples~/Meta Gaze Adapter"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n- Fixed compilation errors on tvOS platform where `ENABLE_VR` is not defined when AR Foundation is installed. Also fixed when XR Hands is installed in the Hands Interaction Demo sample. (Backport from 3.0.0)\n- Fixed `TrackedGraphicRaycaster` to clear poke interaction data when disabled. ([XRIT-142](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-142)) (Backport from 3.0.0)\n- Fixed warning about use of deprecated `VersionsInfo.verified` by replacing with `VersionsInfo.recommended` in the Hands Interaction Demo sample in Unity 2022.2 and newer. (Backport from 3.0.0)\n- Fixed the XR Interactor Line Visual from bending towards an XR Interactable Snap Volume behind UI when the valid UI hit is closest. (Backport from 3.0.2)\n- Fixed tap gesture detection for selecting and spawning interactable objects in AR scenes. ([XRIT-145](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-145)) (Backport from 3.0.2)\n  - Changed the Tap Start Position input action to remove the Tap interaction from the `tapStartPosition` binding in the Starter Assets sample `XRI Default Input Actions` asset. The sample will need to be reimported to remove the Tap interaction from the binding for taps to be functional. This change along with changes to the `XRScreenSpaceController` also fixes the selected object from staying selected and movable with the mobile device orientation for 0.2 seconds after a tap was released."
      },
      "upmCi": {
        "footprint": "19789f1d7787c88d33738db380787389e56d3924"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.5/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "e01bea0029c4995e80fe3e3f8a24f92e1cad1f4c"
      },
      "dist": {
        "shasum": "a13a7f1242904d56f1a8cc0c0a3cefe50fa55726",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.5.4.tgz"
      }
    },
    "3.0.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.0.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.xr": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and demo scenes to get you started. Note: This depends on the Starter Assets sample package.",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "path": "Samples~/Legacy XR Input Readers"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n- Fixed warnings such as \"Main Object Name '_MaterialPipelineHandler' does not match filename 'MaterialPipelineHandler'\" in the package samples."
      },
      "upmCi": {
        "footprint": "dfbca5f0b37f4f6253610fe132218ecfd1549498"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "c78b01d84fc18a12e6bb6c7235943926335a3fa3"
      },
      "dist": {
        "shasum": "fbb65dd1241738001edfa38f81063d73b66409d4",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.0.1.tgz"
      }
    },
    "3.0.0": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.0.0",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.8.1",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.xr": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and demo scenes to get you started. Note: This depends on the Starter Assets sample package.",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "path": "Samples~/Legacy XR Input Readers"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added many improvements to the samples, mainly focusing on the material usage and better interaction feedback.\n  - Added `MaterialPipelineHandler` scriptable object to Starter Assets sample which allows the materials used in the sample to automatically adjust for the Built-in Render Pipeline or the Universal Render Pipeline (URP).\n  - Added `ControllerAnimator` script to Starter Assets sample to animate the thumbstick, trigger, and grip of the controller model.\n  - Added Far Grab Interactable Objects station to `DemoScene` in Starter Assets sample to demonstrate use of Far Attach Mode and Attach Transform setups.\n\n### Changed\n- Changed `IXRInputButtonReader` introduced in version 3.0.0-pre.1 to add a new `ReadWasCompletedThisFrame` method. This allows callers to determine if the button was released that frame without needing to track the status of input every frame.\n  - Changed `XRInputButtonReader` introduced in version 3.0.0-pre.1 by changing the method signature of `QueueManualState` to add a `bool` parameter for whether it should queue as completed.\n  - Updated `ValueDerivedButtonReader` script in the Hands Interaction Demo sample for the new signature.\n- Changed `com.unity.inputsystem` dependency from 1.7.0 to 1.8.1.\n- Changed namespace of interaction attachment classes and interfaces:\n  - `UnityEngine.XR.Interaction.Toolkit.Interaction` moved to `UnityEngine.XR.Interaction.Toolkit.Attachment`:\n    - `AttachPointVelocityTracker`, `IAttachPointVelocityProvider`, `AttachPointVelocityProviderExtensions`, `IAttachPointVelocityTracker`\n- Changed namespace of various interactable classes, enums, structs, and interfaces:\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Interactables`:\n    - `DistanceInfo`, `IXRActivateInteractable`, `IXRFocusInteractable`, `XRFocusInteractableExtensions`, `InteractableFocusMode`, `IXRHoverInteractable`, `XRHoverInteractableExtensions`, `IXRInteractable`, `IXRInteractionStrengthInteractable`, `IXRSelectInteractable`, `XRSelectInteractableExtensions`, `InteractableSelectMode`, `XRBaseInteractable`, `XRGrabInteractable`, `XRInteractableSnapVolume`, `XRSimpleInteractable`\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Interactables.Visuals`:\n    - `IXRInteractableCustomReticle`, `XRTintInteractableVisual`\n  - `UnityEditor.XR.Interaction.Toolkit` moved to `UnityEditor.XR.Interaction.Toolkit.Interactables`:\n    - `XRBaseInteractableEditor`, `GrabTransformersReorderableList`, `XRGrabInteractableEditor`, `XRInteractableSnapVolumeEditor`\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Filtering`:\n    - `IXRFilterList`, `IMultiPokeStateDataProvider`, `IPokeStateDataProvider`\n- Changed namespace of various interactor classes, enums, structs, and interfaces:\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Interactors`:\n    - `InteractorHandedness`, `IXRActivateInteractor`, `IXRHoverInteractor`, `XRHoverInteractorExtensions`, `IXRInteractionStrengthInteractor`, `IXRInteractor`, `XRInteractorExtensions`, `IXRRayProvider`, `ScaleMode`, `IXRScaleValueProvider`, `IXRSelectInteractor`, `XRSelectInteractorExtensions`, `TargetPriorityMode`, `IXRTargetPriorityInteractor`, `XRBaseInteractor`, `XRDirectInteractor`, `XRGazeInteractor`, `XRPokeInteractor`, `XRRayInteractor`, `SocketScaleMode`, `XRSocketInteractor`, `XRInteractionGroup`, `IXRInteractionOverrideGroup`, `IXRInteractionGroup`, `IXRGroupMember`, `XRGroupMemberExtensions`\n  - `UnityEditor.XR.Interaction.Toolkit` moved to `UnityEditor.XR.Interaction.Toolkit.Interactors`:\n    - `XRBaseInputInteractorEditor`, `XRBaseInteractorEditor`, `XRDirectInteractorEditor`, `XRGazeInteractorEditor`, `XRInteractionGroupEditor`, `XRRayInteractorEditor`, `XRSocketInteractorEditor`\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Interactors.Visuals`:\n    - `ILineRenderable`, `IAdvancedLineRenderable`, `XRInteractorLineVisual`, `IXRReticleDirectionProvider`, `IXRCustomReticleProvider`, `XRInteractorReticleVisual`\n  - `UnityEditor.XR.Interaction.Toolkit` moved to `UnityEditor.XR.Interaction.Toolkit.Interactors.Visuals`:\n    - `XRInteractorLineVisualEditor`, `XRInteractorReticleVisualEditor`\n- Changed namespace of various gaze classes, and interfaces:\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Gaze`:\n    - `IXRAimAssist`, `IXROverridesGazeAutoSelect`, `XRGazeAssistance`\n- Changed namespace of various locomotion classes, structs, enums, and interfaces:\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Locomotion`:\n    - `LocomotionProvider`\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Locomotion.Climbing`:\n    - `ClimbInteractable`, `ClimbProvider`, `ClimbSettings`, `ClimbSettingsDatum`, `ClimbSettingsDatumProperty`, `ClimbTeleportInteractor`\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Locomotion.Movement`:\n    - `ConstrainedMoveProvider`, `ContinuousMoveProvider`, `GrabMoveProvider`, `TwoHandedGrabMoveProvider`\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Locomotion.Teleportation`:\n    - `MatchOrientation`, `TeleportRequest`, `FurthestTeleportationAnchorFilter`, `GazeTeleportationAnchorFilter`, `ITeleportationVolumeAnchorFilter`, `TeleportationAnchor`, `TeleportationArea`, `TeleportationMultiAnchorVolume`, `TeleportationProvider`, `TeleportingEvent`, `TeleportingEventArgs`, `TeleportVolumeDestinationSettings`, `TeleportVolumeDestinationSettingsDatum`, `TeleportVolumeDestinationSettingsDatumProperty`\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Locomotion.Turning`:\n    - `ContinuousTurnProvider`, `SnapTurnProvider`\n  - `UnityEngine.XR.Interaction.Toolkit` moved to `UnityEngine.XR.Interaction.Toolkit.Locomotion.Comfort`:\n    - `VignetteParameters`, `EaseState`, `ITunnelingVignetteProvider`, `LocomotionVignetteProvider`, `TunnelingVignetteController`\n  - `UnityEditor.XR.Interaction.Toolkit` moved to `UnityEditor.XR.Interaction.Toolkit.Locomotion.Climbing`:\n    - `ClimbInteractableEditor`, `ClimbSettingsDatumPropertyDrawer`, `ClimbSettingsPropertyDrawer`\n  - `UnityEditor.XR.Interaction.Toolkit` moved to `UnityEditor.XR.Interaction.Toolkit.Locomotion.Movement`:\n    - `GrabMoveProviderEditor`\n  - `UnityEditor.XR.Interaction.Toolkit` moved to `UnityEditor.XR.Interaction.Toolkit.Locomotion.Teleportation`:\n    - `BaseTeleportationInteractableEditor`, `GazeTeleportationAnchorFilterEditor`, `TeleportationAnchorEditor`, `TeleportationAreaEditor`, `TeleportVolumeDestinationSettingsDatumPropertyDrawer`, `TeleportVolumeDestinationSettingsPropertyDrawer`\n  - `UnityEditor.XR.Interaction.Toolkit` moved to `UnityEditor.XR.Interaction.Toolkit.Locomotion.Comfort`:\n    - `TunnelingVignetteControllerEditor`\n- Updated scripts in package samples to add `using` statements for namespace changes.\n\n### Fixed\n- Fixed compilation errors on tvOS platform where `ENABLE_VR` is not defined when AR Foundation is installed. Also fixed when XR Hands is installed in the Hands Interaction Demo sample.\n- Fixed `TrackedGraphicRaycaster` to clear poke interaction data when disabled. ([XRIT-142](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-142))\n- Fixed warning about use of deprecated `VersionsInfo.verified` by replacing with `VersionsInfo.recommended` in the Hands Interaction Demo sample in Unity 2022.2 and newer."
      },
      "upmCi": {
        "footprint": "f31a2f5499dd320d95704510e6292f914b7191a9"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "c464d3568a4c8dd0333e6bf45de15d7a14add815"
      },
      "dist": {
        "shasum": "661e2a3908abda4071445ea885346fd70b27189a",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.0.0.tgz"
      }
    },
    "3.0.0-pre.2": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.0.0-pre.2",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.7.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.xr": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and demo scenes to get you started. Note: This depends on the Starter Assets sample package.",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "path": "Samples~/Legacy XR Input Readers"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added the `NearFarInteractor` component, a versatile new interactor enabling both near and far interactions. It's designed to be more modular and delegate out responsibilities that used to be difficult to customize within classes like `XRDirectInteractor` and `XRRayInteractor`. It uses two distinct casters (`IInteractionCaster`) to find valid interaction targets, with the near caster optimized for close-range interactions and the far caster supporting UI interaction and distance-based sorting. The interactor also integrates UI interaction capabilities, snapping modes for interactable objects, and implements various interfaces for advanced XR interactions.\n- Added the `CurveInteractionCaster` component, a ray casting implementation to be used with `NearFarInteractor` as the Far Caster. It specializes in curved ray casting, offering advanced world-space UI interactions with flexible path creation. The class implements the `ICurveInteractionCaster` interface, supporting varied hit detection methods including sphere and cone casting, in addition to standard ray casting. Key features include customizable casting distances, curve segments, and casting radius. It is intended to fill the equivalent role of the casting performed by the `XRRayInteractor` component.\n- Added the `SphereInteractionCaster` component, a sphere casting implementation to be used with `NearFarInteractor` as the Near Caster. It executes a sphere overlap check to identify valid interaction targets. It's designed for scenarios where a spherical area of detection is preferable over a single point or line. The class features adjustable parameters like the radius of the sphere cast, physics layer mask for target filtering, and the option to include or ignore trigger colliders. It is intended to fill the equivalent role of the casting performed by the `XRDirectInteractor` component.\n- Added the `CurveVisualController` to manage the visual representation of a line, typically used for highlighting interaction paths or trajectories. It features customizable width, color gradients, and dynamic behaviors like retraction or expansion. The class supports dynamic line rendering with adjustable properties such as line width, gradient, and extension rate. It also offers different line dynamics modes (like traditional, retract on hit loss, and expand from hit point) and the ability to snap to specific points or volumes. It is intended to fill the equivalent role of controlling ray visuals in the `XRInteractorLineVisual` component.\n- Added the `InteractionAttachController` component. It is intended to be a simple template showing how to control the interaction attach transform used by the `NearFarInteractor`. It can handle stabilization when an offset is present and handle an amplified offset movement to move distant objects closer with ease using a pulling gesture.\n- Added the `farAttachMode` property in the `XRGrabInteractable`. It allows for overriding how the `NearFarInteractor` (when far selecting) and the `XRRayInteractor` adjusts their attach transform to cause the interactable to snap near to the hand or whether it moves to the far hit point.\n- Added public [`RequestTeleport`](xref:UnityEngine.XR.Interaction.Toolkit.TeleportationAnchor.RequestTeleport) method to [`TeleportationAnchor`](xref:UnityEngine.XR.Interaction.Toolkit.TeleportationAnchor) to allow a teleport to the anchor to be triggered manually, such as from a UI button click event, instead of only from interaction events like select exited. Teleport to anchor can also be triggered from the Inspector window in the More (&#8942;) menu during Play mode for debugging.\n  - Added protected [`SendTeleportRequest(IXRInteractor)`](xref:UnityEngine.XR.Interaction.Toolkit.BaseTeleportationInteractable.SendTeleportRequest(UnityEngine.XR.Interaction.Toolkit.IXRInteractor)) to the base abstract class to allow the teleport to be triggered from additional contexts.\n- Added option in [`ARTransformer`](xref:UnityEngine.XR.Interaction.Toolkit.Transformers.ARTransformer) to filter translatable planes by the AR Foundation plane classifications. Uses either a list of `PlaneClassification` enum (for older than ARF 6.0) or `PlaneClassifications` flags enum (ARF 6.0 and newer) types.\n- Added `ARTransformerEditor` to customize the Inspector window of the AR Transformer component.\n- Added warnings to the Inspector window of input button reader properties (`XRInputButtonReader`) when the performed Input Action is not configured correctly for button-like behavior.\n\n### Changed\n- Changed `LogicalInputState` by renaming `wasUnperformedThisFrame` to `wasCompletedThisFrame` to match terminology in Input System.\n- Improved input-related backwards compatibility of interactors that have not yet migrated to the new input reader architecture by replacing the Force Deprecated Input property in the Inspector window with Input Compatibility Mode. This property defaults to `Automatic`, which will search up the hierarchy for XR Controller components and only use the deprecated XR Controller component for input if found. This property can also be set to `ForceDeprecatedInput` or `ForceInputReaders` depending on the desired behavior.\n  - Added `XRBaseInputInteractor.inputCompatibilityMode` serialized property and `XRBaseInputInteractor.InputCompatibilityMode` enum.\n  - Deprecated and removed serialization of `XRBaseInputInteractor.forceDeprecatedInput` property.\n- Changed Hand Menu component to automatically hide the menu when a selection is made with the hand for which the menu is anchored to. This functionality can be reverted by disabling the new Hide Menu On Select property.\n- Changed the default value of Force Grab on the XR Ray Interactor component from enabled to disabled.\n- Changed Starter Assets sample script `ControllerInputActionManager` to support Near-Far Interactor, not just Ray Interactor, for the distant/ray manipulation interactor.\n- Changed Hands Interaction Demo sample script `HideObjectWhenRayInteractorBlocked` by renaming to `HideObjectWhenInteractorBlocked` and updated to work with `XRBaseInteractor` instead of just `XRRayInteractor`.\n- Changed `XRBaseGrabTransformer` by making `Start` and `OnDestroy` methods `virtual`.\n- Moved interactor components from the **Component** &gt; **XR** menu into the **Component** &gt; **XR** &gt; **Interactors** menu.\n\n### Fixed\n- Fixed `XRPokeInteractor` and `TrackedGraphicRaycaster` to ensure poke interactor data is cleared when the UI element with a poke interaction is disabled. ([XRIT-115](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-115))\n - Fixed an issue where target filters could not influence the prioritized poke interactable. ([XRIT-114](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-114))\n- Fixed an issue in `XRUIInputModule` where display index was not being set for mouse or touch in the `PointerEventData` object causing it to always default to the first display. ([XRIT-125](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-125))\n- Fixed use of renamed Rigidbody properties in Unity 2023.3 to avoid script migration prompt.\n- Fixed a small performance issue at startup by making XR Ray Interactor only search for AR Raycast Manager when both AR Foundation is installed and Enable AR Raycasting is enabled.\n- Fixed an issue with two handed rotations using the XRGeneralGrabTransformer where some inconsistent motion would occur when the user would rotate more than 180 degrees in any axis.\n- Fixed compilation errors on tvOS platform where `ENABLE_VR` is not defined.\n- Fixed a bug in `XRSocketInteractor` that prevented the deselecting of the Starting Selected Interactable when Hover Socket Snapping was enabled.\n- Fixed broken markdown links within tables in samples documentation in the manual.\n- Fixed mistakes in changelog with version 3.0.0-pre.1 where some entries in the section for version 2.5.2 were missing or should have been in the section for version 3.0.0-pre.1."
      },
      "upmCi": {
        "footprint": "21e408f3e64cba46901cb6def9fc5bbace89550b"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "10243d93941eb44f320af61283261fde07c1f183"
      },
      "dist": {
        "shasum": "8a4f1f7a92b016145346396558f2d92f8f6c30ee",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.0.0-pre.2.tgz"
      }
    },
    "2.5.3": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.5.3",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.7.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and demo scenes to get you started. Note: This depends on the Starter Assets sample package.",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:content/82022\">Oculus Integration Assets</a>",
          "path": "Samples~/Meta Gaze Adapter"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n- Fixed issue where rotating on vertical planes with the `ARTransformer` would snap to an unintended rotation. (Backport from 3.0.0-pre.1)\n- Fixed failing unit tests caused by introduction of global actions in Input System 1.8.0. (Backport from 3.0.0-pre.1)\n- Fixed a math error in the `XRDistanceEvaluator` where `CalculateNormalizedScore` would return an incorrect score. (Backport from 3.0.0-pre.1)\n- Fixed an issue where the direct interactor wasn't correctly processing colliders after the first frame. ([XRIT-116](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-116)) (Backport from 3.0.0-pre.1)\n- Fixed a bug where a `NullReferenceException` was thrown when `Affordance Theme Datum` was not set. If it is null, an error is logged and the `AudioAffordanceReceiver` is disabled, but no exception is thrown. ([XRIT-107](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-107)) (Backport from 3.0.0-pre.1)\n- Fixed the `ActionBasedControllerManager` script in Starter Assets to not stop move locomotion when beginning to point at scrollable UI during locomotion. (Backport from 3.0.0-pre.1)\n- Fixed the `ActionBasedControllerManager` script in Starter Assets to not scroll UI when beginning to point at scrollable UI during locomotion until stopping locomotion. (Backport from 3.0.0-pre.2)\n- Fixed `XRPokeInteractor` and `TrackedGraphicRaycaster` to ensure poke interactor data is cleared when the UI element with a poke interaction is disabled. ([XRIT-115](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-115)) (Backport from 3.0.0-pre.2)\n - Fixed an issue where target filters could not influence the prioritized poke interactable. ([XRIT-114](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-114)) (Backport from 3.0.0-pre.2)\n- Fixed an issue in `XRUIInputModule` where display index was not being set for mouse or touch in the `PointerEventData` object causing it to always default to the first display. ([XRIT-125](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-125)) (Backport from 3.0.0-pre.2)\n- Fixed use of renamed Rigidbody properties in Unity 2023.3 to avoid script migration prompt. (Backport from 3.0.0-pre.2)\n- Fixed a small performance issue at startup by making XR Ray Interactor only search for AR Raycast Manager when both AR Foundation is installed and Enable AR Raycasting is enabled. (Backport from 3.0.0-pre.2)\n- Fixed an issue with two handed rotations using the XRGeneralGrabTransformer where some inconsistent motion would occur when the user would rotate more than 180 degrees in any axis. (Backport from 3.0.0-pre.2)\n- Fixed compilation errors on tvOS platform where `ENABLE_VR` is not defined. (Backport from 3.0.0-pre.2)\n- Fixed a bug in `XRSocketInteractor` that prevented the deselecting of the Starting Selected Interactable when Hover Socket Snapping was enabled. (Backport from 3.0.0-pre.2)\n- Fixed broken markdown links within tables in samples documentation in the manual. (Backport from 3.0.0-pre.2)"
      },
      "upmCi": {
        "footprint": "bbec5449f771f5ada590e19f490170a6e5920f13"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.5/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "341ab102f0a73c29375c7b7de3e88a3171fc29d8"
      },
      "dist": {
        "shasum": "e6eed17ba0d0e9cb09de9bfc830cb33f16592e24",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.5.3.tgz"
      }
    },
    "3.0.0-pre.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "3.0.0-pre.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.7.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.modules.xr": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and demo scenes to get you started. Note: This depends on the Starter Assets sample package.",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Legacy XR Input Readers",
          "description": "This sample provides ScriptableObjects to assist with migration from the older device-based controller input to be used with the new input readers introduced with version 3.0.0.",
          "path": "Samples~/Legacy XR Input Readers"
        }
      ],
      "_upm": {
        "changelog": "> [!WARNING]\n> Some serialized fields used by deprecated code were removed with this version. To avoid potential data loss, especially if you were getting warnings about using deprecated functionality, update your project to the latest 2.x version of this package (for example, 2.5.2) before updating your project to version 3.0.\n\n### Added\n- Added a new type of teleport interactable, [Teleportation Multi-Anchor Volume](../manual/teleportation-multi-anchor-volume.md), that enables teleportation to one of several destination poses chosen by a filter object that implements `ITeleportationVolumeAnchorFilter`.\n  - Added `FurthestTeleportationAnchorFilter`, which is the default filter that chooses the furthest anchor as the destination. Use the menu item **Assets > Create > XR > Locomotion > Furthest Teleportation Anchor Filter** to create an instance of this filter.\n  - Added `GazeTeleportationAnchorFilter`, which chooses a destination based on where the user is looking and how far away the anchor is. Use the menu item **Assets > Create > XR > Locomotion > Gaze Teleportation Anchor Filter** to create an instance of this filter.\n  - Added menu item **Assets > Create > XR > Locomotion > Teleport Volume Destination Settings**, which creates a Teleport Volume Destination Settings Datum asset.\n  - Added `Multi Floor Ladder` prefab to the Starter Assets sample, and added an instance of this prefab to the `Climb Sample` prefab. This prefab includes another ladder Climb Interactable and a Teleportation Multi-Anchor Volume that uses a Gaze Teleportation Anchor Filter to teleport to one of three destinations.\n- Added the interface `IXRInteractableCustomReticle`, which allows a component on an interactable's **Custom Reticle** prefab to respond to the interactable instantiating the reticle and attaching it to an instance of `IXRCustomReticleProvider`.\n  - Added an example implementation of this interface in the new `Climb Teleport Reticle` prefab in the Starter Assets sample.\n- Added a rotation threshold to `XRScreenSpaceController` so that scaling is not triggered while rotating.\n- Added in-editor touchscreen gesture support for rotation and scaling in the starter assets. The input action map now has bindings for the related gestures.\n- Added Climb Teleport Interactor, which enables assistance with climb locomotion by teleporting the user to a specific destination when they end a climb interaction.\n  - Added the property **Climb Assistance Teleport Volume** to Climb Interactable to enable this teleportation behavior for a specific climb interactable.\n  - Made the following changes to the Starter Assets sample to demonstrate climb teleportation:\n    - Added a Climb Teleport Interactor instance in the `XR Origin (XR Rig)` prefab under **Locomotion System** > **Climb**.\n    - Assigned the **Climb Assistance Teleport Volume** references in the `Single Floor Ladder` and `Multi Floor Ladder` prefabs.\n    - Added the affordance component Climb Teleport Destination Indicator, and added an instance of this component to the `XR Origin (XR Rig)` prefab.\n    - Added the `Climb Teleport Arrow` prefab and supporting assets.\n- Added public members `climbAnchorInteractable`, `climbAnchorInteractor`, and `climbAnchorUpdated` to `ClimbProvider`.\n- Added public method `Angle(in Vector3, in Vector3, out float)`, which finds the angle between two vectors, to `BurstMathUtility`.\n- Added functionality to `SortingHelpers`\n  - Added `IInteractorDistanceEvaluator` to be able to define the method used to determine the distances between interactables and an interactor which serves to rank the interactables during a sort.\n  - Added in place interactable sorting methods.\n  - Added delegate to be able to define the method used to determine the distances between interactables and an interactor which serves to rank the interactables during a sort.\n  - Added in place interactable sorting methods.\n- Added `IAttachPointVelocityProvider`, `IAttachPointVelocityTracker`, and `AttachPointVelocityTracker` to make the attach point velocity tracking functionality accessible outside of the `XRBaseInteractor`.\n- Added a new type of component, XR Body Transformer, which manages queued `IXRBodyTransformation`s to apply to the XR Origin. This component supplies an `IXRBodyPositionEvaluator` to transformations so that they can use the user's body as a frame of reference. By default the body position is estimated to be directly underneath the camera. Transformations can also use an optional `IConstrainedXRBodyManipulator` to apply movement constrained by collision.\n  - Added a new type of scriptable object, Character Controller XR Body Manipulator, which implements `IConstrainedXRBodyManipulator` by using a Character Controller that matches the user's body position and height.\n  - Added the following implementations of `IXRBodyTransformation`: `DelegateXRBodyTransformation`, `XROriginMovement`, `XRBodyGroundPosition`, `XROriginUpAlignment`, `XRBodyYawRotation`, `XRCameraForwardXZAlignment`, and `XRBodyScale`.\n- Added `handedness` property to interactors to allow you to specify if the interactor is for the left or right hand. Interactables are able to make use of it for custom functionality when they need to know which hand (if any) the interactor is associated with. Also added extension methods to interactables related to this property: `IXRSelectInteractable.IsSelectedByLeft`, `IXRSelectInteractable.IsSelectedByRight`, `IXRHoverInteractable.IsHoveredByLeft`, and `IXRHoverInteractable.IsHoveredByRight`.\n\n### Changed\n- Changed `IXRInteractor` to add a new `handedness` property to allow you to specify if the interactor is for the left or right hand. The property was added to `XRBaseInteractor` and the prefabs in the Starter Assets sample were updated to initialize it. Users with existing prefabs may want to set the value so that they can make use of it in interactable scripts. Users with custom interactor scripts that do not derive from the base class will need to add it to their class implementation.\n- Changed setup of the ladder and elevated teleport area in the `Climb Sample` prefab in the Starter Assets sample so that the objects are set up in a new `Single Floor Ladder` prefab. This prefab also contains a Teleportation Multi-Anchor Volume to allow teleportation to the top or bottom, whichever is furthest from the user.\n- Changed `XRPokeInteractor` to use `IAttachPointVelocityTracker` instead of the velocity tracking that used to live in `XRBaseInteractor`.\n- Changed `XRTransformStabilizer`\n  - Core logic to compute stabilization is now done in a public static method so that external classes can use it like a utilities library.\n  - Fixed local transformation logic.\n- Optimized included bubbles sort function from `SortingHelpers`.\n- Changed how Two-Handed Grab Move Provider applies rotation and scaling of the XR Origin. Rotation and scaling now happen around the user's body position (the camera position projected onto the XZ plane of the XR Origin) instead of the XR Origin's position.\n- Changed core locomotion system to place less responsibility on provider implementations to manage state changes and allow greater configurability of the order in which providers apply transformations to the XR Origin. Each provider's locomotion state is now centrally maintained by the Locomotion Mediator based on requests for the XR Body Transformer linked to the mediator.\n  - Replaced the now deprecated `LocomotionSystem` with `LocomotionMediator`.\n  - Replaced the now deprecated `LocomotionPhase` with `LocomotionState`.\n  - Deprecated several members of `LocomotionProvider` and added new members in their place for communicating with the Locomotion Mediator and providing information for state changes. Deprecated members include: `beginLocomotion`, `endLocomotion`, `CanBeginLocomotion`, `BeginLocomotion`, and `EndLocomotion`.\n  - Changed timing of when Locomotion Providers apply transformations to the XR Origin. Now in each Provider's `Update`, rather than applying the transformation immediately the Provider queues its transformation into the XR Body Transformer. Transformations are applied in queue order in the XR Body Transformer's `Update`, which occurs later in the same frame.\n  - Changed timing of when `ContinuousMoveProvider`, `ConstrainedMoveProvider`, and `ContinuousTurnProvider` invoke locomotion events, for consistency with other providers. Now these providers invoke `locomotionStarted` when the start of move input occurs (e.g. thumbstick is moved from rest state) and `locomotionEnded` when the end of move input occurs (e.g. thumbstick is released). \n- Changed the move speed in the `XR Origin (XR Rig)` prefab in the Starter Assets sample from `1` to `2.5`.\n- Changed default value of [`UIInputModule.trackedDeviceDragThresholdMultiplier`](xref:UnityEngine.XR.Interaction.Toolkit.UI.UIInputModule.trackedDeviceDragThresholdMultiplier) from `1.4` to `2` and updated the preset in the Starter Assets sample to match.\n- Changed `XRControllerRecorder.GetControllerState` so it only returns a valid value when playing or recording. Also changed so the `out` param is returned `null` instead of allocating when the method returns `false`.\n- Renamed `ActionBasedControllerManager` to `ControllerInputActionManager` in Starter Assets sample.\n- Changed `ControllerInputActionManager` to no longer add or modify interactors in the XR Interaction Group. The prefab in Starter Assets is already configured to what it would try to change it to.\n- Changed the default execution order of `ControllerInputActionManager` back to the default and added an `Update` method instead of creating a coroutine.\n- Renamed Anchor Control in XR Ray Interactor to Attach Transform Manipulation to make it more apparent that it is for manipulating the Attach Transform. Also renamed related properties to make it match the display name in the Inspector window.\n  - Renamed `allowAnchorControl` property to `manipulateAttachTransform`.\n  - Renamed `anchorRotateReferenceFrame` property to `rotateReferenceFrame`.\n  - Renamed `anchorRotationMode` property to `rotateMode`.\n  - Renamed `AnchorRotationMode` enum to `RotateMode`.\n  - Renamed `RotateAnchor` method to `RotateAttachTransform`.\n  - Renamed `TranslateAnchor` method to `TranslateAttachTransform`.\n  - Renamed corresponding properties in the `XRRayInteractorEditor`.\n- Renamed `ScaleMode.Input` to `ScaleMode.ScaleOverTime`.\n- Renamed `ScaleMode.Distance` to `ScaleMode.DistanceDelta`.\n- Renamed Enable Interaction with UI GameObjects on XR Ray Interactor to UI Interaction.\n- Changed the created hierarchy of GameObjects for the XR Origin from the **GameObject** &gt; **XR** menu to no longer include interactors and tweaked some settings for the Mobile AR variant.\n- Changed `XRDirectInteractorEditor` so the Selection Configuration properties are drawn in a foldout. The properties are now drawn in a new `DrawSelectionConfigurationNested` method which the previously defined `DrawSelectionConfiguration` calls into after drawing the foldout.\n\n### Deprecated\n- Deprecated code and serialized fields from XRI 1.x.x are now treated as errors.\n- Deprecation of `AttachPointCompatibilityMode` enum and `XRGrabInteractable.attachPointCompatibilityMode` along with `XRLegacyGrabTransformer` are now treated as errors.\n- Deprecated old way of handling AR Interaction. Download the AR Stater Assets for a full demo scene using the new architecture.\n- The Affordance System namespace and all associated classes have been deprecated. The existing affordance system will be moved, replaced, and updated with a new interaction feedback system in a future version of XRI.\n- Deprecated Character Controller Driver. Instead enable the **Use Character Controller** property under the **Constrained Movement Settings** on the XR Body Transformer.\n- Deprecated exclusive access and timeout behavior of the Locomotion System.\n- Deprecated controller classes (`XRBaseController`, `ActionBasedController`, `XRController`, and `XRScreenSpaceController`) and their corresponding Editor classes. Inputs needed for each interactor are now directly serialized with the interactor. The Transform position and rotation can instead be driven by the Tracked Pose Driver (Input System) component. The model can be instantiated with a custom script or directly added to the XR Origin prefab. These components will no longer appear in the **Component** &gt; **XR** &gt; **Locomotion** menu or in the **Add Component** menu in the Inspector window.\n- Deprecated `InputHelpers`. The values from the XR `InputDevice` class can be read using the new input readers contained in the `Legacy XR Input Readers` sample instead.\n- Deprecated Action-based and Device-based locomotion components. These components will no longer appear in the **Component** &gt; **XR** &gt; **Locomotion** menu or in the **Add Component** menu in the Inspector window.\n  - `ActionBasedContinuousMoveProvider` and `DeviceBasedContinuousMoveProvider` should be replaced with [`ContinuousMoveProvider`](xref:UnityEngine.XR.Interaction.Toolkit.Locomotion.ContinuousMoveProvider).\n  - `ActionBasedContinuousTurnProvider` and `DeviceBasedContinuousTurnProvider` should be replaced with [`ContinuousTurnProvider`](xref:UnityEngine.XR.Interaction.Toolkit.Locomotion.ContinuousTurnProvider).\n  - `ActionBasedSnapTurnProvider` and `DeviceBasedSnapTurnProvider` should be replaced with [`SnapTurnProvider`](xref:UnityEngine.XR.Interaction.Toolkit.Locomotion.SnapTurnProvider).\n  - `GrabMoveProvider.grabMoveAction` should be replaced with [`GrabMoveProvider.grabMoveInput`](xref:UnityEngine.XR.Interaction.Toolkit.GrabMoveProvider.grabMoveInput).\n- Deprecated `XRBaseControllerInteractor` and replaced with [`XRBaseInputInteractor`](xref:UnityEngine.XR.Interaction.Toolkit.XRBaseInputInteractor).\n- Deprecated `XRBaseControllerInteractorEditor` and replaced with `XRBaseInputInteractorEditor`.\n  - Deprecated `XRBaseControllerInteractorEditor.BaseControllerContents` and replaced with `XRBaseInputInteractorEditor.BaseInputContents`.\n- Deprecated `XRBaseInputInteractor.hideControllerOnSelect` since it depended on the deprecated XR Controller (Action-based) or XR Controller (Device-based) component. You can use the Select Entered and Select Exited events to deactivate/activate the controller model GameObject instead.\n\n### Removed\n- Removed menu items for Action-based and Device-based components from the **GameObject** &gt; **XR** menu.\n- Removed menu item for Locomotion System from the **GameObject** &gt; **XR** menu.\n- Removed the backing serialized field (`m_System`) for `LocomotionProvider.system` to avoid it appearing in the Inspector window since `LocomotionSystem` is now deprecated. Users that referenced a specific Locomotion System instance when there were multiple in the scene will now need to move it to the GameObject or parent GameObject of the Locomotion Provider or manually set the property during runtime if they wish to continue using it. If there is only a single Locomotion System component, the provider will automatically find it during Awake.\n- Removed presets for deprecated components from the Starter Assets sample.\n- Removed Meta Gaze Adapter sample.\n- Removed [XR Legacy Input Helpers (com.unity.xr.legacyinputhelpers)](https://docs.unity3d.com/Packages/com.unity.xr.legacyinputhelpers@2.1/) package from dependencies. If you are making use of the pose provider override on the deprecated XR Controller component, you will need to ensure this package is added to your project.\n\n### Fixed\n- Fixed issue where rotating on vertical planes with the `ARTransformer` would snap to an unintended rotation.\n- Fixed failing unit tests caused by introduction of global actions in Input System 1.8.0.\n- Fixed a math error in the `XRDistanceEvaluator` where `CalculateNormalizedScore` would return an incorrect score."
      },
      "upmCi": {
        "footprint": "39edc0937ced716220d9ff484debd843749b88c0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@3.0/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "bd9a97d5d3f2454ba63ee319f22ba929a588f0bc"
      },
      "dist": {
        "shasum": "3ad6d16792d5ea23be16d13b8548ba33f7eda424",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-3.0.0-pre.1.tgz"
      }
    },
    "2.5.2": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.5.2",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.7.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and demo scenes to get you started. Note: This depends on the Starter Assets sample package.",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:content/82022\">Oculus Integration Assets</a>",
          "path": "Samples~/Meta Gaze Adapter"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n- Fixed an issue where the XR Ray Interactor can no longer interact with UI drag events correctly when the UI object is both a Tracked Device Graphics Raycaster and an XR Interactable. This fix introduces a property `blockUIOnInteractableSelection` to `XRRayInteractor` to control this behavior.\n- Fixed an issue where the XR Ray Interactors internal UI cache can cause error log spamming when it is not initialized or becomes null at runtime.\n- Fixed an issue where dropping a grab interactable, when scaling beyond min and max scale thresholds using an `ARTransformer`, didn't properly set the scale back within the threshold limits when Attach Ease In Time or Smooth Scale were enabled. As a part of this fix, `attachEaseInTime` and smoothing will only be considered when an `XRGrabInteractable` is selected.\n- Fixed an issue where poking UI elements with the controller poke wand did not work in the starter assets demo scene."
      },
      "upmCi": {
        "footprint": "fc50984bc4e233e6546293503c1f1b1b3899f79a"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.5/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "b246090d3472f6ddef44f0d6251360fc3d19a2b5"
      },
      "dist": {
        "shasum": "0024acd484c19529cdea5b50af8f32faf567567b",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.5.2.tgz"
      }
    },
    "2.5.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.5.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.7.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and demo scenes to get you started. Note: This depends on the Starter Assets sample package.",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:content/82022\">Oculus Integration Assets</a>",
          "path": "Samples~/Meta Gaze Adapter"
        }
      ],
      "_upm": {
        "changelog": "### Changed\n- Split and moved [Samples](../manual/samples.html) documentation into a new area of the [Table of Contents](../manual/TableOfContents.html) to make discovery and navigation easier.\n- Redesigned and improved [Hands Interaction Demo](../manual/samples-hands-interaction-demo.html) sample scene and prefabs.\n  - Reworked colliders and interactions in sample scene.\n  - Added new rim light material made using Shader Graph.\n  - Added new blend shape pinch dropper for hand rays.\n  - Added grab handle to reposition and reorient the table.\n  - Added poke to drag chess piece examples.\n  - Added socket interactor example to show socket snapping.\n  - Added One Euro Filter algorithm to smooth hand root using XR Hands post processor.\n  - Changed ray visual to now originate from the pinch point instead of a fixed offset from the wrist.\n  - Moved hand menu prefab to be a child of the XR Origin to allow for locomotion.\n- Changed `com.unity.inputsystem` dependency from 1.5.0 to 1.7.0.\n\n### Fixed\n- Fixed how XR Interactor Line Visual sets the reticle rotation when hovering a teleportation interactable with **Match Orientation** set to **World Space Up**, **Target Up**, or **None**, so that it is consistent with how the XR Origin and camera would be oriented upon teleport.\n- Fixed `ObjectSpawner` script in Starter Assets sample applying extra y-axis rotation when **Apply Random Angle At Spawn** is enabled.\n- Fixed incorrect models in AR Starter Assets prefabs for Pyramid and Wedge objects.\n- Fixed incorrect theme asset reference in AR Starter Assets for Arch prefab.\n- When overriding the ray origin, there used to be a significant mismatch between the ray end point and the actual target. To fix this, we now bend the ray towards the hit point found by the raycaster. This ensures the ray visually aligns, while still keeping our preferred ray origin.\n- Fixed Add Component menu path to put Uniform Transform Scale Affordance Receiver in Affordance System &gt; Receiver &gt; Transformation instead of Rendering to match its namespace."
      },
      "upmCi": {
        "footprint": "a8a104ce339c208580697e859ce14d4af673c018"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.5/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "a69615d10db2b00d9e081ca2825ef5e3ffec3043"
      },
      "dist": {
        "shasum": "a8e7989aad26357460cf0c8e2d112f0ef5b4fae1",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.5.1.tgz"
      }
    },
    "2.5.0": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.5.0",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.5.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.3",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.xr.hands\">XR Hands</a>\n • <a href=\"com.unity3d.kharma:upmpackage/com.unity.shadergraph\">Shader Graph</a>",
          "path": "Samples~/Hands Interaction Demo"
        },
        {
          "displayName": "AR Starter Assets",
          "description": "Assets to streamline setup when building for Mobile AR or Mixed Reality with the XR Interaction Toolkit. This includes prefabs and demo scenes to get you started. Note: This depends on the Starter Assets sample package.",
          "path": "Samples~/AR Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.\n<i>Dependencies:</i>\n • <a href=\"com.unity3d.kharma:content/82022\">Oculus Integration Assets</a>",
          "path": "Samples~/Meta Gaze Adapter"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added the canvas optimizer to reduce runtime load of UI-heavy scenes. See [UI Setup - Canvas optimizer](../manual/ui-setup.md#canvas-optimizer) in the manual for more details.\n- Added the [`ARTransformer`](xref:UnityEngine.XR.Interaction.Toolkit.ARTransformer) which allows users to move an `XRGrabInteractable` while constrained to AR Foundation planes. It also has functionality for scaling with touch pinch gestures when the XR Screen Space Controller is used.\n- Added Track Scale and related smoothing options to XR Grab Interactable to allow developers to disable writing to the object's scale when grabbing.\n- Added snap transformations to `XRSocketInteractor` on hover.\n- Added scaling transformation to `XRSocketInteractor`.\n- Added several scripts to the Starter Assets sample for object spawning in AR: `ObjectSpawner`, `ARInteractorSpawnTrigger`, `ARContactSpawnTrigger`, and `DestroySelf`.\n- Added an AR demo scene to the AR Starter Assets that displays a set-up for mobile AR which includes a sliding menu of placeable and interactable objects.\n- Added `GetCurrentGameObject` method to `UIInputModule` to get the UI GameObject currently being hovered by a tracked device or pointer device such as a mouse or touchscreen.\n- Added Cone Cast hit detection type to the [XR Ray Interactor](../manual/xr-ray-interactor.md) to allow users to select small objects at a distance easily.\n- Added ray endpoint stabilization to the [XR Transform Stabilizer](../manual/xr-transform-stabilizer.md).\n- Added [XR Hand Skeleton Poke Displacer](../manual/xr-hand-skeleton-poke-displacer.md) component to allow for displacing the hand skeleton when poking an interactable in order to prevent the hand from phasing through objects while poking them.\n- Added one handed scaling support to XR General Grab Transformer to allow grab interactables to be scaled, controlled by enabling Allow One Handed Scaling (which is enabled by default). For motion controller scaling with the XR Ray Interactor, Scale Mode (which is None by default) should be set to Input. For pinch scaling with the XR Ray Interactor, Scale Mode should be set to Distance.\n- Added new Scale Toggle and Scale Delta input actions to the XR Controller (Action-based) which the XR Ray Interactor reads. The `XRRayInteractor` implements the new [`IXRScaleValueProvider`](xref:UnityEngine.XR.Interaction.Toolkit.IXRScaleValueProvider) by reading the scale delta values from the `ActionBasedController` or `XRScreenSpaceController` so that the `XRGeneralGrbTransformer` can scale using the controller and `ARTransformer` can be used to scale objects with touch pinch gestures.\n\n### Changed\n- The Tunneling Vignette sample was moved into the Starter Assets sample.\n- Changed the Starter Assets sample to be reorganized so all `DemoScene` assets are located in a separate `DemoSceneAssets` folder that can be easily removed.\n- Changed the automatic creation of the XR Device Simulator prefab to be excluded from standalone builds by default. A new **Instantiate In Editor Only** setting to control this behavior was added to the XR Interaction Toolkit project settings. ([XRIT-82](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-82))\n- Changed the Ray Interactor prefab in the Starter Assets sample to use cone casting instead of ray casting for the hit detection type.\n- Changed the XR Controller (Action-based) components in the Starter Assets sample to have empty action references instead of empty input actions for consistency and to avoid potential errors during the `ApplyProcessors` method of the current latest version of Input System.\n- Converted math in XR General Grab Transformer to use the Burst compiler and the Mathematics package for performance improvements.\n- Project Validation will automatically open if there are validation errors or missing dependencies to correct when importing [Hands Interaction Demo](../manual/samples.md#hands-interaction-demo) sample package.\n- Converted math in XR Grab Interactable related to smoothing operations to use the Burst compiler and the Mathematics package for performance improvements.\n- Changed `XRGrabInteractable` default property values:\n  - Changed default value of `smoothPositionAmount` and `smoothRotationAmount` from `5` to `8`.\n  - Changed default value of `tightenPosition` and `tightenRotation` from `0.5` to `0.1`.\n- Changed `com.unity.xr.core-utils` dependency from 2.2.1 to 2.2.3.\n\n### Fixed\n- Fixed an issue where a teleport aim reticle would not rotate to point forward when the interactor ray origin rotated if the interactor was just hovering and not yet selecting.\n- Fixed compiler warnings for use of `FindObjectOfType` and `FindObjectsOfType` by conditionally using the newer methods `FindAnyObjectByType` and `FindObjectsByType` for Unity 2023.1 and newer.\n- Fixed the AR Configuration Inspector foldout in XR Ray Interactor to keep expanded state when clicking between GameObjects."
      },
      "upmCi": {
        "footprint": "1deb2d934dcd26096d2307681ed15a0672aa4bca"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.5/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "1dd869b8f9543cefb1ba30a98a8ed1347c2a0565"
      },
      "dist": {
        "shasum": "315550c45ffc34f3e26267e04766e6c7682e8ac0",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.5.0.tgz"
      }
    },
    "2.4.3": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.4.3",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.5.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.1",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.",
          "path": "Samples~/Meta Gaze Adapter"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.",
          "path": "Samples~/Hands Interaction Demo"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n- Fixed Starter Asset validation check that would trigger a race condition when accessing the XRI settings files, causing false console errors."
      },
      "upmCi": {
        "footprint": "61711e2e5d68750c4822fbf294ff2546872a1401"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.4/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "cb4acfeb3f935960aa749e1247cba8d8d57c8fe2"
      },
      "dist": {
        "shasum": "c3fb55edb46140238d8831adb1c3df539143f414",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.4.3.tgz"
      }
    },
    "2.4.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.4.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.5.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.1",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.",
          "path": "Samples~/Meta Gaze Adapter"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.",
          "path": "Samples~/Hands Interaction Demo"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added affordance theme validation logic so that affordance theme assets used in an affordance receiver are automatically upgraded with any missing theme states (such as the focused state).\n\n### Changed\n- Converted math in XR General Grab Transformer to use the Burst compiler and the Mathematics package for performance improvements.\n- Changed XR General Grab Transformer by changing the default value of Threshold Move Ratio For Scale from `0.1` to `0.05`.\n- Changed the climb example ladder to allow forward/z-axis movement at the top for more natural feeling controls.\n- Changed the Starter Assets UI sample to include a dropdown example.\n\n### Fixed\n- Fixed compiler error in `ComponentLocatorUtility.cs` related to `FindFirstObjectByType` in some patch versions of the Unity Editor. It will now fallback to `FindObjectOfType` in Editor versions where the other method is not available.\n- Fixed an issue in the `XRRayInteractor` where the teleport cursor does not stay aligned with the controller direction when moving around.\n- Fixed an issue with the `UIInputModule` that would cause unintended drag events to fire for head/camera movement. ([XRIT-64](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-64))\n- Fixed an issue with the Starter Assets sample that caused dropdowns to render over line renderer visuals.\n- Fixed the Tunneling Vignette sample to render on top of dropdowns and the line renderer visuals.\n- Fixed an issue in the `LazyFollow` where the object would not snap to the target position when the `snapOnEnabled` is true.\n- Fixed various internal transform usages for XR Origin to use its `Origin` property for the transform since the Origin GameObject and the GameObject the component is on may differ.\n- Fixed potential for undesired prefab override noise with serialized input action properties when the **GameObject** &gt; **XR** creation menu is used by ensuring the action name is set even if the Inspector window has never drawn the component."
      },
      "upmCi": {
        "footprint": "fbada7f51dfa5b70242d48772f87b6ac5b547d18"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.4/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "11fc5a35e263ed9bf87b533cee5cad9ff838b8e9"
      },
      "dist": {
        "shasum": "c4a54a1769c26b0d6d6864d37d75b9680be805e4",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.4.1.tgz"
      }
    },
    "2.4.0": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.4.0",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.5.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.1",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.",
          "path": "Samples~/Meta Gaze Adapter"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.",
          "path": "Samples~/Hands Interaction Demo"
        }
      ],
      "_upm": {
        "changelog": "### Changed\n- Project Settings for the XR Interaction Toolkit have been moved under the category **XR Plug-in Management** to consolidate XR configuration.\n- Project validation rules for the XR Interaction Toolkit and samples have been updated to use global XR project validation and will now appear in the **Edit** &gt; **Project Settings** &gt; **XR Plug-in Management** &gt; **Project Validation** window.\n- Changed `Reset` method of behaviors to no longer assign a reference to an XR Interaction Manager or XR Origin.\n- Changed XR Interactable Affordance State Provider component's default value to Ignore Focus Events.\n- Changed affordance receivers to log a warning when the affordance theme data is missing potential affordance states. A new affordance state `focused` at array index 6 was added to the affordance theme assets in the samples. Users will need to reimport the Starter Assets and Hands Interaction Demo samples or add the `focused` state to their affordance theme assets.\n\n### Fixed\n- Fixed an issue with the XR Distance evaluator not calculating the proper distance from trigger colliders. ([XRIT-71](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-71))\n- Fixed an issue where interactors and interactables could use a different default XR Interaction Manager reference, such as after instantiating a prefab that contains an XR Interaction Manager into a scene with interactables that previously created a default manager instance. ([XRIT-65](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-65))\n- Fixed teleportation not working when the prefab containing the Teleportation Provider component is instantiated after the teleportation interactables are loaded by attempting to find that component upon each teleport request if needed instead of only upon `Awake`.\n- Fixed climb not working when the prefab containing the Climb Provider component is instantiated after the climb interactables are loaded by attempting to find that component upon each climb attempt if needed instead of only upon `Awake`.\n- Fixed `XR General Grab Transformer` scaling doing exponential scaling because it was using squared distance for ration calculation.\n- Fixed AR Gesture Interactor Inspector window not showing Raycast Mask and Raycast Trigger Interaction properties when the version of AR Foundation is older than version 5.0.\n- Fixed compiler warnings related to `ARSessionOrigin` when AR Foundation 5.0 or newer is installed."
      },
      "upmCi": {
        "footprint": "1ec454c851e1694a836732962dadcb19a1ad4f58"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.4/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "1900cc445a8dfc3f84a27a40a77bd8e68ed83d22"
      },
      "dist": {
        "shasum": "92574d10e680fb5889fa21bcb7bc4c2e23b5960d",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.4.0.tgz"
      }
    },
    "2.4.0-pre.2": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.4.0-pre.2",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.5.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.1",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.",
          "path": "Samples~/Meta Gaze Adapter"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.",
          "path": "Samples~/Hands Interaction Demo"
        }
      ],
      "_upm": {
        "changelog": "### Changed\n- Changed the `XR Interactable Affordance State Provider` order to put focus state after all other interaction states for consistency.\n- Changed the required version of `com.unity.xr.hands` for the Hands Interaction Demo sample from 1.2.0 to 1.2.1.\n\n### Fixed\n- Fixed a null reference issue when accessing device and screen-space controllers caused by optimization changes made in the XR Ray Interactor.\n- Fixed unwanted behavior for the Hand Interactions Demo > Hand Menu sample prefabs, specifically in the `ToggleGameObject` sample script.\n- Fixed an issue with XR Interaction Manager where focused interactables would not be cleared in the correct order when selecting a new interactable."
      },
      "upmCi": {
        "footprint": "4ae50aed427b157fba255447aab1fd99a2ce7f1a"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.4/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "e91152442a93e8e69ed43d8fb344446480ff75ac"
      },
      "dist": {
        "shasum": "c7a11647232946541fed4bc627bc497ebeb3eeec",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.4.0-pre.2.tgz"
      }
    },
    "2.4.0-pre.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.4.0-pre.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.5.0",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.1",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.",
          "path": "Samples~/Meta Gaze Adapter"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.",
          "path": "Samples~/Hands Interaction Demo"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added hands support to XR Device Simulator. You must have the [XR Hands package](https://docs.unity3d.com/Manual/com.unity.xr.hands.html) installed in your project to use this new functionality.\n- Added Is Tracked action to XR Controller (Action-based), and updated presets and prefabs in Starter Assets sample to make use of the new Is Tracked input actions in the `XRI Default Input Actions`.\n- Added properties in the [`ARGestureInteractor`](xref:UnityEngine.XR.Interaction.Toolkit.AR.ARGestureInteractor) class to control raycast behavior for gestures.\n- Added the `IXRPokeFilter` interface to allow other classes to act as customized poke filters for the `XRPokeInteractor` instead of only supporting the `XRPokeFilter` component.\n- Added XR Interactor Affordance State Provider component which can drive affordance receivers using interactor interactions events.\n- Added Color Gradient Line Renderer Affordance Receiver to pair with an XR Interactor Affordance State Provider on a Ray interactor to improve visual coloring. Has a property to automatically disable coloring of XR Interactor Line Visual.\n- Added [Hand Menu](../manual/hand-menu.md) component, as well as a sample prefab of a working hand menu in the Hands Interaction Demo sample.\n  - `HandMenu` component has a split configuration for hands and controllers, with a new `FollowPresetDatum`. \n  - Added gaze activation settings and a reveal/ hide hand menu animation.\n- Added [XR Input Modality Manager](../manual/xr-input-modality-manager.md) component which manages swapping between hand and controller hierarchies in the XR Origin. Updated prefabs in the package samples to make use of this component.\n- Added ability for XR Interactor Line Visual to curve accurately and track interactable attach points during selection.\n- Added Auto Adjust Line Length property to XR Interactor Line Visual to retract the line end after a delay when the ray interactor doesn't hit any valid targets.\n- Added the [XR Gaze Assistance](../manual/xr-gaze-assistance.md) component to enable split interaction. Eye for aiming and controllers for selection.\n- Added the [`IXRRayProvider`](xref:UnityEngine.XR.Interaction.Toolkit.IXRRayProvider) interface to allow other ray implementations to take advantage of split interaction.\n- Added `Focus State` to interactables. An interactable that is selected is also focused; it remains focused until another interactable is focused instead. Useful for highlighting an object to later perform operations on.\n- Added Visit Each Frame property to XR Controller Recorder to control whether each frame of the input recording must be played back regardless of the time period passed.\n- Added [XR Transform Stabilizer](../manual/xr-transform-stabilizer.md) component that applies optimized stabilization techniques to remove pose jitter and makes aiming and selecting with rays easier for users. \n- Added Climb Provider, which provides locomotion counter to interactor movement while the user is selecting a Climb Interactable.\n  - Added menu item **Assets > Create > XR > Locomotion > Climb Settings**, which creates a Climb Settings Datum asset.\n  - Added a Climb Provider instance to `XR Origin Preconfigured` in the Starter Assets sample.\n  - Added `Climb Sample` prefab to the Starter Assets sample, and added an instance of this prefab to `DemoScene`. This prefab includes preconfigured Climb Interactables.\n- Added support for XRRayInteractors to scroll UI panels using the thumbstick.\n  - IUInteractors now support UIHoverEnter and UIHoverExit events.\n  - UIInputModule gains the trackedScrollDeltaMultiplier property to control scrolling speeds via thumbstick.\n  - TrackedDeviceModel gains properties for current UI Selectable and if the selected UI is scrollable.\n  - ActionBasedController gains a property for UI scrolling input, set to the thumbstick in the starter assets.\n- Added configuration of interaction overrides to XR Interaction Group, allowing certain Group members to take control of interaction when attempting to select, regardless of priority.\n- Added Direct Interactor as an interaction override for Poke Interactor in each XR Interaction Group in `XR Origin (XR Rig)` in Starter Assets sample.\n- Added new Shader Graphs and Materials in `Hand Interaction Demo` for a transparent hand that supports highlighting fingers\n- Added the [`TouchscreenGestureInputController`](xref:UnityEngine.XR.Interaction.Toolkit.AR.Inputs.TouchscreenGestureInputController) which allows users to surface touchscreen gesture data via the Input System.\n- Added the [`XRScreenSpaceController`](xref:UnityEngine.XR.Interaction.Toolkit.XRScreenSpaceController) which enables usage of screenspace input, from touchscreen or mouse, with interactors.\n- Added the `enableARRaycasting` property to [`XRRayInteractor`](xref:UnityEngine.XR.Interaction.Toolkit.XRRayInteractor) which enables raycasting against the AR environment if AR Foundation is installed.\n\n### Changed\n- Changed [`XRControllerState`](xref:UnityEngine.XR.Interaction.Toolkit.XRControllerState) by adding an `isTracked` field. Deprecated old constructors, users should update their code to call the ones with the added parameter.\n- Changed XRI project validation to only log errors to the console, not warnings.\n- Changed XR Interactor Line Visual so it bends to the selected interactable by default. Set **Line Bend Ratio** to **1** to revert to the old behavior where the line would remain straight.\n- Changed XR Interactor Line Visual default value of Line Width from 0.02 to 0.005.\n- Improved performance of the line visual and ray interactor by optimizing most of the line computation math for the Burst compiler. The [Burst package](https://docs.unity3d.com/Manual/com.unity.burst.html) must be installed in your project to take advantage of the optimizations.\n- Changed `XRInteractorLineVisual` by adding the `OnDestroy` and `LateUpdate` methods. Users who had already implemented either method in derived classes will need to call the base method.\n- Changed `XRInteractorReticleVisual` by adding the `OnDisable` method so it disables the reticle when the component is disabled. Users who had already implemented that method in derived classes will need to call the base method.\n- Changed `TeleportationAnchor.GetAttachTransform` method to return the `teleportAnchorTransform` value.\n- Renamed Starter Assets sample prefabs:\n  - Renamed `Complete XR Origin Set Up` prefab to `XR Interaction Setup`.\n  - Renamed `XR Origin` prefab to `XR Origin (XR Rig)`.\n  - Renamed `Complete Teleport Area Set Up` prefab to `Teleportation Environment`.\n- Renamed Hands Interaction Demo sample prefabs:\n  - Renamed `Complete XR Origin Hands Set Up` prefab to `XR Interaction Hands Setup`.\n  - Renamed `XR Origin Hands` prefab to `XR Origin Hands (XR Rig)`.\n- Changed `XR Origin (XR Rig)` to reorganize locomotion components to new GameObjects.\n- Changed `XR Origin (XR Rig)` to disable grab move locomotion by default. Activate the **Grab Move** GameObject to re-enable that functionality.\n- Changed `XR Origin Hands (XR Rig)` to be a prefab variant of the `XR Origin (XR Rig)` prefab.\n- Changed Starter Assets sample prefabs by adding XR Gaze Fallback to the XR Origin GameObject.\n- Changed `XRRayInteractor`, `XRInteractorLineVisual`, and `XRInteractorReticleVisual` to support mediation through split interaction.\n- Changed XR Ray Interactor to no longer interact with UGUI Canvases while selecting an interactable.\n- Changed XR Ray Interactor so the Hover To Select property will now activate with UI elements.\n- Changed `com.unity.inputsystem` dependency from 1.4.4 to 1.5.0.\n- Changed `com.unity.xr.core-utils` dependency from 2.2.0 to 2.2.1.\n- Changed lowest supported Unity Editor version of XR Interaction Toolkit to 2021.3 now that 2020.3 has reached End of Life.\n- Changed `XRPokeLogic` to resolve an issue where starting a poke from behind the object can trigger select.\n- Updated the Hands Interaction Demo with new interaction reactive visuals:\n  - Changed the required version of `com.unity.xr.hands` for the Hands Interaction Demo sample from 1.1.0 to 1.2.0.\n  - Changed the `XR Origin Hands (XR Rig)` prefab to use prefabs for each hand visual with affordances to highlight the fingers during interaction.\n  - Changed the hands model to use new components in `com.unity.xr.hands` to subscribe and expose hand tracking events: `XRHandsSkeletonDriver`, `XRHandTrackingEvents`, and `XRHandMeshController`.\n- Added Sphere Collider optimized accuracy improvement for Direct Interactor that improves inter-frame reliability and latency.\n\n### Removed\n- Removed `HandsAndControllersManager` script from the Hands Interaction Demo sample and moved it into the package as [`XRInputModalityManager`](xref:UnityEngine.XR.Interaction.Toolkit.Inputs.XRInputModalityManager).\n\n### Fixed\n- Fixed XR Grab Interactables interfering with player movement by using `Physics.IgnoreCollision` to prevent collision between the Character Controller and the grabbed object's colliders.\n- Fixed the Input Devices tab in the [XR Interaction Debugger window](../manual/debugger-window.md) so it doesn't rebuild the tree every Editor frame. This allows the input devices to be collapsed. Added additional columns.\n- Fixed the teleport ray interactor getting stuck on after a teleport completes when the GameObject with the Action Based Controller Manager component was deactivated.\n- Fixed XR Interactor Line Visual not working with Teleportation Anchor when an XR Interactable Snap Volume is used by no longer skipping the snapping behavior when the ray interactor has a selection. Use the Disable Snap Collider When Selected property of XR Interactable Snap Volume to control that behavior.\n- Fixed bugs in Lazy Follow where threshold mechanics weren't being respected, and reworked class to leverage [`SmartFollowVector3TweenableVariable`](xref:UnityEngine.XR.Interaction.Toolkit.Utilities.Tweenables.SmartTweenableVariables.SmartFollowVector3TweenableVariable) and [`SmartFollowQuaternionTweenableVariable`](xref:UnityEngine.XR.Interaction.Toolkit.Utilities.Tweenables.SmartTweenableVariables.SmartFollowQuaternionTweenableVariable).\n- Fixed bug with PokeFollowAffordance sample script that did not work when using two hands on the same canvas.\n- Fixed so poke objects will push to the larger depth when both hands are poking at the same time.\n- Fixed an issue in the `ActionBasedControllerManager` that would cause a null-reference exception if the Direct or Ray interactors were not assigned. ([XRIT-72](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-72))\n- Fixed an issue with the state-change of the `XRInteractableAffordanceStateProvider` that would trigger Select and Hover effects when currently Activated and `ignoreActivateEvents` was set to true or Hover effects when actively Selected and `ignoreSelectEvents` was set to true.\n- Fixed an Array Out of Bounds error when using Affordance Themes when accessing the last element in the list of states.\n- Fixed an issue with `XRPokeLogic` where starting a poke from behind the object can trigger select."
      },
      "upmCi": {
        "footprint": "abc072a30543b813612c5e87e2f6503957c3358b"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.4/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "f9b729a0cf9fa4fdaee2a755e1ddb0505ff8dc14"
      },
      "dist": {
        "shasum": "81afbb40d1d1a43e64e6b5f5df5de5bc52592487",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.4.0-pre.1.tgz"
      }
    },
    "2.3.2": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.3.2",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.4.4",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.0",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2020.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.",
          "path": "Samples~/Meta Gaze Adapter"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.",
          "path": "Samples~/Hands Interaction Demo"
        }
      ],
      "_upm": {
        "changelog": "### Changed\n- Changed XRI project validation to only log errors to the console, not warnings.\n- Updated `XRPokeFollowAffordance` smoothing property default from 8 to 16 to make it feel more responsive.\n\n### Fixed\n- Added additional checks against AR Foundation 5.0 and newer so deprecation messages and the use of the newer XR Origin (AR) is hidden when using AR Foundation 4.2 and older.\n- Fixed GC allocations produced each frame by `XRPokeInteractor.UpdateUIModel`.\n- Fixed frame-timing for Locomotion Input Tests when running in batch mode.\n- `XRInteractableAffordanceStateProvider` Fixes:\n    - Activated state was lower priority than selected, which because select is not exited, this was causing issues with it not appearing.\n    - There were some racing coroutines between select and activate, and now trigger a new animation blocks previous animations\n    - Leaving the select state cancels select animations that might not have completed\n    - Leaving activated state cancels activate animations that might not have completed\n- Fixed repeat audio issue in the `AudioAffordanceReceiver` by adding extra conditions which treat select as a modifier to hover, and activated as a modifier to select. Doing this prevents triggering repeat audio clips that shouldn't fire, like releasing the activate trigger, or releasing the select trigger while still hovering.\n- Fixed `XRPokeLogic` issue where poking from behind objects would sometimes trigger select incorrectly.\n- Fixed `XRPokeLogic` issue where depth percent was incorrectly calculated using an exponential value which would result in poke buttons feeling disconnected from the poke interactor position."
      },
      "upmCi": {
        "footprint": "ac2929bff59a5e644816579701b9dffd6790f269"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.3/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "2c93af311e945e9ab09b4b5301692ecb540c51f7"
      },
      "dist": {
        "shasum": "00796e6b02a397710b56758fd544557d6c5f6774",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.3.2.tgz"
      }
    },
    "2.3.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.3.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.4.4",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.0",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2020.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.",
          "path": "Samples~/Meta Gaze Adapter"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.",
          "path": "Samples~/Hands Interaction Demo"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added System Gesture Detector component to the Hands Interaction Demo sample to add system gesture and menu palm pinch gesture events. Added sound upon menu press as an example. Added Aim Flags input actions to the `XRI Default Input Actions` in the Starter Assets sample to support this.\n- Added [Interaction filters](../manual/interaction-filters.md) documentation for `IXRHoverFilter`, `IXRSelectFilter`, `IXRInteractionStrengthFilter`, and the corresponding filter delegates with examples.\n\n### Changed\n- Changed the Poke Gesture Detector component in the Hands Interaction Demo sample to no longer end the poke gesture when hand tracking is lost. This fixes the Ray Interactor line visual reappearing when hand tracking is lost while doing the poke gesture.\n- Changed `XRInteractorReticleVisual` to ensure consistent attempts to align the reticle prefab's `z` axis with the `transform.up` of the XROrigin when `AlignPrefabWithSurfaceNormal` is `true` and aligning with a non-horizontal surface.\n- Changed `XRInteractorReticleVisual` to align the reticle prefab's `z` axis with the forward direction of the reticle's interactor when `AlignPrefabWithSurfaceNormal` is `true` and aligning with a horizontal surface.\n- Updated installation documentation with convenience links for installing the XRI package on older versions of Unity 2021 where the package was not included in the main Editor manifest.\n- Changed so UGUI poke interactions are now considered to be blocking interactions for interaction groups. This allows rays to be properly hidden when hovering or selecting a UGUI canvas with poke.\n- Changed to use velocity estimation of poke interactor to add an extra validation mechanism in the XR Poke Filter hover validation check to allow poke selection to occur in cases where it was previously rejected, while still preventing poking from behind and other non-desireable cases.\n- Changed to cache poke selection validation check so that it's easier to hold a poke when the selection conditions are met. This makes scrolling UGUI canvases easier and makes poke interactions feel more consistent.\n- Changed AR Scale Interactable so changing the Min Scale and/or Max Scale during runtime will keep the current object scale if still within range instead of resizing the object to keep the same scale ratio.\n\n### Fixed\n- Fixed the Hands Interaction Demo sample to wait to activate the controller GameObjects until they are reconnected instead of each time hand tracking is lost. Also fixed the controllers appearing at the origin if they have never been tracked.\n- Fixed the Hands Interaction Demo sample so it disables the hand interactors while doing a system gesture (such as a user looking at their open palm at eye level).\n- Fixed warning about a self-intersecting polygon in the `Frame.fbx` model in the Hands Interaction Demo sample.\n- Fixed warning in Hands Interaction Demo sample about obsolete API usage coming from the hands subsystem. \n- Fixed `XRSimulatedController` and `XRSimulatedHMD` to have identifying characteristics information in the `capabilities` field of their corresponding `InputDeviceDescription`. ([XRIT-50](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-50))\n- Fixed an issue in the `XRController` class where the `inputDevice` property was not reinitialized when the `controllerNode` property was changed. ([XRIT-52](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-52))\n- UGUI ray interactions are now correctly blocked when interaction groups block ray interactions and the ray is hidden.\n- Fixed an issue with `TrackedDeviceGraphicRaycaster`, when using the `XRPokeInteractor` on UGUI canvases with different sort orders, where interaction was blocked on all but the highest Order in Layer valued canvas. ([XRIT-48](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-48))\n- Fixed an issue with `TrackedDeviceGraphicsRaycaster`, where opening a dropdown would block all other UGUI canvases to become non-interactable with an `XRPokeInteractor` until the dropdown was closed.\n- Fixed the `Starter Assets` and `Hands Interaction Demo` prefabs which contained components and shaders with a mix of both Built-in Render Pipeline and Universal Render Pipeline. They are all now using Built-in Render Pipeline for consistency.\n- Fixed `XRInteractorReticleVisual` incorrect rotation around `y` axis when aligning prefab to surface normal. ([XRIT-18](https://issuetracker.unity3d.com/product/unity/issues/guid/XRIT-18))\n- Fixed `XRInteractorReticleVisual` incorrect rotation when `AlignPrefabWithSurfaceNormal` is `false`.\n- Fixed `XRInteractorReticleVisual` inconsistent rotation when `AlignPrefabWithSurfaceNormal` and `DrawOnNoHit` are `true` but there is no active hit.\n- Fixed `UIInputModule` issue where tracked devices cannot drag on UI elements when `Cursor.lockState` is set to `Locked`."
      },
      "upmCi": {
        "footprint": "ba11daac3f0362731cf079a49bac504096a6e476"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.3/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "44cc41ef32decd978f510e3d125bf4620752d094"
      },
      "dist": {
        "shasum": "efba03beb3692916aafde5b2a2c856cf5f70e7d8",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.3.1.tgz"
      }
    },
    "2.3.0": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.3.0",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.4.4",
        "com.unity.mathematics": "1.2.6",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.0",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2020.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        },
        {
          "displayName": "Meta Gaze Adapter",
          "description": "This sample provides an example to get eye tracking working with the Meta Quest Pro and the XRI Gaze Interactor.",
          "path": "Samples~/Meta Gaze Adapter"
        },
        {
          "displayName": "Hands Interaction Demo",
          "description": "Sample scene and other assets for hand-tracking integration with the XR Interaction Toolkit.",
          "path": "Samples~/Hands Interaction Demo"
        }
      ],
      "_upm": {
        "changelog": "### Added\n- Added a Raycast Snap Volume Interaction property to control whether the XR Ray Interactor will collide with or ignore trigger snap colliders from an XR Interactable Snap Volume (used by gaze assistance). This allows a user to set Raycast Trigger Interaction to Ignore but still collide with trigger colliders that are associated with a snap volume.\n- Added options to XR Poke Follow Affordance in the Starter Assets sample to apply the follow animation if the poke target is a child and to clamp the follow target to a maximum distance from the poke target.\n- Added an XR Poke Follow Affordance to the `TextButton` prefab in the Starter Assets sample so that the button graphics can move in response to poke.\n- Added Tracking State and Is Tracked input actions to the `XRI Default Input Actions` in the Starter Assets sample.\n- Added [Meta Gaze Adapter](../manual/samples.md#meta-gaze-adapter) sample to allow developers to request permission and initialize eye tracking for the Meta Quest Pro.\n- Added [Hands Interaction Demo](../manual/samples.md#hands-interaction-demo) sample to demonstrate interactions with hand tracking.\n- Added poke interaction examples to the `DemoScene` in the Starter Assets sample.\n- Added ability to customize the layer mask and trigger interaction when the XR Poke Interactor performs the physics sphere overlap call.\n- Added documentation regarding behavior when Select Action Trigger is set to State on XR Direct Interactor and XR Ray Interactor.\n\n### Changed\n- Changed the Stop Manipulation action (default binding `Escape`) in the XR Device Simulator to always stop manipulation every time it is pressed instead of cycling between None and FPS mode. Trigger the Cycle Devices action (default binding `Tab`) to switch back to FPS mode instead.\n- Changed `Ray Interactor` prefab in the Starter Assets sample to enable Treat Selection As Valid State on the XR Interactor Line Visual.\n- Changed the  **GameObject** &gt; **XR** &gt; **Grab Interactable** menu item to set the Rigidbody Interpolate property on the created GameObject to Interpolate.\n- Changed the Rigidbody Interpolate property from None to Interpolate in each of the Starter Assets sample grab interactable prefabs.\n- Changed the default value of the Color Property Name property on the Color Material Property Affordance Receiver component to an empty string instead of `\"_BaseColor\"`. An empty string will now use either `\"_BaseColor\"` or `\"_Color\"` depending on the current render pipeline to add support for the Built-In Render Pipeline.\n- Changed `GetValidTargets` on each interactor type to return an empty list when the interactor is disabled.\n- Changed `ActionBasedControllerManager` in Starter Assets sample to make use of XR Interaction Group and removed some unused serialized fields.\n- Changed `XR Origin Preconfigured` in Starter Assets sample so it instantiates the controller model prefab at runtime instead of being in the prefab hierarchy to make it easier for users to override the model used.\n- Changed `Teleport Interactor` in Starter Assets sample so it instantiates the reticle prefabs at runtime instead of being in the prefab hierarchy to make it easier for users to override the reticle used.\n- Changed `com.unity.xr.core-utils` dependency to 2.2.0.\n\n### Fixed\n- Fixed Teleportation Anchor incorrectly triggering a teleport when the Ray Interactor stops pointing at the anchor when it no longer has any ray cast hits.\n- Fixed Starter Assets sample prefabs and `DemoScene` to have the Gaze Interactor prefab.\n- Fixed `XRPokeInteractor` so it uses the `targetFilter` for filtering the valid targets returned by `GetValidTargets`.\n- Fixed the Fix button for project validation issue \"Interaction Layer 31 is not set to 'Teleport'\" not persisting to the settings asset when closing the Unity Editor.\n- Fixed missing references in device simulator UI button images by assigning to null.\n- Fixed the `PokeStateData` that is generated from UI poke interaction so that its `axisAlignedPokeInteractionPoint` is relative to the world position of the target transform.\n- Fixed broken click animations in `XRInteractableAffordanceStateProvider`.\n- Fixed XR Device Simulator so it will use the new main camera if the previous one is disabled or destroyed.\n- Fixed issue where AR gestures did not take into account UI in `ARBaseGestureInteractable` behaviors (such as AR Placement Interactable) by adding an `excludeUITouches` property, which is enabled by default.\n- Fixed potential invalid stayed colliders list in `XRDirectInteractor` and `XRSocketInteractor` when the interactor is disabled while in contact with a collider.\n- Fixed hover and select events being incorrectly fired when an `XRDirectInteractor` or `XRSocketInteractor` GameObject or component is disabled while in contact with an interactable, moved away from the interactable, and then enabled.\n- Fixed XR Poke Interactor to query the local [PhysicsScene](https://docs.unity3d.com/ScriptReference/PhysicsScene.html) instead of using static physics calls.\n- Fixed poke in UI scrolling in a scroll view outside of the viewport by ensuring the Tracked Device Graphic Raycaster respects the alpha hit test threshold.\n- Fixed the `Teleport Anchor` prefab in Starter Assets to place the teleport destination at the top of the platform, fixing a bump that would occur when moving with locomotion after teleporting."
      },
      "upmCi": {
        "footprint": "c793299a54c5f71a9f8fa40827cc83cfb22a7037"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.3/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "a2490553b104eafd4c1371fe490ebebc66434627"
      },
      "dist": {
        "shasum": "4b2eb6e7095383e729c7c95e02ee331076347285",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.3.0.tgz"
      }
    },
    "2.3.0-pre.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.3.0-pre.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.4.4",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.2.0-pre.2",
        "com.unity.xr.legacyinputhelpers": "2.1.10",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0",
        "com.unity.mathematics": "1.2.6"
      },
      "unity": "2020.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        }
      ],
      "upmCi": {
        "footprint": "7fbe1505235bed1cf7007f1a7fd3ab8f160a498f"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.3/manual/index.html",
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "94e87a568f8ce9aeebe5091e5d53d42c4deea64f"
      },
      "dist": {
        "shasum": "e17e449c3fd52298e5c1b890827543f376395f92",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.3.0-pre.1.tgz"
      }
    },
    "2.0.4": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.0.4",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.3.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.8",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2019.4",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "c1aa8571858c77eb2bb60ef41d5f4df59824df45"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "d06fdbfd8b27d0ed11b14914fe49ce91d89dc5ec"
      },
      "dist": {
        "shasum": "95ae1e978ca0e63656387267aaa661677aa52de3",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.0.4.tgz"
      }
    },
    "2.2.0": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.2.0",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.3.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.8",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2020.3",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        }
      ],
      "upmCi": {
        "footprint": "0475f71d615b95be5ae383b123b28c0843462c2b"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "bb21b025f22df3ff22db8542eeee45c154640b88"
      },
      "dist": {
        "shasum": "50768d1639fab2e5eb4cbd2cd415586f257e9060",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.2.0.tgz"
      }
    },
    "2.0.3": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.0.3",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.2.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.8",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2019.4",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "9c2902a499d3334ef78badc8b2206c314d3f92ca"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "6e9903d65de96f51b380acde84629283eab620db"
      },
      "dist": {
        "shasum": "57edfcd880bd80b4671714daf06c1081ca2baeb6",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.0.3.tgz"
      }
    },
    "2.1.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.1.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.3.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.8",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2019.4",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        }
      ],
      "upmCi": {
        "footprint": "c9619fb39a9010dda985c5fb206f43116dca9238"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "b72ad6beca34bf12828097cb8f003a5168375678"
      },
      "dist": {
        "shasum": "20bcb4e3b8126475c2358cca1ededfc02b8c945d",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.1.1.tgz"
      }
    },
    "2.1.0-pre.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.1.0-pre.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.3.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.8",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2019.4",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        },
        {
          "displayName": "Tunneling Vignette",
          "description": "Assets to let users set up and configure tunneling vignette effects as a comfort mode option.",
          "path": "Samples~/Tunneling Vignette"
        }
      ],
      "_upm": {
        "changelog": "### Added\r\n- Added properties to XR Grab Interactable to use dynamic attach transforms so the grab pose will be based on the pose of the Interactor when the selection is made. You can enable the Use Dynamic Attach property to keep the object in the same position and rotation when grabbed. ([1373337](https://issuetracker.unity3d.com/product/unity/issues/guid/1373337))\r\n- Added filtering for interactions to help determine the intent of the user. The new abstractions XR Target Filter and XR Target Evaluator let users configure and extend the logic of how an Interactor ranks an Interactable from a list of valid ones, specifically in the `GetValidTargets` method. Several different evaluators are included in this update, and custom ones can be created. This makes it easier to customize the Interactor without needing to create a derived behavior.\r\n- Added the `XRBaseInteractable.distanceCalculationMode` property. This give users the ability to configure how an Interactable calculates its distance to a location, such as to an Interactor for sorting its valid targets, at varying tradeoffs between accuracy and performance.\r\n- Added the `XRBaseInteractable.getDistanceOverride` property that lets users assign a method to be called when the Interactable is performing a distance calculation to a location, which is used when the Interactor is ordering its valid targets. This property makes it easier to customize the Interactable without needing to create a derived behavior.\r\n- Added `IsOverUIGameObject` function to `XRRayInteractor` that does a simple check to see if the ray cast result is hitting a UI GameObject.\r\n- Added `InputActionReference` properties to the `XRUIInputModule` for left/right/middle clicks, navigation move, submit, cancel, scroll and pointer movement actions. This allows for greater flexibility and customization of what devices can drive UI input when using the `XRUIInputModule`.\r\n- The `XRI Default Input Actions` asset in the `Starter Assets` sample package now includes an `XRI UI` Action Map for UI-specific Input Actions. Also included is a Preset asset to quickly map the actions onto the `XRUIInputModule` component.\r\n- Added a Tunneling Vignette sample. It contains assets to let users set up and configure the tunneling vignette as a comfort mode intended to mitigate motion sickness in VR.\r\n- Added a Tunneling Vignette Controller component used for driving the vignette material included with the Tunneling Vignette sample. Locomotion Provider components can be drag-and-dropped into a list of Locomotion Providers that will trigger the tunneling vignette effect. A custom inspector allows previewing each effect for the corresponding Locomotion Provider.\r\n  * Added `ITunnelingVignetteProvider` interface to allow custom behaviors to control the vignette effect.\r\n  * Added a `LocomotionPhase` enum in `LocomotionProvider` that can be used to describe different phases of a locomotion for use with the tunneling vignette. Added code in `ContinuousMoveProviderBase`, `ContinuousTurnProviderBase`, `SnapTurnProviderBase`, and `TeleportationProvider` to compute their `LocomotionPhase`.\r\n  * Added a Delay Time property to the Teleportation Provider and Snap Turn Provider components to support customization of timing for use with fading in the tunneling vignette.\r\n\r\n### Changed\r\n- Updated code paths with macro protections around `InputSystem` or `Input Manager` based code to prevent attempted usage when either one is not active.\r\n- Scroll speed when using the ScrollWheel Input System Action is now being divided by 20 pixels per line instead of 120 pixels per line to match the `InputSystemUIInputModule` scrolling speed.\r\n- Changed `XRSocketInteractor` hover mesh pose calculation to only ignore the current pose of the attach transform for `XRGrabInteractable` when Use Dynamic Attach is disabled instead of for all types of `IXRSelectInteractable`.\r\n- Changed `XRControllerRecorder.recording` from `internal` to `public`.\r\n\r\n### Fixed\r\n- Fixed `UIInputModule` so pointer clicks set the correct button (left/right/middle) for the `EventSystem` in the `PointerEventData`.\r\n- Fixed compilation errors on platforms such as Game Core where `ENABLE_VR` is not currently defined."
      },
      "upmCi": {
        "footprint": "3f6c44352a5734705c0526140d753c59b4d6c109"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "7832ad06a69eefa88578bb8b208b0277bd875d33"
      },
      "_id": "com.unity.xr.interaction.toolkit@2.1.0-pre.1",
      "_integrity": "sha512-H4FAOfZU+ST0Tc50prTAGp0iGFT/Uk7XUPd30qRAB6IdiLRdyL/M+VLyLD2f5wFaY4D2jB5evS41OUL855RTxA==",
      "_resolved": "/tmp/com.unity.xr.interaction.toolkit@2.1.0-pre.1-0okc_rbg.tgz",
      "_from": "file:/tmp/com.unity.xr.interaction.toolkit@2.1.0-pre.1-0okc_rbg.tgz",
      "dist": {
        "shasum": "c42336ce11343ecb51706515990abcafe07e4aa4",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.1.0-pre.1.tgz"
      }
    },
    "2.0.2": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.0.2",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.2.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.8",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2019.4",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\r\n- Fixed wrong offset when selecting an `XRGrabInteractable` with Track Rotation disabled when the Attach Transform had a different rotation than the Interactable's rotation. This configuration was not covered in the related fix made previously in version [2.0.0-pre.6](#200-pre6---2021-12-15). ([1361271](https://issuetracker.unity3d.com/product/unity/issues/guid/1361271))\r\n- Fixed XR Socket Interactor hover mesh position and rotation for an XR Grab Interactable with Track Position and/or Track Rotation disabled.\r\n- Fixed the simulated controllers not working in projects where the Scripting Backend was set to IL2CPP.\r\n- Fixed the simulated HMD `deviceRotation` not being set. It now matches the `centerEyeRotation`.\r\n- Fixed the **GameObject &gt; XR &gt; AR Annotation Interactable** menu item when AR Foundation is installed to add the correct component.\r\n- Fixed **UIInputModule** so it uses and resets [`PointerEventData.useDragThreshold`](https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.EventSystems.PointerEventData.html#UnityEngine_EventSystems_PointerEventData_useDragThreshold) to allow users to ignore the drag threshold by implementing [`IInitializePotentialDragHandler`](https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.EventSystems.IInitializePotentialDragHandler.html). It was previously being ignored and causing sliders and scrollbars to incorrectly use a drag threshold."
      },
      "upmCi": {
        "footprint": "95b58fa3412a2476786e4a322e1e27a14f018db1"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "de6c9c113846c3ca4449d0285a4683bb9c87855e"
      },
      "_id": "com.unity.xr.interaction.toolkit@2.0.2",
      "_integrity": "sha512-NXxP7ccBhWhuk86k7zb9VFwOf8RwcjBZJhFGZrURuE0JTrf9erSScbRZy4vUWuvmLUQYUfMZeJFTWXaYzX2WbQ==",
      "_resolved": "/tmp/com.unity.xr.interaction.toolkit@2.0.2-gwkb52xp.tgz",
      "_from": "file:/tmp/com.unity.xr.interaction.toolkit@2.0.2-gwkb52xp.tgz",
      "dist": {
        "shasum": "82e54816a780746792ef9ccb6bd5e797ac765e14",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.0.2.tgz"
      }
    },
    "2.0.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.0.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.2.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.8",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2019.4",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upm": {
        "changelog": "### Changed,- Changed the `XRI Default Input Actions` asset in the Starter Assets sample by removing the `primaryButton` bindings from Teleport Select and Teleport Mode Activate. If you want to restore the old behavior of both bindings, add an Up\\Down\\Left\\Right Composite, reassign the Up composite part binding, and add the Sector interaction for that direction. The actions were also reorganized into additional Action Maps.,### Fixed,- Fixed regression introduced with version [2.0.0](#200---2022-02-16) so the hover mesh draws in the correct location when the Interactable's Attach Transform is not a child Transform or deep child Transform.,- Fixed the `XRI Default Input Actions` asset in the Starter Assets sample showing the warning \"(Incompatible Value Type)\" on the bindings for Teleport Select and Teleport Mode Activate by changing the action type from Button to Value with an expected control type of `Vector2`. The sample needs to be imported again if you already imported it into your project for you to see these changes.,- Fixed missing `UNITY_INCLUDE_TESTS` constraint in test assembly definition."
      },
      "upmCi": {
        "footprint": "201499e296fcd9e475e1c415cd2f97a8f5422fb2"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "13fd4c583e33bc55a2002a74574fc713d069bb0c"
      },
      "_id": "com.unity.xr.interaction.toolkit@2.0.1",
      "_integrity": "sha512-TUblOYJNkbqnbSs5CEJ2iI2MxvN/VF04tJpxlSqrGO/CPM2YVWSJ8oHtDEK7f3QtT6VdJrJUZG8eAQAE7LUeTA==",
      "_resolved": "/tmp/com.unity.xr.interaction.toolkit@2.0.1-uw8xnnvl.tgz",
      "_from": "file:/tmp/com.unity.xr.interaction.toolkit@2.0.1-uw8xnnvl.tgz",
      "dist": {
        "shasum": "b14ad27ff91f1eb1bd85152fdd9bd35253dbf80a",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.0.1.tgz"
      }
    },
    "2.0.0": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.0.0",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.2.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.8",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2019.4",
      "samples": [
        {
          "displayName": "Starter Assets",
          "description": "Assets to streamline setup of behaviors, including a default set of input actions and presets for use with XR Interaction Toolkit behaviors that use the Input System.",
          "path": "Samples~/Starter Assets"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "d17d41e936d33fd0c92fb4fff0013629ecf32056"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "7c1007f607973aedebdc6d7627aa1dafce6b2930"
      },
      "_id": "com.unity.xr.interaction.toolkit@2.0.0",
      "_integrity": "sha512-CW0WqkAPNUy3/hZVg7XDFoOofYmcIjfB2SU7QF+DzhXcrGBqqB5TJRAKliwBKdNLdSKXHdz+z+JmPv+cFhZ1IA==",
      "_resolved": "/tmp/com.unity.xr.interaction.toolkit@2.0.0-ynnu3twe.tgz",
      "_from": "file:/tmp/com.unity.xr.interaction.toolkit@2.0.0-ynnu3twe.tgz",
      "dist": {
        "shasum": "64fa2613d32bf565e1ed9a9b1eeaa019a2563fe8",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.0.0.tgz"
      }
    },
    "2.0.0-pre.7": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.0.0-pre.7",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains helper components that you can use to extend functionality for drawing visuals and hooking in your own interaction events.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.2.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.0.0-pre.6",
        "com.unity.xr.legacyinputhelpers": "2.1.8",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2019.4",
      "samples": [
        {
          "displayName": "Default Input Actions",
          "description": "Default set of input actions and presets for use with XR Interaction Toolkit behaviors that utilize the Input System.",
          "path": "Samples~/Default Input Actions"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "885e804853e9328e37f09f667fb6d410e0551f38"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "9f854f2ac0084349bfeefc4d585c56e486c23d13"
      },
      "_id": "com.unity.xr.interaction.toolkit@2.0.0-pre.7",
      "_integrity": "sha512-kNosfhCl6FwLsULLoutlIfesWqJ41hGsrCzAEq4WgT2a/Y3J7AuYmZHrmkakP3Rn5YbkqITqWh1hieJjktFbyQ==",
      "_resolved": "/tmp/com.unity.xr.interaction.toolkit@2.0.0-pre.7-9_zdytzf.tgz",
      "_from": "file:/tmp/com.unity.xr.interaction.toolkit@2.0.0-pre.7-9_zdytzf.tgz",
      "dist": {
        "shasum": "6583b902b9bc813ca1909a926903db25000b5bc6",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.0.0-pre.7.tgz"
      }
    },
    "2.0.0-pre.6": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.0.0-pre.6",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains helper components that you can use to extend functionality for drawing visuals and hooking in your own interaction events.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.2.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.0.0-pre.6",
        "com.unity.xr.legacyinputhelpers": "2.1.8",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2019.4",
      "samples": [
        {
          "displayName": "Default Input Actions",
          "description": "Default set of input actions and presets for use with XR Interaction Toolkit behaviors that utilize the Input System.",
          "path": "Samples~/Default Input Actions"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "c581e05637aae455d29ae23061e9f2c7c31ced96"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "8abd58c322ac0aca6c218e720b3af338eef9a214"
      },
      "_id": "com.unity.xr.interaction.toolkit@2.0.0-pre.6",
      "_integrity": "sha512-jRU1rYhbuxaQ9TUlsPZvdezT8R92fnkB6BpkVXKgyF5QF++fyR3T820Yq2DIcktb6qQ2WWwat928Tk9yjIeWQg==",
      "_resolved": "/pkgprom/com.unity.xr.interaction.toolkit-2.0.0-pre.6.tgz",
      "_from": "file:com.unity.xr.interaction.toolkit-2.0.0-pre.6.tgz",
      "dist": {
        "shasum": "3db259e933c80a7a513b39ac371479a83569c39e",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.0.0-pre.6.tgz"
      }
    },
    "2.0.0-pre.5": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "2.0.0-pre.5",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains helper components that you can use to extend functionality for drawing visuals and hooking in your own interaction events.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.2.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.core-utils": "2.0.0-pre.5",
        "com.unity.xr.legacyinputhelpers": "2.1.8",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2019.4",
      "samples": [
        {
          "displayName": "Default Input Actions",
          "description": "Default set of input actions and presets for use with XR Interaction Toolkit behaviors that utilize the Input System.",
          "path": "Samples~/Default Input Actions"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "2203416f92da7c7a54adc51f718412820243c6d2"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "c886e06cab2581f54194d2984defb4d634184529"
      },
      "_id": "com.unity.xr.interaction.toolkit@2.0.0-pre.5",
      "_integrity": "sha512-fXs4GslA+QfEnryp7QHuLBSkUR3/b2F7K2D+CESZkZMau03TvMP7F3Ob9jYSwbCrt1TSd3aM75Fmr3bA3Q+DKw==",
      "_resolved": "/pkgprom/com.unity.xr.interaction.toolkit-2.0.0-pre.5.tgz",
      "_from": "file:com.unity.xr.interaction.toolkit-2.0.0-pre.5.tgz",
      "dist": {
        "shasum": "6c63a9ab7b82c388730a59409f49ead6fbbb2b67",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-2.0.0-pre.5.tgz"
      }
    },
    "1.0.0-pre.8": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "1.0.0-pre.8",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains helper components that you can use to extend functionality for drawing visuals and hooking in your own interaction events.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.0.2",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.7",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.modules.physics": "1.0.0"
      },
      "unity": "2019.3",
      "samples": [
        {
          "displayName": "Default Input Actions",
          "description": "Default set of input actions and presets for use with XR Interaction Toolkit behaviors that utilize the Input System.",
          "path": "Samples~/Default Input Actions"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "6b1ef396f6ef8beee9f8aa5b175e02283d43bd52"
      },
      "repository": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "a6033094fc552eb874d379b678279a3821b7a78a"
      },
      "_id": "com.unity.xr.interaction.toolkit@1.0.0-pre.8",
      "_integrity": "sha512-pnTz2RMf3mPfCXDWmuOjuJLVKuUMsU+u23cez3I/ag1csdThRJwdV5gVayAZlQsbtyc2gp/AoqOhwa3dmx5LLA==",
      "_resolved": "/pkgprom/com.unity.xr.interaction.toolkit-1.0.0-pre.8.tgz",
      "_from": "file:com.unity.xr.interaction.toolkit-1.0.0-pre.8.tgz",
      "dist": {
        "shasum": "16dbcbe4e1d349f906e2b4c5d86a8e86784db0b5",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-1.0.0-pre.8.tgz"
      }
    },
    "1.0.0-pre.6": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "1.0.0-pre.6",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains helper components that you can use to extend functionality for drawing visuals and hooking in your own interaction events.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.0.2",
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.7"
      },
      "unity": "2019.3",
      "samples": [
        {
          "displayName": "Default Input Actions",
          "description": "Default set of input actions and presets for use with XR Interaction Toolkit behaviors that utilize the Input System.",
          "path": "Samples~/Default Input Actions"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "a7289b63fc62573dfad82c23f74da61c91f9b3e5"
      },
      "repository": {
        "url": "git+https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "a9226ad2a0a6635d0fece6bc6ab9e8b96c626f96"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.interaction.toolkit-1.0.0-pre.6.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@1.0.0-pre.6",
      "dist": {
        "shasum": "bc4f8bababbec3c0386cbcf517390cc1f8d8b619",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-1.0.0-pre.6.tgz"
      }
    },
    "1.0.0-pre.5": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "1.0.0-pre.5",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains helper components that you can use to extend functionality for drawing visuals and hooking in your own interaction events.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.0.2",
        "com.unity.ugui": "1.0.0",
        "com.unity.modules.audio": "1.0.0",
        "com.unity.modules.imgui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.7"
      },
      "unity": "2019.3",
      "samples": [
        {
          "displayName": "Default Input Actions",
          "description": "Default set of input actions and presets for use with XR Interaction Toolkit behaviors that utilize the Input System.",
          "path": "Samples~/Default Input Actions"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "79f050c53a6ce74093000e5bb333107ec5ae60d4"
      },
      "repository": {
        "url": "git+https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "6e00ed515cb1d7d8911713d67f2d0e8bf440af26"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.interaction.toolkit-1.0.0-pre.5.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@1.0.0-pre.5",
      "dist": {
        "shasum": "8fa5b941c5175a24d9f52382347e93d321715c56",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-1.0.0-pre.5.tgz"
      }
    },
    "1.0.0-pre.4": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "1.0.0-pre.4",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains helper components that you can use to extend functionality for drawing visuals and hooking in your own interaction events.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.0.2",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.7"
      },
      "unity": "2019.3",
      "samples": [
        {
          "displayName": "Default Input Actions",
          "description": "Default set of input actions and presets for use with XR Interaction Toolkit behaviors that utilize the Input System.",
          "path": "Samples~/Default Input Actions"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "dc635380a9b9e9a1c9ff1d59d60816d94feeb0ae"
      },
      "repository": {
        "url": "git+https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "ce29e6f82e35cdca8ca8bbc4a5a3393c1aa2b919"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.interaction.toolkit-1.0.0-pre.4.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@1.0.0-pre.4",
      "dist": {
        "shasum": "15791b8c00becff30c852bc688f129272d12d523",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-1.0.0-pre.4.tgz"
      }
    },
    "1.0.0-pre.3": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "1.0.0-pre.3",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains helper components that you can use to extend functionality for drawing visuals and hooking in your own interaction events.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.0.2",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.7"
      },
      "unity": "2019.3",
      "samples": [
        {
          "displayName": "Default Input Actions",
          "description": "Default set of input actions and presets for use with XR Interaction Toolkit behaviors that utilize the Input System.",
          "path": "Samples~/Default Input Actions"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "c7b7baba0e691e491e415fab9a338c20be99f5fd"
      },
      "repository": {
        "url": "git+https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "fcfe2848311605a0ac56242c26c9c684eccebdb3"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.interaction.toolkit-1.0.0-pre.3.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@1.0.0-pre.3",
      "dist": {
        "shasum": "2f18d4bb65e1938281022bf42a39bfa4eda912cf",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-1.0.0-pre.3.tgz"
      }
    },
    "1.0.0-pre.2": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "1.0.0-pre.2",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains helper components that you can use to extend functionality for drawing visuals and hooking in your own interaction events.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.0.1",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.7"
      },
      "unity": "2019.3",
      "samples": [
        {
          "displayName": "Default Input Actions",
          "description": "Default set of input actions and presets for use with XR Interaction Toolkit behaviors that utilize the Input System.",
          "path": "Samples~/Default Input Actions"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "0b5a1bf2446c766116233c88f230a4d799582119"
      },
      "repository": {
        "url": "git+https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "e0a36e883dcef9c577ca5a22ece8061c215e9568"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.interaction.toolkit-1.0.0-pre.2.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@1.0.0-pre.2",
      "dist": {
        "shasum": "bc4f45cbd89e4de85c85099644d88b445a7af669",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-1.0.0-pre.2.tgz"
      }
    },
    "1.0.0-pre.1": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "1.0.0-pre.1",
      "displayName": "XR Interaction Toolkit",
      "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains helper components that you can use to extend functionality for drawing visuals and hooking in your own interaction events.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.0.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.4"
      },
      "unity": "2019.3",
      "samples": [
        {
          "displayName": "Default Input Actions",
          "description": "Default set of input actions and presets for use with XR Interaction Toolkit behaviors that utilize the Input System.",
          "path": "Samples~/Default Input Actions"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "078a780438729b7b4f524ead5f7258e9272164cc"
      },
      "repository": {
        "url": "git+https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "5a694db6913530996204bc27509d34e601c1bac8"
      },
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@1.0.0-pre.1",
      "dist": {
        "shasum": "4c8ec428da7949dfa69ae80b6f2a4a72e7e17c42",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-1.0.0-pre.1.tgz"
      }
    },
    "0.10.0-preview.7": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "0.10.0-preview.7",
      "displayName": "XR Interaction Toolkit",
      "description": "XR Interaction toolkit for creating VR and AR experiences.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.inputsystem": "1.0.0",
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "2.1.4"
      },
      "unity": "2019.3",
      "samples": [
        {
          "displayName": "Default Input Actions",
          "description": "Default set of input actions and presets for use with XR Interaction Toolkit behaviors that utilize the Input System.",
          "path": "Samples~/Default Input Actions"
        },
        {
          "displayName": "XR Device Simulator",
          "description": "Assets related to the simulation of XR HMD and controllers.",
          "path": "Samples~/XR Device Simulator"
        }
      ],
      "upmCi": {
        "footprint": "b0535717bf75c50211dd1325fc15f72bc5600fb0"
      },
      "repository": {
        "url": "git+https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "type": "git",
        "revision": "e3497384909d90ca79c628e5de8c94526e7b6e03"
      },
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@0.10.0-preview.7",
      "dist": {
        "shasum": "e9509002be2f0e1f634dd64aa6e6e3ecb9fbf39c",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-0.10.0-preview.7.tgz"
      }
    },
    "0.9.4-preview": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "0.9.4-preview",
      "displayName": "XR Interaction Toolkit",
      "description": "XR Interaction toolkit for creating VR and AR experiences.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "1.3.11"
      },
      "unity": "2019.3",
      "repository": {
        "footprint": "b076a7f1a7644d9f143165f48050d783be6a1d16",
        "type": "git",
        "url": "git+https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "revision": "2f0602c46ea4bbb75f2cfd5833dcc00aa9fdd038"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.interaction.toolkit-0.9.4-preview.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@0.9.4-preview",
      "dist": {
        "shasum": "cf8b089f81afb529676a84079c85e8a119d67a22",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-0.9.4-preview.tgz"
      }
    },
    "0.9.3-preview": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "0.9.3-preview",
      "displayName": "XR Interaction Toolkit",
      "description": "XR Interaction toolkit for creating VR and AR experiences.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "1.3.8"
      },
      "unity": "2019.3",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "revision": "67c2fadc6749d532adcb29c04a0438e396a75cbc"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.interaction.toolkit-0.9.3-preview.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@0.9.3-preview",
      "dist": {
        "shasum": "65414d7bae0cef05f5f1b7fc14a6ed681f918775",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-0.9.3-preview.tgz"
      }
    },
    "0.9.2-preview": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "0.9.2-preview",
      "displayName": "XR Interaction Toolkit",
      "description": "XR Interaction toolkit for creating VR and AR experiences.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "1.3.8"
      },
      "unity": "2019.3",
      "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "revision": "60643c30a704a4f798f8e53260cd63aded49c6b9"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.interaction.toolkit-0.9.2-preview.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@0.9.2-preview",
      "dist": {
        "shasum": "d55cd92ae286548794eaf002af23ea9182f678c3",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-0.9.2-preview.tgz"
      }
    },
    "0.9.1-preview": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "0.9.1-preview",
      "displayName": "XR Interaction Toolkit",
      "description": "XR Interaction toolkit for creating VR and AR experiences.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "1.3.9"
      },
      "unity": "2019.3",
      "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "revision": "34c4d9434ed44e8ec8b99d33714642358e675e55"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.interaction.toolkit-0.9.1-preview.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@0.9.1-preview",
      "dist": {
        "shasum": "0c005b01351c92029e48d288d81da3673ba20cef",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-0.9.1-preview.tgz"
      }
    },
    "0.9.0-preview": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "0.9.0-preview",
      "displayName": "XR Interaction Toolkit",
      "description": "XR Interaction toolkit for creating VR and AR experiences.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "category": "XR",
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "1.3.9"
      },
      "unity": "2019.3",
      "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "revision": "9463ac20024db58487c995e508662d7d9fef3122"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.interaction.toolkit-0.9.0-preview.tgz",
      "bugs": {
        "url": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit/issues"
      },
      "homepage": "https://github.com/Unity-Technologies/com.unity.xr.interaction.toolkit#readme",
      "_id": "com.unity.xr.interaction.toolkit@0.9.0-preview",
      "dist": {
        "shasum": "3317fb75668f2f0d6cbf2071a8e9e3e1399a960a",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-0.9.0-preview.tgz"
      }
    },
    "0.0.6-preview": {
      "name": "com.unity.xr.interaction.toolkit",
      "version": "0.0.6-preview",
      "displayName": "XR Interaction Toolkit",
      "description": "XR Interaction toolkit for creating VR and AR experiences.",
      "keywords": [
        "XR",
        "VR",
        "toolkit",
        "interaction"
      ],
      "dependencies": {
        "com.unity.ugui": "1.0.0",
        "com.unity.xr.legacyinputhelpers": "1.3.7"
      },
      "repository": {
        "type": "git",
        "url": "git@github.com:Unity-Technologies/com.unity.xr.interaction.toolkit.git",
        "revision": "6b13c5f33dd2738f9eb5ae36cd1136644b53f63a"
      },
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.xr.interaction.toolkit/-/com.unity.xr.interaction.toolkit-0.0.6-preview.tgz",
        "shasum": "f8c347f602e8269e9fa82ab2ed147bf620dde9fc"
      },
      "scripts": {},
      "_id": "com.unity.xr.interaction.toolkit@0.0.6-preview",
      "unity": "2019.1",
      "category": "XR"
    }
  },
  "etag": "\"f13cfba4c26ca353cd0c4a0de40ecef1\"",
  "provider": "upm",
  "name": "com.unity.xr.interaction.toolkit",
  "description": "A high-level, component-based, interaction system for creating VR and AR experiences. It provides a framework that makes 3D and UI interactions available from Unity input events. The core of this system is a set of base Interactor and Interactable components, and an Interaction Manager that ties these two types of components together. It also contains components that you can use for locomotion and drawing visuals.",
  "_id": "com.unity.xr.interaction.toolkit",
  "cnTags": [],
  "time": {
    "2.6.5": "2025-09-17T03:26:02Z",
    "3.3.0-pre.1": "2025-08-14T03:26:15Z",
    "3.2.1": "2025-08-14T03:26:03Z",
    "3.2.0": "2025-07-02T03:26:02Z",
    "3.2.0-pre.1": "2025-04-29T03:26:01Z",
    "3.1.2": "2025-04-20T03:26:01Z",
    "3.0.8": "2025-03-28T03:24:31Z",
    "3.1.1": "2025-03-05T03:24:31Z",
    "3.1.0": "2025-02-27T03:24:31Z",
    "2.6.4": "2025-02-11T03:24:31Z",
    "3.1.0-pre.1": "2025-01-01T03:24:31Z",
    "3.0.6": "2024-12-05T08:24:59Z",
    "3.0.7": "2024-12-05T08:22:49Z",
    "3.0.5": "2024-07-30T19:13:51Z",
    "2.6.3": "2024-07-29T11:51:44Z",
    "3.0.4": "2024-06-24T17:42:09Z",
    "3.0.3": "2024-05-03T18:45:48Z",
    "2.5.4": "2024-04-11T18:44:56Z",
    "3.0.1": "2024-03-20T10:51:34Z",
    "3.0.0": "2024-03-19T16:47:26Z",
    "3.0.0-pre.2": "2024-02-29T16:20:26Z",
    "2.5.3": "2024-02-29T16:20:23Z",
    "3.0.0-pre.1": "2023-12-19T10:19:38Z",
    "2.5.2": "2023-10-06T08:01:45Z",
    "2.5.1": "2023-09-14T13:18:51Z",
    "2.5.0": "2023-08-22T15:58:24Z",
    "2.4.3": "2023-07-24T09:19:50Z",
    "2.4.1": "2023-07-18T11:52:18Z",
    "2.4.0": "2023-06-20T06:59:39Z",
    "2.4.0-pre.2": "2023-06-02T07:45:18Z",
    "2.4.0-pre.1": "2023-05-30T15:18:55Z",
    "2.3.2": "2023-05-05T11:03:14Z",
    "2.3.1": "2023-04-06T09:36:32Z",
    "2.3.0": "2023-02-23T16:53:05Z",
    "2.3.0-pre.1": "2022-12-09T22:19:23Z",
    "2.0.4": "2022-11-03T09:39:33Z",
    "2.2.0": "2022-10-10T09:41:22Z",
    "2.0.3": "2022-08-15T07:55:37Z",
    "2.1.1": "2022-08-12T08:51:02Z",
    "2.1.0-pre.1": "2022-05-11T19:15:49Z",
    "2.0.2": "2022-05-06T17:58:03Z",
    "2.0.1": "2022-03-09T12:34:10Z",
    "2.0.0": "2022-02-21T15:56:42Z",
    "2.0.0-pre.7": "2022-02-04T14:44:55Z",
    "2.0.0-pre.6": "2021-12-20T12:27:55Z",
    "2.0.0-pre.5": "2021-11-22T19:24:28Z",
    "1.0.0-pre.8": "2021-10-27T06:31:42Z",
    "1.0.0-pre.6": "2021-09-15T00:09:16Z",
    "1.0.0-pre.5": "2021-08-04T06:05:28Z",
    "1.0.0-pre.4": "2021-05-19T00:31:55Z",
    "1.0.0-pre.3": "2021-03-19T00:58:02Z",
    "1.0.0-pre.2": "2021-01-25T19:49:12Z",
    "1.0.0-pre.1": "2020-11-17T19:12:37Z",
    "0.10.0-preview.7": "2020-11-05T16:51:05Z",
    "0.9.4-preview": "2020-04-07T19:58:49Z",
    "0.9.3-preview": "2020-01-27T21:55:02Z",
    "0.9.2-preview": "2019-12-17T19:22:30Z",
    "0.9.1-preview": "2019-12-13T00:00:09Z",
    "0.9.0-preview": "2019-12-10T20:00:08Z",
    "0.0.6-preview": "2019-11-05T17:07:20Z"
  }
}
