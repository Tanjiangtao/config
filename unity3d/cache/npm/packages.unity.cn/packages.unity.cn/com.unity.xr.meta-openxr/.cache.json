{
  "dist-tags": {
    "latest": "2.3.0"
  },
  "versions": {
    "2.3.0": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.3.0",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "xreditorsubsystem",
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.15.1",
        "com.unity.xr.core-utils": "2.5.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.arfoundation": "6.3.0",
        "com.unity.xr.compositionlayers": "2.1.1"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.3/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "a8b13ad920dde02e45d207de8c654a93273a6b3f",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.3.0.tgz"
      },
      "_upm": {
        "changelog": "### Changed\n\n- Changed the minimum AR Foundation dependency version from 6.3.0-pre.2 to 6.3.0, upgrading to a verified release version.\n- Changed the minimum XR Composition Layers dependency version from 2.1.0 to 2.1.1 to ensure that you receive necessary bug fixes.\n- Changed the minimum OpenXR Plug-in dependency version from 1.16.0-pre.1 to 1.15.1. Test code that depends on OpenXR Plug-in 1.16 is now conditionally compiled with a version define so we can depend on the verified 1.15 release.\n\n### Fixed\n\n- Fixed `MetaOpenXRAnchorSubsystem` so that `TryEraseAnchorsAsync`, `TryLoadAnchorsAsync`, and `TrySaveAnchorAsync` now correctly return a completed Awaitable if you pass them an input array of 0 anchors.\n- Fixed `MetaOpenXRAnchorSubsystem` so that `TryEraseAnchorsAsync`, `TryLoadAnchorsAsync`, and `TrySaveAnchorsAsync` now correctly complete their erase, load, or save operations, respectively, even if the OpenXR runtime fails to enable required components on one or more anchors."
      }
    },
    "2.2.1": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.2.1",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "xreditorsubsystem",
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.15.0",
        "com.unity.xr.core-utils": "2.5.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.arfoundation": "6.2.0",
        "com.unity.xr.compositionlayers": "2.1.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.2/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "3046716a2a6a467a3023320338a5aac70ec12f38",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.2.1.tgz"
      },
      "_upm": {
        "changelog": "### Changed\n\n- Changed the minimum version of the XR Composition Layers dependency from 2.0.0 to 2.1.0, as 2.0.0 is no longer supported.\n\n### Fixed\n\n- Fixed a possible `NullReferenceException` when installing Unity OpenXR: Meta in a new project. ([MOXRB-151](https://issuetracker.unity3d.com/issues/installing-unity-openxr-meta-package-throws-nullreferenceexception-error))\n- Fixed the `MetaOpenXRPassthroughLayer` so that passthrough correctly displays when the app is resumed after being suspended for a system permission dialogue.\n- Fixed `MetaOpenXRPlaneSubsystem` so that it doesn't cause the app to unexpectedly quit if the subsystem is destroyed while hiding planes that don't match your chosen plane detection mode.\n- Fixed the MetaOpenXROcclusionSubsystem so that it destroys all native resources when stopped, reducing its resource consumption while not in use."
      }
    },
    "2.0.2": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.0.2",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.10.0",
        "com.unity.xr.core-utils": "2.3.0",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.arfoundation": "6.0.1"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.0/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "5dbeff98e02bcc179a157598d2dc38376f2b5746",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.0.2.tgz"
      },
      "_upm": {
        "changelog": "### Changed\n\n- Recompiled the native plug-in with support for [16 KB page sizes](https://developer.android.com/guide/practices/page-sizes) on Android 15 or newer.\n\n### Fixed\n\n- Fixed Android Manifest setup for builds so that if your app uses Bounding Boxes or Meshing but not Planes, your app's Android Manifest will now correctly declare the `com.oculus.permission.USE_SCENE` permission.\n- Fixed the `MetaOpenXRAnchorSubsystem` so that it correctly registers its `subsystemTypeOverride`, allowing you to typecast instances of `XRAnchorSubsystem` to `MetaOpenXRAnchorSubsystem`.\n- Fixed the **Meta Quest: Display Utilities** feature so that it works correctly even when **Meta Quest: Session** is disabled. ([MOXRB-70](https://issuetracker.unity3d.com/product/unity/issues/guid/MOXRB-70))\n- Fixed `MetaOpenXRPlaneSubsystem` so that it doesn't cause the app to unexpectedly quit if the subsystem is destroyed while hiding planes that don't match your chosen plane detection mode."
      }
    },
    "2.3.0-pre.2": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.3.0-pre.2",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "xreditorsubsystem",
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.16.0-pre.1",
        "com.unity.xr.core-utils": "2.5.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.arfoundation": "6.3.0-pre.2",
        "com.unity.xr.compositionlayers": "2.1.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.3/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "687c20909f446797b068b4543f3afccbae097c16",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.3.0-pre.2.tgz"
      },
      "_upm": {
        "changelog": "### Changed\n\n- Changed AR Foundation dependency version from 6.3.0-pre.1 to 6.3.0-pre.2.\n\n### Fixed\n\n- Fixed `MetaOpenXRPlaneSubsystem` so that it doesn't cause the app to unexpectedly quit if the subsystem is destroyed while hiding planes that don't match your chosen plane detection mode.\n- Fixed the MetaOpenXROcclusionSubsystem so that it destroys all native resources when stopped, reducing its resource consumption while not in use."
      }
    },
    "1.0.3": {
      "name": "com.unity.xr.meta-openxr",
      "version": "1.0.3",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.7.0",
        "com.unity.xr.arfoundation": "5.1.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@1.0/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "46da04f949ada73d378e8a78c4c4f25bf98cf328",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-1.0.3.tgz"
      },
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Added\n\n- Added support for running scenes in the editor via [Quest Link](xref:meta-openxr-project-setup#quest-link).\n\n### Changed\n\n- Changed the **Meta Quest: Camera (Passthrough)** feature to no longer enable the `XR_FB_composition_layer_alpha_blend` OpenXR extension. This is a backwards-compatible change with no effect on your code.\n\n### Fixed\n\n- Fixed the **Meta Quest: Display Utilities** feature so that it works correctly even when **Meta Quest: Session** is disabled. ([MOXRB-70](https://issuetracker.unity3d.com/product/unity/issues/guid/MOXRB-70))\n- Fixed the `MetaOpenXRAnchorSubsystem` so that it correctly registers its `subsystemTypeOverride`, allowing you to typecast instances of `XRAnchorSubsystem` to `MetaOpenXRAnchorSubsystem`."
      }
    },
    "2.2.0": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.2.0",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "xreditorsubsystem",
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.15.0",
        "com.unity.xr.core-utils": "2.5.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.arfoundation": "6.2.0",
        "com.unity.xr.compositionlayers": "2.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.2/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "2d2df5677d2f98cce9b15627e0033d745685e34a",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.2.0.tgz"
      },
      "_upm": {
        "changelog": "### Changed\n\n- Changed the minimum version of the OpenXR Plug-in dependency from 1.14.0 to 1.15.0-pre.1.\n\n### Fixed\n\n- Fixed the Android manifest build logic so that `com.oculus.permission.USE_ANCHOR_API` is correctly applied if you enable Planes, Bounding Boxes, or Meshes, but not Anchors.\n- Fixed the `MetaOpenXRCameraSubsystem` so that it correctly destroys the `PassthroughLayerData` when it is stopped.\n- Fixed an issue where buonding boxes were not relocalizing while an app was resumed after being paused for scene capture or sleep."
      }
    },
    "2.1.1": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.1.1",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "xreditorsubsystem",
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.14.0",
        "com.unity.xr.core-utils": "2.5.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.arfoundation": "6.1.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.1/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "10f1e719144ec664bf4cdb52f1a6fd9714fc449b",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.1.1.tgz"
      },
      "_upm": {
        "changelog": "### Changed\n\n- Recompiled the native plug-in with support for [16 KB page sizes](https://developer.android.com/guide/practices/page-sizes) on Android 15 or newer.\n- Changed the `MetaOpenXRPlaneSubystem` so that it doesn't log any errors if `xrGetSpaceBoundingBox2DFB` fails. There is a known issue in Meta Quest software version v74 and newer that causes this API repeatedly fail in some cases.\n\n### Fixed\n\n- Fixed the Android manifest build logic so that `com.oculus.permission.USE_ANCHOR_API` is correctly applied if you enable Planes, Bounding Boxes, or Meshes, but not Anchors.\n- Fixed the `MetaOpenXRAnchorSubsystem` so that it correctly registers its `subsystemTypeOverride`, allowing you to typecast instances of `XRAnchorSubsystem` to `MetaOpenXRAnchorSubsystem`.\n- Fixed `MetaOpenXRAnchorSubsystem` so that loading persistent anchors now correctly assigns their `nativePtr`.\n- Fixed the following features: Meta Quest Bounding Boxes, Meta Quest Display Utilities, Meta Quest Meshing, and Meta Quest Planes, so that they disable themselves and do not attempt to create any relevant subsystems if the OpenXR runtime does not support the required capabilities.\n- Fixed an issue where Space Discovery and Space Persistence were required to enable the Meta Quest Anchors feature.\n- Fixed the native plug-in so that it correctly deletes cached OpenXR function pointers after the OpenXR session ends.\n- Fixed meshing subsystem not working with Meta Quest Link."
      }
    },
    "2.2.0-pre.1": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.2.0-pre.1",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "xreditorsubsystem",
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.14.0",
        "com.unity.xr.core-utils": "2.5.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.arfoundation": "6.2.0-pre.4",
        "com.unity.xr.compositionlayers": "2.0.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.2/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "8b701f3921ce06092a430314c65183a631b6408e",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.2.0-pre.1.tgz"
      },
      "_upm": {
        "changelog": "### Added\n\n- Added support for the new `BoundedPlane.parentId` and `XRBoundingBox.parentId` fields in AR Foundation 6.2. Support is implemented via the `XR_FB_spatial_entity_container` OpenXR extension.\n- Added a setting to the Meta Quest Boundary Visibility feature that allows you to automatically suppress boundary visibility without writing any code. Refer to [Suppress boundary visibility automatically](xref:meta-openxr-boundary-visibility#suppress-automatically) for details.\n- Added overrides for `XRAnchorSubsystem.TrySaveAnchorsAsync`, `XRAnchorSubsystem.TryLoadAnchorsAsync`, and `XRAnchorSubsystem.TryEraseAnchorsAsync` that improve performance when saving, loading, and erasing a batch of anchors on Meta Quest.\n- Added `PlaneProviderType` and `ARPlaneFeature.planeProviderType`. These APIs lay the groundwork for future work.\n- Added `XR_META_spatial_entity_sharing` and `XR_META_spatial_entity_group_sharing` OpenXR extensions to the **Meta Quest: Anchors** feature to support shared spatial anchors in a future update.\n- Added a new property [MetaOpenXRAnchorSubsystem.sharedAnchorsGroupId](xref:UnityEngine.XR.OpenXR.Features.Meta.MetaOpenXRAnchorSubsystem.sharedAnchorsGroupId) for setting the group Id that is used when sharing anchors.\n- Added android permission requirement `com.oculus.permission.IMPORT_EXPORT_IOT_MAP_DATA` to support shared anchors.\n- Added support for sharing and loading shared anchors between colocated users. Refer to [Shared Anchors](xref:meta-openxr-shared-anchors) docs for more info.\n- Added support for [Colocation Discovery](xref:meta-openxr-colocation-discovery) to discover physically colocated devices running the same app.\n\n### Changed\n\n- Recompiled the native plug-in with support for [16 KB page sizes](https://developer.android.com/guide/practices/page-sizes) on Android 15 or newer.\n- Re-implemented the Meta Quest Camera (Passthrough) feature using the XR Composition Layers package, allowing you more customization options for how Passthrough images are composited into your app. If you choose not to customize your app's composition layers, the `MetaOpenXRCameraSubsystem` will create the required components at runtime for you. Refer to [Composition layers](xref:meta-openxr-camera#composition-layers) for more information.\n- Changed the `MetaOpenXRPlaneSubystem` so that it doesn't log any errors if `xrGetSpaceBoundingBox2DFB` fails. There is a known issue in Meta Quest software version v74 and newer that causes this API repeatedly fail in some cases.\n\n### Fixed\n\n- Fixed the `MetaOpenXRAnchorSubsystem` so that it correctly registers its `subsystemTypeOverride`, allowing you to typecast instances of `XRAnchorSubsystem` to `MetaOpenXRAnchorSubsystem`.\n- Fixed meshing subsystem not working with Meta Quest Link.\n- Fixed an issue where Space Discovery and Space Persistence were required to enable the Meta Quest Anchors feature.\n- Fixed the `MetaOpenXRAnchorSubsystem` so that `TrySaveAnchorAsync`, `TryLoadAnchorsAsync`, and `TryEraseAnchorsAsync` no longer throws an exception when the scripting define `ENABLE_UNITY_COLLECTIONS_CHECKS` is present.\n- Fixed `MetaOpenXRAnchorSubsystem` so that loading persistent anchors now correctly assigns their `nativePtr`.\n- Fixed the following features: Meta Quest Bounding Boxes, Meta Quest Display Utilities, Meta Quest Meshing, and Meta Quest Planes, so that they disable themselves and do not attempt to create any relevant subsystems if the OpenXR runtime does not support the required capabilities.\n- Fixed the `MetaOpenXROcclusionSubsystem` so that it no longer logs an error if you create and destroy the subsystem without ever starting it."
      }
    },
    "1.0.4": {
      "name": "com.unity.xr.meta-openxr",
      "version": "1.0.4",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.7.0",
        "com.unity.xr.arfoundation": "5.1.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@1.0/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "348203a7ad8ca05b1446487798294b7aa2445b1a",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-1.0.4.tgz"
      },
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Changed\n\n- Recompiled the native plug-in with support for [16 KB page sizes](https://developer.android.com/guide/practices/page-sizes) on Android 15 or newer.\n\n### Fixed\n\n- Fixed and issue where enabling both the **Meta Quest: AR Session** and **Meta Quest: Display Utilities** OpenXR features would cause the app to unexpectedly quit."
      }
    },
    "2.1.0": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.1.0",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.14.0",
        "com.unity.xr.core-utils": "2.5.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.arfoundation": "6.1.0"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.1/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "aee2fa51cb2be6ff64039913952cf305f39f4814",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.1.0.tgz"
      },
      "_upm": {
        "changelog": "### Added\n\n- Added support for DirectX 12 and DirectX 11 to the Meta Quest Occlusion feature.\n\n### Fixed\n\n- Fixed the `MetaOpenXRAnchorSubsystem` so that it correctly cancels Awaitables when the subsystem is destroyed.\n- Fixed `MetaOpenXRPlaneSubsystem`, `MetaOpenXRBoundingBoxSubsystem`, and `ARMeshFeature` so that when doffing and re-donning the headset, trackables are no longer reported as removed during the brief time while the headset is re-establishing tracking."
      }
    },
    "2.1.0-pre.1": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.1.0-pre.1",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.14.0",
        "com.unity.xr.core-utils": "2.5.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.arfoundation": "6.1.0-pre.4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.1/manual/index.html",
      "unity": "6000.0",
      "dist": {
        "shasum": "02560cae94fa0f505f6e9617ed0fac87802cf66e",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.1.0-pre.1.tgz"
      },
      "_upm": {
        "changelog": "### Added\n\n- Added a validation rule to warn you that soft shadows can negatively affect performance for Meta Quest.\n- Added Scene setup documentation to clarify best practices for requesting Android system permissions.\n- Added support for running scenes in the editor via [Quest Link](xref:meta-openxr-link).\n- Added a public class [MetaOpenXRFeature](xref:UnityEngine.XR.OpenXR.Features.Meta.MetaOpenXRFeature) as the new base class for OpenXR features in this package.\n- Added the Meta Quest Boundary Visibility feature, which enables you to suppress the visibility of the boundary so users can move freely with Passthrough enabled. Refer to [Boundary visibility](xref:meta-openxr-boundary-visibility) for more information.\n- Added support for [Occlusion](xref:meta-openxr-occlusion).\n\n### Changed\n\n- Changed the **Meta Quest: Bounding boxes**, **Meta Quest: Anchors**, **Meta Quest: Meshing**, and **Meta Quest: Planes** features implementation to replace the use of `XR_FB_spatial_entity_query` and `XR_FB_spatial_entity_storage` with newer OpenXR extensions from Meta. This is a backwards-compatible change with no effect on your code.\n- Changed the **Meta Quest: Camera (Passthrough)** feature to no longer enable the `XR_FB_composition_layer_alpha_blend` OpenXR extension. This is a backwards-compatible change with no effect on your code.\n- Changed the severity level of validation rules for features that depend on **Meta Quest: Session** from Warning to Error. These features are unusable at runtime if **Meta Quest: Session** is not enabled, so Error is the appropriate severity level for the validation rules.\n- Changed the dependency version of XR Core Utilities from 2.4.0 to 2.5.1.\n\n### Removed\n\n- Removed a validation rule that warned you if your currently open scene did not have an `ARCameraManager` component while the **Meta Quest: Camera (Passthrough)** feature was enabled. Too often this warning was a false positive for valid project setups, so it wasn't helpful.\n\n### Fixed\n\n- Fixed an issue with [BoundedPlane.nativePtr](xref:UnityEngine.XR.ARSubsystems.BoundedPlane.nativePtr), [XRBoundingBox.nativePtr](xref:UnityEngine.XR.ARSubsystems.XRBoundingBox.nativePtr), and [XRAnchor.nativePtr](xref:UnityEngine.XR.ARSubsystems.XRAnchor.nativePtr) so they now return a pointer to a struct with a version number and a pointer to the `XrSpace` handle of their respective trackable type. Refer to [Plane native pointer](xref:meta-openxr-planes#Native-pointer), [Bounding box native pointer](xref:meta-openxr-bounding-boxes#Native-pointer), and [Anchor native pointer](xref:meta-openxr-anchors#Native-pointer) for more information.\n- Fixed Android Manifest setup for builds so that if your app uses Bounding Boxes or Meshing but not Planes, your app's Android Manifest will now correctly declare the `com.oculus.permission.USE_SCENE` permission.\n- Fixed the **Meta Quest: Display Utilities** feature so that it works correctly even when **Meta Quest: Session** is disabled. ([MOXRB-70](https://issuetracker.unity3d.com/product/unity/issues/guid/MOXRB-70))\n- Fixed the **Meta Quest: Anchors** and **Meta Quest: Passthrough** features so they gracefully fail to create their subsystems if the OpenXR runtime does not support the required system properties."
      }
    },
    "1.0.2": {
      "name": "com.unity.xr.meta-openxr",
      "version": "1.0.2",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "dependencies": {
        "com.unity.xr.openxr": "1.7.0",
        "com.unity.xr.arfoundation": "5.1.0"
      },
      "unity": "2022.3",
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Changed\n\n- Changed the AR Foundation dependency version from 5.1.0-pre.6 to 5.1.0.\n- Changed the behavior of `MetaOpenXRSessionSubsystem.sessionId` to now return a non-empty, unique Guid value per Meta OpenXR session. You can access the session id using `XRSessionSubsystem.sessionId`.\n\n### Fixed\n\n- Fixed an issue where the subsystem descriptor for `MetaOpenXRPlaneSubsystem` incorrectly stated that horizontal plane detection, vertical plane detection, and classification were unsupported. These features have all been supported since the 1.0 release, and the subsystem descriptor now returns the correct values.\n- Fixed a very rare issue where plane detection could possibly fail to update planes due to an unhandled error.\n- Fixed an issue where trackable poses would fail to update when the OpenXR runtime returned valid but untracked data.\n- Fixed an issue with [BoundedPlane.nativePtr](xref:UnityEngine.XR.ARSubsystems.BoundedPlane.nativePtr) and [XRAnchor.nativePtr](xref:UnityEngine.XR.ARSubsystems.XRAnchor.nativePtr) so they now return a pointer to a struct with a version number and a pointer to the `XrSpace` handle of their respective trackable type. Refer to [Plane native pointer](xref:meta-openxr-planes#Native-pointer) and [Anchor native pointer](xref:meta-openxr-anchors#Native-pointer) for more information."
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@1.0/manual/index.html",
      "dist": {
        "shasum": "6ff42f526bf0fcce3e4c86f848e11446e89332b7",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-1.0.2.tgz"
      }
    },
    "2.0.1": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.0.1",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.openxr": "1.10.0",
        "com.unity.xr.arfoundation": "6.0.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.core-utils": "2.3.0"
      },
      "unity": "6000.0",
      "_upm": {
        "changelog": "### Added\n\n- Added Scene setup documentation to clarify best practices for requesting Android system permissions.\n\n### Changed\n\n- Changed the **Meta Quest: Bounding boxes**, **Meta Quest: Anchors**, **Meta Quest: Meshing**, and **Meta Quest: Planes** features implementation to replace the use of `XR_FB_spatial_entity_query` and `XR_FB_spatial_entity_storage` with newer OpenXR extensions from Meta. This is a backwards-compatible change with no effect on your code.\n\n### Fixed\n\n- Fixed an issue with [BoundedPlane.nativePtr](xref:UnityEngine.XR.ARSubsystems.BoundedPlane.nativePtr), [XRBoundingBox.nativePtr](xref:UnityEngine.XR.ARSubsystems.XRBoundingBox.nativePtr), and [XRAnchor.nativePtr](xref:UnityEngine.XR.ARSubsystems.XRAnchor.nativePtr) so they now return a pointer to a struct with a version number and a pointer to the `XrSpace` handle of their respective trackable type. Refer to [Plane native pointer](xref:meta-openxr-planes#Native-pointer), [Bounding box native pointer](xref:meta-openxr-bounding-boxes#Native-pointer), and [Anchor native pointer](xref:meta-openxr-anchors#Native-pointer) for more information."
      },
      "upmCi": {
        "footprint": "e2b84e353fe7d55383909a8f7c47cd4f830737d7"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.meta-openxr.git",
        "type": "git",
        "revision": "f1114e177c6bf63c8e67d6a5fbd25ec785788a72"
      },
      "dist": {
        "shasum": "93371bdf089852b62baf4c08a3064568f1fec5c7",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.0.1.tgz"
      }
    },
    "2.0.0": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.0.0",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.openxr": "1.10.0",
        "com.unity.xr.arfoundation": "6.0.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.core-utils": "2.3.0"
      },
      "unity": "6000.0",
      "_upm": {
        "changelog": "### Added\n\n- Added support for saving anchors, loading anchors, and erasing anchors introduced in AR Foundation 6.\n- Added explicit dependencies for the XR Plug-in Management and XR Core Utils packages, which were previously implicit.\n\n### Changed\n\n- Changed the `MetaOpenXRPlaneSubsystem` to correctly apply the [PlaneClassifications.InvisibleWallFace](xref:UnityEngine.XR.ARSubsystems.PlaneClassifications.InvisibleWallFace) semantic label for invisible wall faces.\n- Changed the plane and bounding box subsystems to no longer attempt to request the Android system permission `com.oculus.permission.USE_SCENE` on your app's behalf. To use these features with OpenXR Plug-in version 1.11.0 or newer, your app must request this permission. Refer to [Spatial Data Permission](https://developer.oculus.com/documentation/unity/unity-spatial-data-perm/) (Meta Quest Developer Center) to learn how to request this permission.\n- Changed minimum version of AR Foundation dependency from 6.0.0-pre.7 to 6.0.1.\n- Changed minimum Unity Editor version from 2023.3 to 6000.0 as required by AR Foundation 6.0.1.\n- Changed minimum version of OpenXR Plug-in dependency from 1.9.1 to 1.10.0.\n\n### Fixed\n\n- Fixed an issue where trackable poses would fail to update when the OpenXR runtime returned valid but untracked data.\n- Fixed an issue where planes that should be classified as `WallArt` were classified as `Other`.\n\n### Security"
      },
      "upmCi": {
        "footprint": "5da4fbaad0d6cd7b858874b28d73aa7295dd501c"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.meta-openxr.git",
        "type": "git",
        "revision": "0fbc0c0d52f01ae35b03d7e29370e0974203cd9a"
      },
      "dist": {
        "shasum": "45f786f59d670d9394a91f1697d18cad708e39b7",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.0.0.tgz"
      }
    },
    "2.0.0-pre.1": {
      "name": "com.unity.xr.meta-openxr",
      "version": "2.0.0-pre.1",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.openxr": "1.9.1",
        "com.unity.xr.arfoundation": "6.0.0-pre.7"
      },
      "unity": "2023.3",
      "_upm": {
        "changelog": "### Added\n\n- Added support for the [ARPlane.classifications](xref:UnityEngine.XR.ARFoundation.ARPlane.classifications) data type introduced in AR Foundation 6.0, including new classification values and support for planes with multiple classifications.\n- Added an API for the tracking of 3D bounding boxes. Refer to [Bounding boxes](xref:meta-openxr-bounding-boxes) for more information.\n- Added support for the [Asynchronous TryAddAnchor API](xref:arfoundation-whats-new#asynchronous-anchor-creation) introduced in AR Foundation 6.\n- Added [XRResultStatusExtensions](xref:UnityEngine.XR.OpenXR.Features.Meta.XRResultStatusExtensions), extending the [XRResultStatus](xref:UnityEngine.XR.ARSubsystems.XRResultStatus) type to support conversion to [XrResult](xref:UnityEngine.XR.OpenXR.NativeTypes.XrResult).\n- Added support for `NotAxisAligned` plane detection mode introduced in AR Foundation 6.0.\n- Added support for the [Meshing](xref:meta-openxr-meshing) subsystem.\n\n### Changed\n\n- Changed the AR Foundation dependency version to 6.0.0-pre.7.\n- Changed the minimum version of Unity to 2023.3, as required by AR Foundation 6.0.0-pre.7.\n- Changed the behavior of `MetaOpenXRSessionSubsystem.sessionId` to now return a non-empty, unique Guid value per Meta OpenXR session. You can access the session id using `XRSessionSubsystem.sessionId`.\n- Changed the way the Android Manifest is written to override the `IAndroidManifestRequirementProvider` interface so that direct XML manipulation is not necessary.\n- Changed the names of the Meta Quest features in the Editor to remove the \"AR\" prefix.\n\n### Fixed\n\n- Fixed an issue where the subsystem descriptor for `MetaOpenXRPlaneSubsystem` incorrectly stated that horizontal plane detection, vertical plane detection, and classification were unsupported. These features have all been supported since the 1.0 release, and the subsystem descriptor now returns the correct values.\n- Fixed a very rare issue where plane detection could possibly fail to update planes due to an unhandled error."
      },
      "upmCi": {
        "footprint": "83b3d2eaad8697b24296e269bfe4a0ab5d7c3378"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@2.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.meta-openxr.git",
        "type": "git",
        "revision": "2e2b5d29e937c36991b72355277832754df87798"
      },
      "dist": {
        "shasum": "ccc0996dae1189b2d2006e647c5d207c49252c5f",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-2.0.0-pre.1.tgz"
      }
    },
    "1.0.1": {
      "name": "com.unity.xr.meta-openxr",
      "version": "1.0.1",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.openxr": "1.7.0",
        "com.unity.xr.arfoundation": "5.1.0-pre.6"
      },
      "unity": "2022.3",
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Changed\n\n- Updated documentation to reflect changes to the **Room Setup** process including it being renamed to **Space Setup** and relocated to **Settings** > **Physical Space**\n\n### Fixed\n\n- Fixed an issue where Meta's OpenXR runtime would log a warning every frame for each `ARPlane` in the scene regarding the use of an older version of their OpenXR API for semantic labels.\n- Fixed documentation links for Meta-OpenXR features in `Project Settings` > `XR Plug-in Management` > `OpenXR`."
      },
      "upmCi": {
        "footprint": "a07aea2bedfe8ef253fc68e7eac0ee819940c1ac"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@1.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.meta-openxr.git",
        "type": "git",
        "revision": "b733abd7a682340768cce21f73acf75e2a98d2fd"
      },
      "dist": {
        "shasum": "76adde444b128245ed974680c8cfb516ec4c29e0",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-1.0.1.tgz"
      }
    },
    "1.0.0": {
      "name": "com.unity.xr.meta-openxr",
      "version": "1.0.0",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.openxr": "1.7.0",
        "com.unity.xr.arfoundation": "5.1.0-pre.6"
      },
      "unity": "2022.3",
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Added\n\n- Added new extension methods for the `XRDisplaySubsystem` to support getting the supported display refresh rates and requesting a display refresh rate. Refer to [Meta Quest Display Utilities](xref:meta-openxr-display-utilities) for more information.\n\n- Added documentation for recommended settings when using [Universal Render Pipeline](xref:meta-openxr-project-setup#universal-render-pipeline).\n\n### Changed\n\n- Renamed the AR features in the `Meta Quest` OpenXR feature group for brevity and consistency.\n\n- Changed the `ARPlaneFeature` implementation to request the Android permission `com.oculus.permission.USE_SCENE` on Start on OpenXR runtime versions 1.0.31 and newer, as required by the OpenXR specification.\n\n- Changed the `Unity.XR.MetaOpenXR` runtime assembly to only be included on Android and Editor platforms. This was always intended, but previously the assembly had been included on all platforms.\n\n### Fixed\n\n- Fixed an issue where the `ARAnchorFeature` enabled more OpenXR extensions than were necessary for the `XRAnchorSubsystem` to function correctly."
      },
      "upmCi": {
        "footprint": "7cdb9ccee97b6138b8a398a436e908964ed9a517"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@1.0/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.meta-openxr.git",
        "type": "git",
        "revision": "f0901199eeac9283ca7c0f3a2fa00e2a82e1bf53"
      },
      "dist": {
        "shasum": "b83417c7007c6d1a8809f987ef140bdf63fa1b06",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-1.0.0.tgz"
      }
    },
    "0.2.1": {
      "name": "com.unity.xr.meta-openxr",
      "version": "0.2.1",
      "displayName": "Unity OpenXR Meta",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.openxr": "1.7.0",
        "com.unity.xr.arfoundation": "5.1.0-pre.6"
      },
      "unity": "2022.3",
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Added\n\n- Added `com.oculus.permission.USE_SCENE` permission to the manifest which will show a permission dialog to get user consent if scene data such as planes is requested."
      },
      "upmCi": {
        "footprint": "62b7bae5a64e07e030bea2469829e9356d16b718"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@0.2/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.meta-openxr.git",
        "type": "git",
        "revision": "d609bfe9c054862f80c45755918a7b3652af2e2b"
      },
      "dist": {
        "shasum": "9acb780246355ed45061a1ad4162686b220bf316",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-0.2.1.tgz"
      }
    },
    "0.1.2": {
      "name": "com.unity.xr.meta-openxr",
      "version": "0.1.2",
      "displayName": "Meta OpenXR Feature",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.openxr": "1.7.0",
        "com.unity.xr.arfoundation": "5.1.0-pre.6"
      },
      "unity": "2021.3",
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Fixed\n\n- Fixed math operations for comparing structs with single-precision values.\n- Fixed an issue where it was possible to incorrectly remove or update planes before they were added in some uncommon situations. This resulted in an `InvalidOperationException` in AR Foundation that is now no longer thrown."
      },
      "upmCi": {
        "footprint": "c767157f6bba96eae6fbeabe82bee0453e59d57e"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@0.1/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.meta-openxr.git",
        "type": "git",
        "revision": "034f2e946c8fc8780272eec35062a912778969f4"
      },
      "dist": {
        "shasum": "cdda0b359dda8907b6ccea0d642bba67ac954653",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-0.1.2.tgz"
      }
    },
    "0.1.1": {
      "name": "com.unity.xr.meta-openxr",
      "version": "0.1.1",
      "displayName": "Meta OpenXR Feature",
      "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta OpenXR extensions.",
      "keywords": [
        "openxr",
        "meta",
        "oculus",
        "xr",
        "vr",
        "mr",
        "virtual",
        "reality",
        "rift",
        "quest",
        "arfoundation"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.openxr": "1.7.0",
        "com.unity.xr.arfoundation": "5.1.0-pre.6"
      },
      "unity": "2021.3",
      "unityRelease": "0f1",
      "_upm": {
        "changelog": "### Added\n\n- Added support for getting plane boundary vertices via [XRPlaneSubsystem.GetBoundary](xref:UnityEngine.XR.ARSubsystems.XRPlaneSubsystem.GetBoundary(UnityEngine.XR.ARSubsystems.TrackableId,Unity.Collections.Allocator,Unity.Collections.NativeArray{UnityEngine.Vector2}@)).\n- Added support for getting plane alignment via [ARPlane.alignment](xref:UnityEngine.XR.ARFoundation.ARPlane.alignment) as well as [planeAlignmentThreshold](xref:UnityEngine.XR.OpenXR.Features.Meta.MetaOpenXRPlaneSubsystem.planeAlignmentThreshold). Refer to [Plane alignment](xref:meta-openxr-plane-detection#plane-alignment) for more information.\n- Added support for [plane classification](xref:UnityEngine.XR.ARSubsystems.PlaneClassification).\n- Added support for planes to be updated and removed.\n- Added a custom Editor for [ARCameraManager](xref:UnityEngine.XR.ARFoundation.ARCameraManager) to clarify that its serialized properties have no effect on Meta Passthrough.\n- Added a custom Editor for [ARCameraBackground](xref:UnityEngine.XR.ARFoundation.ARCameraBackground) to clarify that it has no effect on Meta Quest devices.\n- Added support for [requestedDetectionMode](xref:UnityEngine.XR.ARFoundation.ARPlaneManager.requestedDetectionMode) to filter horizontal and vertical planes.\n\n### Changed\n\n- Changed the `trackableId` property of planes to be backed by OpenXR's `uuid` field, instead of a monotonically increasing counter.\n- Changed the display name of the AR Foundation Meta Quest feature.\n- Grouped the Meta Quest OpenXR features in an OpenXR feature group.\n- Passthrough layer is now composited behind AR content rather than alpha blended in front of it. This fixes an issue where AR opaques always appeared semi-transparent.\n\n### Fixed\n\n- Fixed an issue where the `trackingState` property of planes could be incorrectly reported in some rare cases.\n- Fixed an issue where the center of a plane in plane space was incorrectly reported as a value other than (0, 0).\n- Fixed an issue where `ARPlane`s were not removed if the `Redo Walls` action or the `Clear Room Set Up` action was performed through the Meta Quest menu."
      },
      "upmCi": {
        "footprint": "462cffdd3051f007ee622b65d07b04ac741d4250"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.meta-openxr@0.1/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.meta-openxr.git",
        "type": "git",
        "revision": "c8ab99246d2a4a35202ba41e94bef7bc0dbb406f"
      },
      "dist": {
        "shasum": "418ee1cb67a08251dfc1e2ef6d1abb20fbe0c35d",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.meta-openxr/-/com.unity.xr.meta-openxr-0.1.1.tgz"
      }
    }
  },
  "etag": "\"2500f9ecc357f172572a26110ce1204e\"",
  "provider": "upm",
  "name": "com.unity.xr.meta-openxr",
  "description": "Enables you to build mixed reality apps for Meta Quest devices by implementing support for Meta's OpenXR extensions.",
  "_id": "com.unity.xr.meta-openxr",
  "cnTags": [],
  "time": {
    "2.3.0": "2025-10-05T03:26:31Z",
    "2.2.1": "2025-10-04T03:26:38Z",
    "2.0.2": "2025-10-04T03:26:31Z",
    "2.3.0-pre.2": "2025-10-02T03:26:31Z",
    "1.0.3": "2025-08-22T08:42:43Z",
    "2.2.0": "2025-07-02T03:22:01Z",
    "2.1.1": "2025-05-20T03:22:01Z",
    "2.2.0-pre.1": "2025-05-09T03:22:02Z",
    "1.0.4": "2025-04-04T03:21:00Z",
    "2.1.0": "2025-02-27T03:24:32Z",
    "2.1.0-pre.1": "2024-12-30T04:04:28Z",
    "1.0.2": "2024-10-11T21:25:58Z",
    "2.0.1": "2024-07-29T11:54:04Z",
    "2.0.0": "2024-05-01T07:08:55Z",
    "2.0.0-pre.1": "2024-03-18T09:41:28Z",
    "1.0.1": "2023-11-27T10:51:39Z",
    "1.0.0": "2023-10-05T07:16:57Z",
    "0.2.1": "2023-09-19T01:29:12Z",
    "0.1.2": "2023-07-05T18:02:17Z",
    "0.1.1": "2023-06-20T07:01:42Z"
  }
}
