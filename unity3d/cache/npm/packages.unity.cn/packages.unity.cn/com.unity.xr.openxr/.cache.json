{
  "dist-tags": {
    "latest": "1.16.0-pre.2"
  },
  "versions": {
    "1.16.0-pre.2": {
      "name": "com.unity.xr.openxr",
      "version": "1.16.0-pre.2",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.3.0",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.16/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "c214a38a25f1ad8e9ba0edc3e030866e6c611b9f",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.16.0-pre.2.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n* Added the following members to the [OpenXR native API](xref:openxr-native-api):\n  * `ISpatialConfiguration`\n  * `XrBaseInStructure`\n  * `OpenXRResultStatus.ToString`\n  * `XrFovf` (removing the previous `COMPOSITION_LAYERS` preprocessor directive)\n  * Added constructor overloads to structs that take `NativeArray<T>.ReadOnly` as input parameters.\n  * `XrSpatialDiscoverySnapshotCreateInfoEXT.defaultValue`\n  * `OpenXRNativeApi.xrPollFutureEXT(XrFutureEXT)`\n  * `OpenXRNativeApi.xrCancelFutureEXT(XrFutureEXT)`\n  * `OpenXRResultStatus.StatusCode.Unsupported`\n  * static factory methods to construct `XrPosef`, `XrVector3f`, and `XrQuaternionf` from session-space data\n  * `XrVector3f.ToSessionSpaceVector3`\n  * `XrQuaternionf.ToSessionSpaceQuaternion`\n  * `XrPosef.ToSessionSpacePose`\n  * `XrPosef(UnityEngine.Pose)` constructor\n  * `XrSpatialComponentDataQueryResultEXT(void*)` constructor\n  * `XrSpatialComponentDataQueryResult.SetEntityIds` and `XrSpatialComponentDataQueryResult.SetEntityStates`\n* Added a new validation rule for Meta Quest feature to ensure Application entry point being set to GameActivity for Unity 6.0+.\n\n### Deprecated\n\n* Deprecated Hololens Microsoft Hand Interaction Profile.\n\n### Removed\n\n* Removed a pre-release overload for `OpenXRNativeAPI.xrQuerySpatialComponentDataEXT` that didn't allow you to receive component data chained to the next pointer of the query condition.\n\n### Fixed\n\n* Fixed the Render Mode setting dropdown in OpenXR Settings to align consistently with the UI of other settings.\n* Fixed `MockOpenXREnvironmentSettings` so that changes made to mock runtime settings don't affect the serialized settings assets in your project.\n* Fixed `MockOpenXREnvironmentSettings` so that it doesn't save any unwanted changes to your EditorBuildSettings.\n* Fixed swapchain diagnostic reports not being removed from cache after swapchains are destroyed.\n* Fixed a compile error when using this package in Unity 6000.3.0b1 or newer, which was caused by the deprecation of the VR module in that Editor version.\n* Fixed a crash when the OpenXR library was loaded with a path containing emojis on OSX."
      }
    },
    "1.16.0-pre.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.16.0-pre.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.3.0",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.16/manual/index.html",
      "unity": "2022.3",
      "dist": {
        "shasum": "156b1a9278b533cfa90ce708158de61c19e4f297",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.16.0-pre.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n* Added support for OpenXR features to define the OpenXR API version required to fully function.\n* Added members to the `XrStructureType` enum. `XrStructureType` now contains all OpenXR values as of OpenXR version 1.1.49.\n* Added support for multiple OpenXR features to define a custom loader and define the OpenXR API version that is supported by the feature's loader.\n* Added the [OpenXR native API](xref:openxr-native-api) with initial support for the following extensions:\n  * `XR_EXT_future`\n  * `XR_EXT_spatial_anchor`\n  * `XR_EXT_spatial_entity`\n  * `XR_EXT_spatial_marker_tracking`\n  * `XR_EXT_spatial_persistence`\n  * `XR_EXT_spatial_persistence_operations`\n  * `XR_EXT_spatial_plane_tracking`\n* Added `RenderTexture` support for Composition Layers.\n* Added class `MockOpenXREnvironment` and `MockOpenXREnvironmentSettings` for testing low-level runtime functionality using the Mock Runtime feature.\n* Added [PollEventRouter](xref:UnityEngine.XR.OpenXR.NativeTypes.PollEventRouter), a new type that allows you to subscribe to `xrPollEvent` events.\n* Added feature to enable Automatic Viewport Dynamic Resolution for compatible devices. Refer to [Automatic Viewport Dynamic Resolution](xref:openxr-automatic-dynamic-resolution) for information.\n* Added MSAA support for Windows+Vulkan builds.\n\n### Changed\n* Changed OpenXR loader version to 1.1.49.\n* Changed sample count of SwapchainCreateInfo to 1 as default instead of recommendedSwapchainSampleCount returning from the runtime.\n* Updated minimum supported version from 2021.3 to 2022.3.\n* Changed the OpenXR Validation for the minimum Android API level to only apply to Unity 6.2 and older versions.\n\n### Removed\n* Removed the validation warning to enable the OpenXR package if an OpenXR feature is enabled. Instead, OpenXR validation will only run when the OpenXR loader is selected as active loader.\n* Remove HoloLens documentation as Unity has deprecated its support. Refer to [the public announcement](https://discussions.unity.com/t/hololens-2-deprecation/1661529) for more information."
      }
    },
    "1.15.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.15.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.3.0",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.15/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "05fb1a7d75d118139c283c8d76b7f99a655364a8",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.15.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n\n* Fixed compile errors due to `AssetDatabase.CanOpenAssetInEditor(int)` and `AssetDatabase.OpenAsset(int)` were deprecated in Unity 6.3 and newer.\n* Fixed an issue in which the wrong normalized device coordinates (NDC) convention was used for SpaceWarp motion vectors. Application developers must now specify whether the current device uses right- or left-handed NDC for motion vectors when SpaceWarp is enabled."
      }
    },
    "1.15.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.15.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.3.0",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.15/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "24eaf1374fcf8890a450eff57d46de94d5288f9c",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.15.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n* Added settings and a component to enable URP Application Spacewarp for compatible devices. Refer to [URP Application Spacewarp](xref: openxr-spacewarp) for information.\n* Added a validation rule for warning of Magic Leap 2 limit to existing projects from Unity 6.3.\n\n### Changed\n\n* Check whether the requested eye tracking permission has been granted before requesting permission.\n* Changed the Composition Layers native implementation to create global references of Android surface objects.\n\n### Fixed\n\n* Fixed compile errors due to `TreeView`, `TreeViewState` and `TreeViewItem` were deprecated in Unity 6.2 and newer.\n* Fixed an issue to only apply OpenXR related bootconfig when OpenXR Loader is enabled.\n* Enabled `XR_FB_swapchain_update_state` extension by default if available to fix `XR_ERROR_EXTENSION_DEPENDENCY_NOT_ENABLED` runtime error when `XR_FB_foveation` extension was enabled by default.\n* Fixed incorrect display of the `Use OpenXR Predicted Time` toggle in Unity versions below 6.2.\n* Fixed a crash that could occur when changing scenes containing an `OpenXRDefaultLayer` with extensions.\n* Fixed compile errors due to `EditorUtility.InstanceIDToObject` being deprecated in Unity 6.3 and newer.\n* Fixed foveation data corruption leading to visual anomalies when the OpenXR swapchain was frequently resized.\n* Fixed an increase in memory that was seen in older editors that are not checking for the OffScreen Rendering Only bootconfig value."
      }
    },
    "1.15.0-pre.2": {
      "name": "com.unity.xr.openxr",
      "version": "1.15.0-pre.2",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.3.0",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.15/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "a559ef14ce5f3d75ddf076bed039cc8ea42381fd",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.15.0-pre.2.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n* Added `OpenXRLayerUtility.RequestRenderTextureId` and `OpenXRLayerUtility.RequestStereoRenderTextureIds`. These functions have callback parameters because they execute on the graphics thread.\n* Added support for a new Multiview Render Regions Optimization mode - All Passes, which gets applied to as many passes as possible instead of only the final pass of the render in XR.\n\n### Changed\n\n* Changed the Symmetric Projection validation rule that checks for Vulkan api to a warning instead of an error.\n* Deprecated  `OpenXRLayerUtility.FindRenderTexture`, `OpenXRLayerUtility.FindAndWriteToRenderTexture`, `OpenXRLayerUtility.FindAndWriteToStereoRenderTextures`, and `OpenXRLayerUtility.FindAndWriteToStereoRenderTextures`. \n* Swapchain images are acquired on the graphics thread with `OpenXRLayerUtility.RequestRenderTextureId` and `OpenXRLayerUtility.RequestStereoRenderTextureIds` and automatically released by the OpenXR plugin on the graphics thread.\n* Enable `XR_FB_foveation` and `XR_FB_foveation_configuration` extensions by default if available for runtime.\n* Changed Multiview Render Regions (Vulkan) setting for Meta Quest Support from a check box to dropdown menu with three options: None, FinalPass and AllPasses.\n\n### Fixed\n\n* Fixed errors when opening Profiler (Standalone Process) with OpenXR Plugin is present in the project.\n* Fixed Mock Runtime occlusion mesh rendering.\n* Fixed an issue that OpenXR Project Settings window appears blank and Editor freezes when upgrading package version to 1.14.1 or higher."
      }
    },
    "1.15.0-pre.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.15.0-pre.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.3.0",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.15/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "6b5c5e37f2657ed7a1e2c2133c2a117a438a90c1",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.15.0-pre.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n* Added `OpenXREditorSettings.VulkanOffscreenSwapchainNoMainDisplay` property to request at startup to use offscreen rendering for devices that require it. The setting can be enabled through the Project settings UI and build code. This setting should be disabled for handheld platforms.\n* Added Meta Quest input profile features when switching to Meta Quest Build Profile.\n* Added `Use OpenXR Predicted Time` UI setting to enable OpenXR time prediction which allows the hardware and runtime to set the display time prediction for the next frame instead of Unity.\n* Added a new OpenXRSetting, [LatencyOptimization](xref:project-configuration#latency-optimization) to allow developers to opt to prioritize rendering latency or input polling latency.\n* Added optional project validation check for Link Time Optimization with Meta Quest.\n* Added `UnityXRDisplay::DestroyTexture` API so providers can access them to destroy textures created by `UnityXRDisplay::CreateTexture` API.\n* Added a validation rule for setting Latency Optimization to Prioritize Input Polling with Meta Quest Support enabled.\n\n### Changed\n\n* Recompiled the native Android plug-in with support for [16 KB page sizes](https://developer.android.com/guide/practices/page-sizes) on Android 15 or newer.\n\n### Fixed\n\n* Fixed offscreen rendering flags to be added only when the \"Offscreen Rendering Only (Vulkan)\" Android OpenXR UI setting is enabled. [IN-78279](https://unity3d.atlassian.net/servicedesk/customer/portal/2/IN-78279).\n* Fixed Meshing and Intercept features not being enabled by default when the sample was imported.\n* Fixed OpenXRCustomLayerHandler class so it now explicitiy calls acquire and release on swapchains for every layer on the main thread and caches swapchain image render textures for efficiency.\n* Fixed an issue where `OpenXRInput.TryGetInputSourceName` failed to retrieve the input source name."
      }
    },
    "1.14.3": {
      "name": "com.unity.xr.openxr",
      "version": "1.14.3",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.3.0",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.14/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "3903c1059bcf18e6a894f8aa2076f2a8267716bd",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.14.3.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n\n* Fixed Multiview Render Regions feature regression."
      }
    },
    "1.14.2": {
      "name": "com.unity.xr.openxr",
      "version": "1.14.2",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.3.0",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.14/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "9f2923682e68d941b400fc4be76aaa2615446279",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.14.2.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n* Added a validation rule about the minimum Android API level is 24.\n* Added support for visible triangle mesh to be available for use in post processing.\n\n### Changed\n\n* Modified the Meta Quest Support feature to use the updated Khronos OpenXR loader library.\n* Changed OpenXR loader version to 1.1.45.\n\n### Fixed\n\n* Fixed an issue that enabled interaction profiles setting not being saved after reopened the project.\n* Fixed a bug that depth submission mode corrupting the spacewarp depth texture.\n* Fixed a bug that wrong view configuration type being selected as primary view and causing rendering issues.\n* Fixed an issue on Android platforms where `xrCreateSwapchainAndroidSurfaceKHR` was attempted to be used even when the XR Composition Layers package wasn't installed.\n* Fixed an issue that Meta XR simulator can't launch properly on Mac."
      }
    },
    "1.14.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.14.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.3.0",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.14/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "db4bbb5cd412ddbe352755d176a472ce5a002505",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.14.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n* Added a validation rule to the Meta Quest Support feature to ensure that your app's default interface orientation uses a supported value.\n\n### Fixed\n\n* Fixed the OpenXRFeatureBuildHooks class so it now grabs the OpenXRSettings object from the given build target during build processing.\n* Fixed duplicate OpenXR feature assets being added to the OpenXRSettings asset when upgrading to a newer OpenXR package.\n* Fixed rendering problems with Mixed Reality Capture.\n* Fixed a debug log spamming issue regarding ignored event types. This message could be logged multiple times per frame and was not helpful.\n* Fixed Meta-specific eye-tracking manifest permissions to be added only to apps targeting Meta Quest Pro devices.\n* Fixed an issue where spacewarp may assign motion vector textures to wrong render passes when using secondary views.\n* Fixed a bug when allocating array swapchain failed, the index was incremented incorrectly. \n* Fixed an issue when OpenXR feature didn't have all the attribute entries setup."
      }
    },
    "1.14.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.14.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.3.0",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.14/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "97381c723a9c4a7b56925c2aa4e742b3348f7eac",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.14.0.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n* Added support for the RG16f texture format and a selection mode for the texture format of the Space Warp motion vector texture for the Meta Quest feature. You can select the format for the Space Warp motion vector texture in Editor > Project Settings > XR Plug-in Management > OpenXR > Android tab > Meta Quest Support feature settings.\n* Added the following extension methods for `XrResult`: `IsSuccess()`, `IsUnqualifiedSuccess()`, and `IsError()`, which you can use to more conveniently reason about `XrResult` values.\n* Added new values to the `XrResult` enum to match the values present in the native `XrResult` type in OpenXR 1.1.36.\n* Added support for locating the OpenXR loader for the Meta XR Simulator on OSX.\n* Added new Optimize Multiview Render Regions settings option for Meta Quest devices. In the context of XR rendering, Multiview Render Regions enables the drivers to skip shader invocations (and rendering work) for screen areas outside of the user's view (such as the nasal regions that the user can't see within the headset). You can toggle on support for Multiview Render Regions in Editor > Project Settings > XR Plug-in Management > OpenXR > Android tab > Meta Quest Support feature settings. Note that Multiview Render Regions requires Symmetric Projection settings toggle turned on, and Render Mode set to Single Pass Instanced \\ Multi-view. Multiview Render Regions is only supported in the Vulkan Graphics API, and it is activated at application start up.\n* Added project validation warning to prevent user from using URP upscaling with XR.\n\n### Deprecated\n\n* Deprecated `XrResult.TimeoutExpored` and `XrResult.AndroidThreadSettingsdFailureKHR` and replaced them with correctly spelled enum values.\n\n### Fixed\n\n* Occlusion Mask vertices projected based on FOV."
      }
    },
    "1.13.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.13.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.1.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.13/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "767bb845714d00a28b9456f5d706bb80c95781b7",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.13.1.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n\n* Conformance Automation Feature:  Removed assert for optional entry point xrSetInputDeviceVelocityUNITY."
      }
    },
    "1.13.2": {
      "name": "com.unity.xr.openxr",
      "version": "1.13.2",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.1.1",
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.13/manual/index.html",
      "unity": "2021.3",
      "dist": {
        "shasum": "b26e591b92ca1195bc976482dd9395786d1fcc20",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.13.2.tgz"
      },
      "samples": [
        {
          "path": "Samples~/Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "displayName": "Controller"
        },
        {
          "path": "Samples~/ControllerXRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "displayName": "Controller XRInput"
        },
        {
          "path": "Samples~/MeshingFeature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "displayName": "Meshing Subsystem Feature"
        },
        {
          "path": "Samples~/InterceptFeature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "displayName": "Intercept Feature"
        },
        {
          "path": "Samples~/CustomCompositionLayerFeature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "displayName": "Custom Composition Layer Feature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n* Added UWP platform as one of the supported build targets for OpenXR Composition Layer feature.\n\n### Fixed\n\n* Fixed compiler errors when using experimental versions of the XR Composition Layers package (versions older than 1.0.0). You are required to use XR Composition Layers 1.0.0 or newer for OpenXR support."
      }
    },
    "1.13.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.13.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Controller XRInput",
          "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
          "path": "Samples~/ControllerXRInput"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        },
        {
          "displayName": "Custom Composition Layer Feature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "path": "Samples~/CustomCompositionLayerFeature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n* Added Meta XR Simulator as runtime option for OpenXR. One can search for the `com.meta.xr.simulator` package to add the Open XR runtime to the dropdown list of available runtimes during Play Mode.\n* Added a `Quest 3S` option to `Target Devices` in the Meta Quest Support settings. This specifies the application's support for Quest 3S devices within the Android manifest.\n* Added `IUnityXRDisplay::CreateTexture` API to C# script so providers can access them for functionality.\n* Added APIs to provide an alternative to the Input System: `OpenXRFeature.GetAction`, `OpenXRInput.GetActionHandle`, `OpenXRInput.SendHapticImpulse`, `OpenXRInput.StopHapticImpulse`, `OpenXRInput.TrySetControllerLateLatchAction`, and `OpenXRInput.GetActionIsActive`.\n* Added a \"Controller XRInput\" sample to demonstrate how to access input data without the Input System.\n* Added experimental support for XR Composition Layers support. Install the Unity [Composition Layer (com.unity.xr.compositionlayers)](https://docs.unity3d.com/Packages/com.unity.xr.compositionlayers@latest?subfolder=/changelog/CHANGELOG.html) package to use composition layers in an OpenXR project.\n* Added support for the `XR_KHR_maintenance1` extension. This low-level extension provides support for new capabilities promoted in the OpenXR 1.1 standard, which may be needed for backwards compatibility for using new extensions in OpenXR loaders using the version 1.0 of the standard. You need to request this extension if your project will make use of OpenXR 1.1 extenstions that need this extension and are backwards compatible with loaders based on the 1.0 version of the OpenXR standard. If your project targets only the OpenXR 1.1 version, you don't need to request this extension. To use the `XR_KHR_maintenance1` extension, you must request it as part of your own [OpenXR feature definition](xref:openxr-features). Refer to [XR_KHR_maintenance1](https://registry.khronos.org/OpenXR/specs/1.1/html/xrspec.html#XR_KHR_maintenance1) for more information on the extension.\n* Added OpenXR 1.1 Runtime support.\n\n### Changed\n\n* Added [Known Issue](xref:openxr-manual#known-issues) to documentation covering how OpenXR doesn't provide Acceleration or Angular Acceleration values for input devices, and these will always return 0.\n* Added a validation rule requiring Multi-view to be enabled in order to enable Symmetric Projection.\n* Implements the construction and maintenance of native composition layers in C# via our LayerProvider classes inheriting from OpenXRCustomLayerHandler.\n* Changed OpenXR loader version to 1.1.36.\n\n### Fixed\n\n* Symmetric Projection was being gated behind foveation extensions being enabled. This wasn't necessary and that dependency has been removed.\n* Fixed a bug that causes a user to need a validation rule to make OpenXR loader active.\n* Fixed `m_BlendMode` from being overwritten whenever the `DisplaySubsystem` restarts.\n* Fixed Metal API initialization. \n* Fixed Custom Composition Layer Feature not showing up in the OpenXR feature setting UI after importing into project.\n* Fixed a crash with composition layers in scene due to race condition."
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.13/manual/index.html",
      "dist": {
        "shasum": "a2fa7645cabd4a94cb12d809668e9599c2260f66",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.13.0.tgz"
      }
    },
    "1.12.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.12.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "dependencies": {
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "* Fixed rendering bug when rendering viewport scale < 1. \n* Fixed issue where the Editor would hang when renaming and then viewing OpenXR Settings."
      },
      "upmCi": {
        "footprint": "cddb8f6358b0688a53f366522840d94f966e9b5f"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.12/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "80d54b74e54bc9121b87503e8e4840bfbcdb50f7"
      },
      "dist": {
        "shasum": "c14fb15b587c841ef74b5923c52f7f42c3440303",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.12.1.tgz"
      }
    },
    "1.12.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.12.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n\n* Add class `MetaQuestTouchPlusControllerProfile.QuestTouchPlusController` interaction profile to support Meta Quest Touch Plus Controllers.\n* Added a validation rule to warn you that soft shadows can negatively affect performance for Microsoft HoloLens.\n* Added a validation rule to infrom you to make the OpenXR Loader an active loader in XR Plugin Management if there are active OpenXR features in the OpenXR settings.\n* Added `OpenXRSettings.autoColorSubmissionMode` boolean property to specify OpenXR to use a platform-supported color format in the display swapchain, or for you to manually set which format should OpenXR to use.\n* Added `OpenXRSettings.colorSubmissionModes` array property to control the color format used by the OpenXR display swapchain. The available options can be chosen from the `OpenXRSettings.ColorSubmissionModeGroup` enum. OpenXR will use supported color formats by the platform, starting from the first option in the list. In case none of the color formats supplied is supported by the platform, an error will be thrown. If no color formats are assigned, the format used will be RGBA32.\n* Added `Automatic Color Submission Mode` toggle and `Color Submission Modes` list to the OpenXR project settings tab, allowing you to manually specify the preferred color format to be used by the display swapchain. OpenXR will use supported color formats by the platform, starting from the first option in the list. In case none of the color formats supplied is supported by the platform, an error will be thrown. If no color formats are assigned, the format used will be RGBA32.\n\n### Fixed\n\n* Fixed sort order of OpenXR features listed based first on priority, then by name, preventing spurious changes in Settings files."
      },
      "upmCi": {
        "footprint": "7d2795db5af16eacf76db91cbe4e8444f9bc52d4"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.12/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "3a1c80d75855c479e3f4e825a51d4317dc7430d0"
      },
      "dist": {
        "shasum": "0e64e39b2b9c396d17e5cf3799b8083f2f8df92a",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.12.0.tgz"
      }
    },
    "1.12.0-exp.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.12.0-exp.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management. This experimental version added Composition Layer support (Pair with com.unity.xr.compositionlayers package)",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        },
        {
          "displayName": "Custom Composition Layer Feature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "path": "Samples~/CustomCompositionLayerFeature"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n* Fixed Custom Composition Layer Feature not showing up in the OpenXR feature setting UI after importing into project.\n* Fixed a crash with composition layers in scene due to race condition.\n\n### Changed\n* Implements the construction and maintenance of native composition layers in C# via our LayerProvider classes inheriting from OpenXRCustomLayerHandler."
      },
      "upmCi": {
        "footprint": "790ca1c5646f9e4d7babb1c3bdaa6890793fda3a"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.12/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "19af61c304a088cedf43714559d21c264e6fe010"
      },
      "dist": {
        "shasum": "b558f7b3a8f09c37ae861ab3dddf5458298423ac",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.12.0-exp.1.tgz"
      }
    },
    "1.11.1-exp.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.11.1-exp.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n* Fixed Metal API initialization."
      },
      "upmCi": {
        "footprint": "533fda03166b95d7836ec2aaf852adf3cff78009"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.11/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "d47a3194d464deecfea4a6209b5fd5cd152f4ce4"
      },
      "dist": {
        "shasum": "cc0d7f131fcee82fe81cac5be29c520b3ea4e194",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.11.1-exp.1.tgz"
      }
    },
    "1.11.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.11.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n* Added the `XrPerformanceSettings.SetPerformanceLevelHint` static method, which lets you send performance level suggestions to the runtime. These hints help an OpenXR runtime to optimize the use of hardware resources according to the application needs. Refer to [XR performance settings](xref:openxr-performance-settings#performance-settings-level-hints) for more information. This requires the [XR_EXT_performance_settings](https://registry.khronos.org/OpenXR/specs/1.0/html/xrspec.html#XR_EXT_performance_settings) extension is enabled in the OpenXR runtime.\n* Added the `XrPerformanceSettings.OnXrPerformanceChangeNotification` event, which provides notifications from the OpenXR runtime when a device's thermal, rendering, or compositor performance state changes. The performance states include: `Normal`, `Warning`, and `Impaired`. Refer to [XR performance settings](xref:openxr-performance-settings#performance-settings-notifications) for more information. This requires the [XR_EXT_performance_settings](https://registry.khronos.org/OpenXR/specs/1.0/html/xrspec.html#XR_EXT_performance_settings) extension is enabled in the OpenXR runtime.\n* Added a`Quest 3` option to the `Target Devices` set in the Meta Quest Support settings. This specifies the application's support for Quest 3 devices within the Android manifest.\n* Added missing ButtonControl actions `pinch_ext`, `aim_activate_ext` and `grasp_ext` for Hand Interaction Profile.\n* Added API `OpenXRUtility.ComputePoseToWorldSpace` to recalculate object position and rotation from tracking-space to world-space. Applicable for use cases such as teleporting.\n* Added support for using Local Floor Reference Space in the OpenXR runtime. Useful in applications that require the user to be seated or in a standing fixed position.\n* Added PreInit flags to allow users to disable the main frame buffer and use offscreen swapchain when using Vulkan on Android in the OpenXR settings.\n* Added functional DX12 mock runtime support to the OpenXR package.\n* Added `RegisterStatsDescriptor` method to the `OpenXRFeature` abstract class, which lets your OpenXR feature to register a new statistic that can be feed into and queried at runtime. This method is not thread safe. \n* Added `SetStatAsFloat` method to the `OpenXRFeature` abstract class, which lets your OpenXR feature to feed a float value into a specific statistic that was previously registered using the `RegisterStatsDescriptor`. This method is thread safe. \n* Added `SetStatAsUInt` method to the `OpenXRFeature` abstract class, which lets your OpenXR feature to feed an unsigned integer value into a specific statistic that was previously registered using the `RegisterStatsDescriptor`. This method is thread safe.\n* Added the `OpenXRSettings.RefreshRecenterSpace` static method, which lets you regenerate the internal XR space used for recentering, without the need to wait until a recenter event is received by the OpenXR SDK. Note that this method does not perform a recenter event in any way, as this can only be done by the device runtime.\n* Added Pre-pass Foveated Rendering for both d3d12 and Vulkan. This feature utilizes Fragment Density Mapping on Quest Devices and Fragment Shading Rate on PC to optimize rendering performance. Refer to [Foveated Rendering](xref:openxr-foveated-rendering) for more information.\n* Added `OpenXRUtility.IsSessionFocused` to return if the current session is in the focused state.\n* Added `OpenXRUtility.IsUserPresent` to return the change of user presence, such as when the user has taken off or put on an XR headset. If the system does not support user presence sensing, runtime assumes that the user is always present and IsUserPresent always returns True. If the system supports the sensing of user presence, returns true when detected the presence of a user and returns false when detected the absence of a user.\n\n### Changed\n* Changed tracking origin to use Local Floor in place of Floor by default.\n* Changed delta time calculation to utilize OpenXR for frame estimation. Previously internal Unity mechanisms were used. This feature is currently disabled but will be available in the future.\n* When retrieving input feature from [CommonUsages.userPresence](https://docs.unity3d.com/ScriptReference/XR.CommonUsages-userPresence.html), if XR_EXT_user_presence is supported by the current system, retrieved value will be the same as `OpenXRUtility.IsUserPresent`. If `XR_EXT_user_presence` is not supported, retrieved value will be based on `OpenXRUtility.IsSessionFocused`, which is the default return value before 1.11.0.\n\n### Fixed\n* Fixed Marshal to correctly read the number of bytes for booleans in C++.\n* Fixed crash that occurs while cleaning up destroyed swapchains in OpenXR.\n* Fixed Depth Texture flag disparity between the OpenXR and Oculus providers.\n\n### Added\n* Added `OpenXRUtility.IsSessionFocused` to return if the current session is in the focused state.\n* Added `OpenXRUtility.IsUserPresent` to return the change of user presence, such as when the user has taken off or put on an XR headset. If the system does not support user presence sensing, runtime assumes that the user is always present and IsUserPresent always returns True. If the system supports the sensing of user presence, returns true when detected the presence of a user and returns false when detected the absence of a user.\n\n### Changed\n* When retrieving input feature from [CommonUsages.userPresence](https://docs.unity3d.com/ScriptReference/XR.CommonUsages-userPresence.html), if XR_EXT_user_presence is supported by the current system, retrieved value will be the same as `OpenXRUtility.IsUserPresent`. If `XR_EXT_user_presence` is not supported, retrieved value will be based on `OpenXRUtility.IsSessionFocused`, which is the default return value before 1.11.0."
      },
      "upmCi": {
        "footprint": "5ba13d2282567a2bdddcfa5b4585a9802e080f66"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.11/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "e70a67560a5a88cc6b92e0ef7923c57ba38755a7"
      },
      "dist": {
        "shasum": "f44885243177d29d12d1181bc35593ee4233a2ef",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.11.0.tgz"
      }
    },
    "1.11.0-exp.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.11.0-exp.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management. This experimental version added Composition Layer support (Pair with com.unity.xr.compositionlayers package)",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        },
        {
          "displayName": "Custom Composition Layer Feature",
          "description": "Demonstrates how to add support for a custom composition layer type.",
          "path": "Samples~/CustomCompositionLayerFeature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n* Added XR Composition Layers support - Experimental. Install Composition Layer Experimental package - com.unity.xr.compositionlayers 0.5.0 to pair with."
      },
      "upmCi": {
        "footprint": "4333faa210c8b87022be94d9e41651d4f14c8a12"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.11/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "60aad1a020e818ebd6b277b8e76aa00720ad5c4a"
      },
      "dist": {
        "shasum": "dadeafd9e39e83d5e2063e71d9a99398f5239eb2",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.11.0-exp.1.tgz"
      }
    },
    "1.10.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.10.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n* Added `OpenXRSettings.VulkanAdditionalGraphicsQueue` property to request at startup an additional Vulkan graphics queue in devices that require it. The setting can be enabled through the Project settings UI and build code.\n* Added `Optimize Buffer Discards (Vulkan)` feature setting option within MetaQuestFeature.\n* Added a new optional validation rule to switch to use InputSystem.Controls.StickControl instead of Vector2Control for thumbsticks. StickControl allows more input options for thumbstick-based control, such as acting as both a combined 2D vector, two independent axes or a four-way Dpad with 4 independent buttons.\n\n### Changed\n* Updated project validation rule for Meta Quest Feature - \"Select Oculus Touch Interaction Profile or Meta Quest Pro Touch Interaction Profile to pair with.\" from error to warning to allow other interaction profiles to be enabled as well, like eye gaze or palm pose.\n\n### Fixed\n* Fixed Meta XR `Space Warp` feature crashing issue when trying to access the depth swapchain.\n* Fixed Meta XR `Space Warp` depth subimage imageArrayIndex setup wrong issue for multiview render mode.\n* Fixed a bug where Palm Pose won't work if the Eye Gaze Interaction Profile is added to the project.\n* Fixed \"The type 'AnalyticsResult' is defined in an assembly that is not referenced\" error thrown.\n* Fixed UnitySwapchain destructor to completely destroy swapchains to avoid memory leak.\n* Fixed OpenXR Settings UI to not render settings on platforms that aren't supported.\n* Fixed Android manifest entries were added when the feature was not enabled."
      },
      "upmCi": {
        "footprint": "de1fd8cd7dfb71006b399a24c21ff598829354d6"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.10/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "4e5ca6cb7ac702c659e04def4c4dd2f9b5a8b969"
      },
      "dist": {
        "shasum": "77e3723dca0e1db627d3762116703e32fe0b229d",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.10.0.tgz"
      }
    },
    "1.9.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.9.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.4.0",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.6.3",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2021.3",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n* Implemented `InputSystem.customBindingPathValidators` interface to show UI warnings in the `InputAsset` Editor when added bindings to a disabled interaction profile and when none of the controller type interaction profiles are enabled, but added bindings using generic XRController.\n* Added APIs `GetInteractionProfileType` and `GetDeviceLayoutName` to support binding path validator feature.\n* Added API `TrySetControllerLateLatchAction` to support controller late latching. Also added MarkLateLatchNode.cs in Controller Sample for usages example.\n* Added support for Meta XR feature `Symmetric Projection`, `Space Warp`, and `Eye Tracked Foveation`.\n* Added the option to enable `Subsampled Layout` when creating a Vulkan swapchain.\n* Added support for recentering Floor tracking origin using new API, `OpenXRSettings.SetAllowRecentering`. This static method allows the app to recenter the tracking origin space when requested by the runtime. Note that calling the method won't trigger a recenter event.\n* Added support for Meta XR feature `System Splash Screen`.\n* Added public API for MetaQuestFeature.forceRemoveInternetPermission\n\n### Changed\n* Updated Input System package dependency to 1.6.3.\n* Updated XR management dependency to 4.4.0.\n* Updated OpenXR loader to 1.0.29.\n* Changed MockRuntime and its FeatureSet to public.\n\n### Fixed\n* Fixed incorect XR Validation rules after regenerating the OpenXR package settings asset.\n* Fixed analytics code being called when disabled.\n* Fixed latency issue with controller poses.\n* Fixed an XR_ERROR_SESSION_NOT_RUNNING error if xrRequestExitSession is called when the session is not running."
      },
      "upmCi": {
        "footprint": "bb9b0332c7d3a4018411302811d49266d10faf6d"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.9/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "630b0982955a4b4bbc0ee8440739c579544bbd80"
      },
      "dist": {
        "shasum": "d9acc3cff38128d24dd320a0fdcf2654a7a6d47c",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.9.1.tgz"
      }
    },
    "1.8.2": {
      "name": "com.unity.xr.openxr",
      "version": "1.8.2",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.4.4",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n* Added a new optional validation rule to recommend disabling Screen Space Ambient Occlusion render feature in UniversalRenderer assets to avoid significant performance overhead.\n\n### Changed\n* Removed `Windows Mixed Reality feature group` from Windows build target.\n\n### Fixed\n* Fixed issue that UWP player tries to initialize XR when \"Initialize XR on Startup\" is unchecked.\n* Fixed `SetOutput Failed.` and `SetInput Failed.` log spamming issue when audio sources is not available.\n* Fixed performance drop after headset becomes inactive.\n* Fixed Hand Common Poses Interaction Profile and Palm Pose feature documentation links broken.\n* Fixed Mock Runtime option toggles on accidentally after entering Play Mode.\n* Fixed hand tracking position and rotation not being tracked with XR Hand device."
      },
      "upmCi": {
        "footprint": "26691c3a5a7132dfa3b54d7a905121d7acea91ff"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.8/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "be41b6db171e2e06fb1bd863b239a7fc7b2f10cf"
      },
      "dist": {
        "shasum": "f35e57226234b03998f5a1c04d15433a204d84eb",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.8.2.tgz"
      }
    },
    "1.8.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.8.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.4.4",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n* Added functionality in `OpenXRFeatureBuildHooks` exposing the BootConfig for reading/writing.\n* Added `Force Remove Internet Permission` setting to the Meta Quest Feature settings, allowing to remove Internet permissions added automatically to the application manifest.\n* Added class HPReverbG2ControllerProfile.ReverbG2Controller and a new interaction profile to support the HP Reverb G2 controllers.\n* Added Hand Interaction Profile and added PalmPose and dpad EXT implementations. \n\n### Changed\n* Modified `ModifyAndroidManifestMeta` class to provide required Android manifest entries using a new internal XR system, instead of manually modifying the manifest file.\n* Updated the IsTracked and TrackingState Input Features names with a Usage prefix to prevent name collisions.\n* Updated OpenXR loader to 1.0.27.\n\n### Fixed\n* Fixed type `XrCompositionLayerPassthroughFB` not appearing in the runtime debugger.\n* Fixed crash when deploying to Android on Unity 2023 due to using type `Activity` over `GameActivity`.\n* Fixed issue on Android where screen captures only capture the view on one eye."
      },
      "upmCi": {
        "footprint": "2784ee6512cff26dd408919e59ad1371268394d7"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.8/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "45f13b26a02832b14dd93ff3d908779c3f9c6970"
      },
      "dist": {
        "shasum": "5d1f0362f3e5da6894265413b44024ceaff3bdec",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.8.1.tgz"
      }
    },
    "1.8.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.8.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.4.4",
        "com.unity.xr.core-utils": "2.1.1"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "### Added\n* Added functionality in `OpenXRFeatureBuildHooks` exposing the BootConfig for reading/writing.\n* Added `Force Remove Internet Permission` setting to the Meta Quest Feature settings, allowing to remove Internet permissions added automatically to the application manifest.\n* Added class HPReverbG2ControllerProfile.ReverbG2Controller and a new interaction profile to support the HP Reverb G2 controllers.\n* Added Hand Interaction Profile and added PalmPose and dpad EXT implementations. \n\n### Changed\n* Modified `ModifyAndroidManifestMeta` class to provide required Android manifest entries using a new internal XR system, instead of manually modifying the manifest file.\n* Updated the IsTracked and TrackingState Input Features names with a Usage prefix to prevent name collisions.\n* Updated OpenXR loader to 1.0.27.\n\n### Fixed\n* Fixed type `XrCompositionLayerPassthroughFB` not appearing in the runtime debugger.\n* Fixed crash when deploying to Android on Unity 2023 due to using type `Activity` over `GameActivity`.\n* Fixed issue on Android where screen captures only capture the view on one eye."
      },
      "upmCi": {
        "footprint": "55675ab8f8bc72a8aa0e96e9ea177c0b5aef0c2c"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.8/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "09ba060e4dc66758c7b1b374c17177da07bff191"
      },
      "dist": {
        "shasum": "23f9a48d229b16ec5b4f16009137bffffd4a5614",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.8.0.tgz"
      }
    },
    "1.7.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.7.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.4.4"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n* Fixed - Meta builds now don't include Bluetooth permissions in Android manifest by default when using Microphone class in script code.\n* Fixed crash in OpenXR runtime debugger when cache size is set to 0.\n* Fixed OpenXR project validation to check for correct versions of OpenGLES in Unity 2023 and up.\n* Fixed crash when runtime reports an invalid view configuration from xrWaitFrame.\n* Fixed - OpenXR plugin will only look up functions from supported and enabled extensions.\n* Fixed GPU selection in multi-GPU scenarios.\n\n### Updated\n* Updated documentation for the Meta Quest feature.\n\n### Added\n* Added API `OpenXRRuntime.retryInitializationOnFormFactorErrors` to retry xrGetSystem during initialization if xrGetSystem returns a form factor error.\n* Enable XR_META_performance_metrics. This enables performance stats for Meta Quest devices on OpenXR. \n* Add class MetaQuestTouchProControllerProfile.QuestProTouchController new interaction profile to support Meta Quest pro controllers.\n* Added ability for OpenXRFeature derived classes to add Awake() functions.\n* Added API `OpenXRInput.GetActionIsActive` to check whether an InputAction has any bindings which are currently active.\n* Added API `OpenXRInput.GetActionHandle` to get the action handle of an InputAction and returns 0 if not found."
      },
      "upmCi": {
        "footprint": "cbe9b1c244e0898ca817801a74902e4497ea0892"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.7/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "6a1990de9658294dd93a1f786585fe9878eac1eb"
      },
      "dist": {
        "shasum": "e981e46fd0f010aeddfce5ba2738a3a538a7bcab",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.7.0.tgz"
      }
    },
    "1.6.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.6.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.4.4"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "0307ba2a0127885fc426b598c4b292b6e9d11a60"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.6/manual/index.html",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "e0ea9b26e3d27a43f8e54b4d93d561b0aa739d58"
      },
      "dist": {
        "shasum": "a6a229861f4c1f40be37490e1bea8e5fba521569",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.6.0.tgz"
      }
    },
    "1.5.3": {
      "name": "com.unity.xr.openxr",
      "version": "1.5.3",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.4.2"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "acf062eef3bb75da1de36c2c8508fa7afb431f9d"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "f465b6468dde9034f804c326cd531c81dcb8e2c3"
      },
      "dist": {
        "shasum": "9aba46c23bab93ee729e14142a9522a8db93d23e",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.5.3.tgz"
      }
    },
    "1.5.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.5.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.4.1"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "a63d752051b9b39db9ff026ac9f2e298dd45f37d"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "4a5c45fe4e8656318b571f257f3dc1632aff19aa"
      },
      "dist": {
        "shasum": "9af67fa96e920edc97cd4d01578665f283ae6838",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.5.1.tgz"
      }
    },
    "1.5.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.5.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.4.1"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n* Fixed compilation errors on Game Core platforms where `ENABLE_VR` is not currently defined. Requires Input System 1.4.0 or newer.\n* Fixed an issue that was causing Oculus Android Vulkan builds rendering broken after sleep / awake HMD.\n* Fixed Oculus controllers tracking issues when both OpenXR package and Oculus package are installed in the project.\n* Fixed an issue in Play Mode OpenXR Runtime selection that `Other` option would be reverted to `System Default` after entering and exiting playmode.\n* Fixed a bug in `XR_VARJO_quad_views` support.\n\n### Updated\n* Updated Oculus Android manifest with focusAware, supportedDevices and headTracking tags added. Also added a new validation rule to check if Oculus target devices are selected.\n* Updated OpenXR Loader to 1.0.23.\n* Updated Input System dependency to 1.4.1.\n\n### Added\n* Added generic Project Validation status in the **Project Settings** window under **XR Plug-in Management** if you have [XR Core Utilities](https://docs.unity3d.com/Packages/com.unity.xr.core-utils@latest) 2.1.0 or later installed. These results include the checks for all XR plug-ins that provide validation rules.\n* Added API `OpenXRFeature.SetEnvironmentBlendMode` to set the current XR Environment Blend Mode if it is supported by the active runtime. If not supported, fall back  to the runtime preference.\n* Added API `OpenXRFeature.GetEnvironmentBlendMode` to return the current XR Environment Blend Mode.\n* Added support for `XR_MSFT_holographic_windown_attachment` extension on UWP so that installing Microsoft Mixed Reality OpenXR Plug-in is no longer required if targeting HoloLens V2 devices. And removed corresponding project validator. \n* Added support for `XR_FB_foveation`, `XR_FB_foveation_configuration`, `XR_FB_swapchain_update_state`, `XR_FB_foveation_vulkan` and `XR_FB_space_warp` extensions.\n* Added ability to recover the application after Oculus Link was aborted and re-established. Attempt to restart every 5 seconds after Link disconnected.\n* Added validation rule for duplicate settings in OpenXRPackageSettings.asset."
      },
      "upmCi": {
        "footprint": "4fe36d6817faf2a05782290f56de00fa4ecbfe73"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "c326785d153255c6c85bfec8282ae96733d270bd"
      },
      "dist": {
        "shasum": "c59a3145176fcdfeeace42c70e94e8bceac1c785",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.5.0.tgz"
      }
    },
    "1.5.0-exp.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.5.0-exp.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.4.1"
      },
      "_integrity": "sha512-iq+KzDylTpKcq3mzgRmWxVwE4RPe1gFJrDB2bhGOsyNLSiX4Wvi8DAV3xigJi086p4/Xu66WWngxX/OITsYg3w==",
      "dist": {
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.5.0-exp.1.tgz",
        "shasum": "e1250a668aa94634c1fab4b91f7e5e07cc26508d"
      },
      "unityRelease": "0b14",
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "4d9896e51d41b2e51eb5ca89f28e8f3bba273ea9"
      },
      "_resolved": "/tmp/com.unity.xr.openxr@1.5.0-exp.1-ozkxv724.tgz",
      "_upm": {
        "changelog": "### Fixed\n* Fixed compilation errors on Game Core platforms where `ENABLE_VR` is not currently defined. Requires Input System 1.4.0 or newer.\n* Fixed an issue that was causing Oculus Android Vulkan builds rendering broken after sleep / awake HMD.\n* Fixed Oculus controllers tracking issues when both OpenXR package and Oculus package are installed in the project.\n* Fixed an issue in Play Mode OpenXR Runtime selection that `Other` option would be reverted to `System Default` after entering and exiting playmode.\n* Fixed a bug in `XR_VARJO_quad_views` support.\n\n### Updated\n* Updated Oculus Android manifest with focusAware, supportedDevices and headTracking tags added. Also added a new validation rule to check if Oculus target devices are selected.\n* Updated OpenXR Loader to 1.0.23.\n* Updated Input System dependency to 1.4.1.\n\n### Added\n* Added **experimental** support for Late Latching Head node when using Vulkan.\n* Added generic Project Validation status in the **Project Settings** window under **XR Plug-in Management** if you have [XR Core Utilities](https://docs.unity3d.com/Packages/com.unity.xr.core-utils@latest) 2.1.0 or later installed. These results include the checks for all XR plug-ins that provide validation rules.\n* Added API `OpenXRFeature.SetEnvironmentBlendMode` to set the current XR Environment Blend Mode if it is supported by the active runtime. If not supported, fall back  to the runtime preference.\n* Added API `OpenXRFeature.GetEnvironmentBlendMode` to return the current XR Environment Blend Mode.\n* Added support for `XR_MSFT_holographic_windown_attachment` extension on UWP so that installing Microsoft Mixed Reality OpenXR Plug-in is no longer required if targeting HoloLens V2 devices. And removed corresponding project validator. \n* Added support for `XR_FB_foveation`, `XR_FB_foveation_configuration`, `XR_FB_swapchain_update_state`, `XR_FB_foveation_vulkan` and `XR_FB_space_warp` extensions.\n* Added ability to recover the application after Oculus Link was aborted and re-established. Attempt to restart every 5 seconds after Link disconnected."
      },
      "unity": "2020.3",
      "samples": [
        {
          "path": "Samples~/Controller",
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system."
        },
        {
          "path": "Samples~/MeshingFeature",
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background."
        },
        {
          "path": "Samples~/InterceptFeature",
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method."
        }
      ],
      "_from": "file:/tmp/com.unity.xr.openxr@1.5.0-exp.1-ozkxv724.tgz",
      "_id": "com.unity.xr.openxr@1.5.0-exp.1",
      "upmCi": {
        "footprint": "c41f8a946020c665c643f256629853f7417ab8b1"
      }
    },
    "1.4.2": {
      "name": "com.unity.xr.openxr",
      "version": "1.4.2",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.3.0"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "_upm": {
        "changelog": "### Fixed\n* Fixed unnecessary destroying session on pause and resume."
      },
      "upmCi": {
        "footprint": "41ee4ffd81a33884c53333099e04426831095bd6"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "9f7014aa33bf536ec867484ee501dec6c2a4bc16"
      },
      "_id": "com.unity.xr.openxr@1.4.2",
      "_integrity": "sha512-GwKZKUOCzLXTtFj1itIKfZCHLjemR84iVTC+m15SIoYIUDXWX0Svomw5qpGW1FERUytUynYxrHH8ZG0LaAStlA==",
      "_resolved": "/tmp/com.unity.xr.openxr@1.4.2-7h0736qw.tgz",
      "_from": "file:/tmp/com.unity.xr.openxr@1.4.2-7h0736qw.tgz",
      "dist": {
        "shasum": "fba16e0187735e41e4783a7f342db3db1cb9ed46",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.4.2.tgz"
      }
    },
    "1.4.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.4.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.3.0"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upm": {
        "changelog": "### Fixed\n* Fixed an issue that would cause failure to load OpenXR loader when non-ascii characters in project path.\n* Fixed an editor crash issue when updating OpenXR package version and then enter Playmode.\n* Fixed `EyeGaze` functionality not working in the `Controller` sample.\n* Fixed Oculus `MenuButton` not being recognized in script.\n* Fixed an issue that some OpenXR Editor settings not being serialized properly.\n* Fixed `Failed to suggest bindings for interaction profile` console error spamming when a runtime doesn't support a certain interaction profile.\n\n### Updated\n* Updated OpenXR Loader to 1.0.20.\n* Updated Render Mode naming to Single Pass Instanced / Multiview for Android platform.\n* Updated Input System dependency to 1.3.0.\n* Updated XR mirror view to be based on the occlusion mesh line loop data obtained from `xrGetVisibilityMaskKHR`.\n\n### Added\n* Added runtime failures handling to completely shut down OpenXR when runtime error occurred.\n* Added support to dynamically discover runtimes by registry key.\n* Added logging for no MainCamera tag detected when depthSubmission mode enabled.\n* Added console error logging if entering playmode on unsupported platforms.\n* Added support to automatically open OpenXR project validator if any issues detected after package update.\n* Added API `OpenXRFeature.GetViewConfigurationTypeForRenderPass`, which returns viewConfigurationType for the given renderPass index.\n* Added pre-init support for UWP / WSA platform. Note: OpenXR got unchecked by upgrading to this version (only on UWP), but options chosen under `Features` remained as they were."
      },
      "upmCi": {
        "footprint": "58198a01010057b814e06dbb0a7b20360326793c"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "3e32a6803be6624fae3cad273ca346404003bd5f"
      },
      "_id": "com.unity.xr.openxr@1.4.1",
      "_integrity": "sha512-O00mzVhzPFDwavrDShXvARX2wU26LHnSxLA+PD+an0nC9joYgzjzKhV2LQ5rDj/bXIOP6qUxcK8Akp5Vuih2WA==",
      "_resolved": "/tmp/com.unity.xr.openxr@1.4.1-o3ywdqio.tgz",
      "_from": "file:/tmp/com.unity.xr.openxr@1.4.1-o3ywdqio.tgz",
      "dist": {
        "shasum": "4e515b87788a3e720a3501cb4c57bbba753262c8",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.4.1.tgz"
      }
    },
    "1.4.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.4.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.3.0"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upm": {
        "changelog": "### Fixed\n* Fixed an issue that would cause failure to load OpenXR loader when non-ascii characters in project path.\n* Fixed an editor crash issue when updating OpenXR package version and then enter Playmode.\n* Fixed `EyeGaze` functionality not working in the `Controller` sample.\n* Fixed Oculus `MenuButton` not being recognized in script.\n* Fixed an issue that some OpenXR Editor settings not being serialized properly.\n* Fixed `Failed to suggest bindings for interaction profile` console error spamming when a runtime doesn't support a certain interaction profile.\n\n### Updated\n* Updated OpenXR Loader to 1.0.20.\n* Updated Render Mode naming to Single Pass Instanced / Multiview for Android platform.\n* Updated Input System dependency to 1.3.0.\n* Updated XR mirror view to be based on the occlusion mesh line loop data obtained from `xrGetVisibilityMaskKHR`.\n\n### Added\n* Added runtime failures handling to completely shut down OpenXR when runtime error occurred.\n* Added support to dynamically discover runtimes by registry key.\n* Added logging for no MainCamera tag detected when depthSubmission mode enabled.\n* Added console error logging if entering playmode on unsupported platforms.\n* Added support to automatically open OpenXR project validator if any issues detected after package update.\n* Added API `OpenXRFeature.GetViewConfigurationTypeForRenderPass`, which returns viewConfigurationType for the given renderPass index.\n* Added pre-init support for UWP / WSA platform. Note: OpenXR got unchecked by upgrading to this version (only on UWP), but options chosen under `Features` remained as they were."
      },
      "upmCi": {
        "footprint": "cfb708c220fa1643061f345f17345ad1e171d5c5"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "0ea7721f8adbc97e8af1ee57f51e44622961e23e"
      },
      "_id": "com.unity.xr.openxr@1.4.0",
      "_integrity": "sha512-BVWhpU46IqLA6XrwaUcucl6K+K8+B+i62ObQyrSFizQd5mQO8KSHwNWKcrfIivIDYmUwz+8IKAcqI4v4rMuL/w==",
      "_resolved": "/tmp/com.unity.xr.openxr@1.4.0-ixj1xll0.tgz",
      "_from": "file:/tmp/com.unity.xr.openxr@1.4.0-ixj1xll0.tgz",
      "dist": {
        "shasum": "0ce2f6015e8928ae94b57b8fcece4cc1268f7212",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.4.0.tgz"
      }
    },
    "1.3.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.3.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.0.2"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "ba72fdf172ba9d700affa8957caf31380e92d1fb"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "dd3e43afc5c298c91f87b3f41a640f4d0c1da50e"
      },
      "_id": "com.unity.xr.openxr@1.3.1",
      "_integrity": "sha512-S8Vb1F/jWalnFmcMrbGneX/RLvVdMq2AHqcufZO5blJjWuaqgbwNC/xDgxAGi1UiS9oxJ6dtxJC8/qi1xI22ng==",
      "_resolved": "/pkgprom/com.unity.xr.openxr-1.3.1.tgz",
      "_from": "file:com.unity.xr.openxr-1.3.1.tgz",
      "dist": {
        "shasum": "573b07b19e57266bc34ed7c5bce4f8adc0a7bc58",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.3.1.tgz"
      }
    },
    "1.3.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.3.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.0.2"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "ab037109b4c6851361fea29632bf0668faf96ee7"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "969d286b84b4009f996f43186c37a68f3350aab3"
      },
      "_id": "com.unity.xr.openxr@1.3.0",
      "_integrity": "sha512-AaprnOhUkSYUT3gNdBq4EdgY5NR7FRhzKbCqfsDd7kYxDFnbDaKVMhG9wxTUA0YVmBwavPpAXTNIFudWxaGWxw==",
      "_resolved": "/pkgprom/com.unity.xr.openxr-1.3.0.tgz",
      "_from": "file:com.unity.xr.openxr-1.3.0.tgz",
      "dist": {
        "shasum": "a92d8b55541db4581bfe456382c601cc145e1ec1",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.3.0.tgz"
      }
    },
    "1.2.8": {
      "name": "com.unity.xr.openxr",
      "version": "1.2.8",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.0.2"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "359ec208a5cf45b33f1cf30c2d44d1239a41d226"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "9c83bf2d4143ac7632a273fbc236ff5636d6fd71"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.openxr-1.2.8.tgz",
      "_id": "com.unity.xr.openxr@1.2.8",
      "dist": {
        "shasum": "21557e85683c3105c081abb5eca58beffe16c192",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.2.8.tgz"
      }
    },
    "1.2.3": {
      "name": "com.unity.xr.openxr",
      "version": "1.2.3",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.0.2"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "bcea9c6d07f1d0da17b5851ab0fe03b2de57cebf"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "683b7326f78d42b2fa865f94f5e1163d7ab0aa72"
      },
      "_id": "com.unity.xr.openxr@1.2.3",
      "dist": {
        "shasum": "fe6f850d1c155006e5949f008aa29988cb63f257",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.2.3.tgz"
      }
    },
    "1.2.2": {
      "name": "com.unity.xr.openxr",
      "version": "1.2.2",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.0.2"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "01296535c12d139ffff7bf76c1b1c04be5ed27e4"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "c446c32bb70a9d9b6fd9d24890111c53249dbdf0"
      },
      "_id": "com.unity.xr.openxr@1.2.2",
      "dist": {
        "shasum": "4a3606b80f569881aff10d273c7134d8140b3d0a",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.2.2.tgz"
      }
    },
    "1.2.0": {
      "name": "com.unity.xr.openxr",
      "version": "1.2.0",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.0.2"
      },
      "unity": "2020.3",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "18b782c568d44fc7341b85ff5daf8f3e8d9480e3"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "457e10826af15117a28ba2160629f587074894a1"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.openxr-1.2.0.tgz",
      "_id": "com.unity.xr.openxr@1.2.0",
      "dist": {
        "shasum": "c79fd9fa16a5efd1ca34e6a9be89981e903fc1c2",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.2.0.tgz"
      }
    },
    "1.1.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.1.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.0.2"
      },
      "unity": "2020.2",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "d1806d2dd73e07d979446411f7daab0dffb21fde"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "385943b78c1ad69f8096e3820beca29305960a9f"
      },
      "_id": "com.unity.xr.openxr@1.1.1",
      "dist": {
        "shasum": "86dbf118410c8133c9e5d60a776ab38d1c541bad",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.1.1.tgz"
      }
    },
    "1.0.3": {
      "name": "com.unity.xr.openxr",
      "version": "1.0.3",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.0.2"
      },
      "unity": "2020.2",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "bf81a38ac02f56369ebaaa8310d0a9716e97aba6"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "82546898438f3e4ef3f1e52e008ca0b93c722c9a"
      },
      "_id": "com.unity.xr.openxr@1.0.3",
      "dist": {
        "shasum": "838b65b8f7f46f48c2f973e5e76fa45819fbb406",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.0.3.tgz"
      }
    },
    "1.0.2": {
      "name": "com.unity.xr.openxr",
      "version": "1.0.2",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.0.2"
      },
      "unity": "2020.2",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "9b83557b220857cadf5481bf677d88e54c58ea39"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "297b6c200ee5dc8d53e77c5d931f18bcaa3ce556"
      },
      "_id": "com.unity.xr.openxr@1.0.2",
      "dist": {
        "shasum": "27feb146b9669cca798506c9a68e339cddd699e0",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.0.2.tgz"
      }
    },
    "1.0.0-pre.1": {
      "name": "com.unity.xr.openxr",
      "version": "1.0.0-pre.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.1",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.0.2"
      },
      "unity": "2021.1",
      "unityRelease": "0b3",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "cc31aaf1bfa4feb228f3486786c1e637f5b7f388"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "735e27dcbedfd1682ca7b9c40bb48a34f9d215c2"
      },
      "_id": "com.unity.xr.openxr@1.0.0-pre.1",
      "dist": {
        "shasum": "0f0db0198a621ebe951f8da1658d96702511af34",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-1.0.0-pre.1.tgz"
      }
    },
    "0.1.2-preview.2": {
      "name": "com.unity.xr.openxr",
      "version": "0.1.2-preview.2",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.0-pre.2",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.1.0-preview.1"
      },
      "unity": "2020.2",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "b17d42b750df3eded68075dede5663f1be36efee"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "8621e12ff34382c8a02cf25e5728c4c2ef41b474"
      },
      "_resolved": "",
      "_integrity": "",
      "_from": "file:com.unity.xr.openxr-0.1.2-preview.2.tgz",
      "_id": "com.unity.xr.openxr@0.1.2-preview.2",
      "dist": {
        "shasum": "3474aacfc03793835869daf0381884795bec1933",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-0.1.2-preview.2.tgz"
      }
    },
    "0.1.1-preview.1": {
      "name": "com.unity.xr.openxr",
      "version": "0.1.1-preview.1",
      "displayName": "OpenXR Plugin",
      "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
      "keywords": [
        "openxr",
        "xr",
        "reality",
        "xreditorsubsystem"
      ],
      "category": "",
      "dependencies": {
        "com.unity.xr.management": "4.0.0-pre.2",
        "com.unity.xr.legacyinputhelpers": "2.1.2",
        "com.unity.inputsystem": "1.1.0-preview.1"
      },
      "unity": "2020.2",
      "unityRelease": "0b14",
      "samples": [
        {
          "displayName": "Controller",
          "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system",
          "path": "Samples~/Controller"
        },
        {
          "displayName": "Meshing Subsystem Feature",
          "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
          "path": "Samples~/MeshingFeature"
        },
        {
          "displayName": "Intercept Feature",
          "description": "Demonstrates how to intercept an OpenXR method.",
          "path": "Samples~/InterceptFeature"
        }
      ],
      "upmCi": {
        "footprint": "b17c6aea3cdc81ed60fafa7240373b4ef89e5f49"
      },
      "repository": {
        "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
        "type": "git",
        "revision": "0297a82a33c5b22a7cd428453841f41a11ce9567"
      },
      "_id": "com.unity.xr.openxr@0.1.1-preview.1",
      "dist": {
        "shasum": "2cd76cd556f8d913ebfa693d1d1506b7bbad2567",
        "tarball": "https://download-packages.unity.cn/com.unity.xr.openxr/-/com.unity.xr.openxr-0.1.1-preview.1.tgz"
      }
    }
  },
  "etag": "\"329051e56850cb40a612997101b3e9ba\"",
  "provider": "upm",
  "name": "com.unity.xr.openxr",
  "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
  "_id": "com.unity.xr.openxr",
  "cnTags": [],
  "time": {
    "1.16.0-pre.2": "2025-10-04T03:27:01Z",
    "1.16.0-pre.1": "2025-08-19T03:27:02Z",
    "1.15.1": "2025-07-27T03:26:31Z",
    "1.15.0": "2025-07-02T03:26:32Z",
    "1.15.0-pre.2": "2025-05-23T03:26:31Z",
    "1.15.0-pre.1": "2025-04-25T03:26:31Z",
    "1.14.3": "2025-04-20T03:26:31Z",
    "1.14.2": "2025-03-28T03:25:01Z",
    "1.14.1": "2025-02-27T03:25:02Z",
    "1.14.0": "2024-12-31T03:25:01Z",
    "1.13.1": "2024-12-05T07:55:35Z",
    "1.13.2": "2024-12-05T07:55:07Z",
    "1.13.0": "2024-10-08T10:36:54Z",
    "1.12.1": "2024-09-17T10:14:00Z",
    "1.12.0": "2024-08-07T22:36:41Z",
    "1.12.0-exp.1": "2024-07-03T15:24:28Z",
    "1.11.1-exp.1": "2024-06-14T19:22:38Z",
    "1.11.0": "2024-05-10T09:10:42Z",
    "1.11.0-exp.1": "2024-02-26T10:46:53Z",
    "1.10.0": "2024-01-29T09:11:38Z",
    "1.9.1": "2023-10-24T16:15:01Z",
    "1.8.2": "2023-07-26T19:16:55Z",
    "1.8.1": "2023-06-13T08:39:48Z",
    "1.8.0": "2023-06-01T14:10:09Z",
    "1.7.0": "2023-03-07T12:14:00Z",
    "1.6.0": "2022-12-01T14:11:28Z",
    "1.5.3": "2022-09-29T19:33:14Z",
    "1.5.1": "2022-08-15T07:51:46Z",
    "1.5.0": "2022-08-12T08:43:58Z",
    "1.5.0-exp.1": "2022-07-21T15:38:49Z",
    "1.4.2": "2022-05-17T18:34:11Z",
    "1.4.1": "2022-04-14T16:58:53Z",
    "1.4.0": "2022-04-11T20:43:38Z",
    "1.3.1": "2021-12-02T06:04:41Z",
    "1.3.0": "2021-11-11T16:13:57Z",
    "1.2.8": "2021-08-02T15:50:30Z",
    "1.2.3": "2021-06-28T17:19:46Z",
    "1.2.2": "2021-06-02T18:51:04Z",
    "1.2.0": "2021-05-18T14:50:56Z",
    "1.1.1": "2021-04-08T18:18:02Z",
    "1.0.3": "2021-03-18T20:06:57Z",
    "1.0.2": "2021-02-11T19:42:56Z",
    "1.0.0-pre.1": "2021-02-11T19:26:19Z",
    "0.1.2-preview.2": "2021-01-05T17:57:41Z",
    "0.1.1-preview.1": "2020-12-16T22:19:19Z"
  }
}
